[{"path":"https://zhangh12.github.io/TrialSimulator/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024-2025 Han Zhang Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/articles/adaptiveDesign.html","id":"simulation-settings","dir":"Articles","previous_headings":"","what":"Simulation Settings","title":"An Example of Simulating a Trial with Adaptive Design","text":"Trial consists two active arms high low dose, placebo arm. Patients randomized trial ratio 1:1:1. 30 patients randomized per month first 10 months, 50 patients per month 1000 patients. Dropout rate 8% month 12, 18% month 18, modeled Weibull distribution. scale shape parameters Weibull distribution can computed using helper function Two time--event endpoints (PFS OS) binary surrogate consideration, higher rate surrogate better. surrogate readout time 5 weeks. low dose arm selected zl>1.28z_l > 1.28; high dose arm selected zh>1.28>zlz_h > 1.28 > z_l; keep arms otherwise. 0.05 placebo 0.12 low dose arm 0.13 high dose arm 5 months placebo 6.7 months low dose arm (hazard ratio 0.75) 7.1 months high dose arm (hazard ratio 0.70) Exponential distribution assumed. 14 months placebo 17.5 months low dose arm (hazard ratio 0.80) 18.2 months high dose arms (hazard ratio 0.77) Dose selection done 300 patients randomized readout surrogate ready analysis. interim set test PFS 300 PFS events observed. non-binding futility analysis also done boundary 0.5. Final analysis set PFS OS planned 1000 patients randomized least 300 OS events observed. Meanwhile, trial reached least 28 months least 520 events observed PFS. control family-wise error rate accounting PFS OS, well adaptation dose-selection, split α\\alpha PFS (0.5%) OS (2%), adopt closed test Dunnett’s test intersection hypotheses.","code":"weibullDropout(time = c(12, 18), dropout_rate = c(.08, .18)) #>     shape     scale  #>  2.138567 38.343517"},{"path":"https://zhangh12.github.io/TrialSimulator/articles/adaptiveDesign.html","id":"define-three-arms","dir":"Articles","previous_headings":"","what":"Define Three Arms","title":"An Example of Simulating a Trial with Adaptive Design","text":"","code":"#' define three arms pbo <- arm(name = 'placebo') low <- arm(name = 'low dose') high <- arm(name = 'high dose')  #' define endpoints in placebo pfs <- endpoint(name = 'pfs', type = 'tte',                 generator = rexp, rate = log(2) / 5)  os <- endpoint(name = 'os', type = 'tte',                generator = rexp, rate = log(2) / 14)  five_weeks <- 5 / 52 * 12 ## convert it in months surrogate <- endpoint(name = 'surrogate', type = 'non-tte',                       readout = c(surrogate = five_weeks),                       generator = rbinom, size = 1, prob = .05) pbo$add_endpoints(pfs, os, surrogate)  #' define endpoints in low dose arm pfs <- endpoint(name = 'pfs', type = 'tte',                 generator = rexp, rate = log(2) / 6.7)  os <- endpoint(name = 'os', type = 'tte',                generator = rexp, rate = log(2) / 17.5)  surrogate <- endpoint(name = 'surrogate', type = 'non-tte',                       readout = c(surrogate = five_weeks),                       generator = rbinom, size = 1, prob = .12) low$add_endpoints(pfs, os, surrogate)  #' define endpoints in high dose arm pfs <- endpoint(name = 'pfs', type = 'tte',                 generator = rexp, rate = log(2) / 7.1)  os <- endpoint(name = 'os', type = 'tte',                generator = rexp, rate = log(2) / 18.2)  surrogate <- endpoint(name = 'surrogate', type = 'non-tte',                       readout = c(surrogate = five_weeks),                       generator = rbinom, size = 1, prob = .13) high$add_endpoints(pfs, os, surrogate)"},{"path":"https://zhangh12.github.io/TrialSimulator/articles/adaptiveDesign.html","id":"define-a-trial","dir":"Articles","previous_headings":"","what":"Define a Trial","title":"An Example of Simulating a Trial with Adaptive Design","text":"three arms, can define trial class Trial. Recruitment curve specified enroller built-function StaggeredRecruiter piecewise constant rate. set duration arbitrary large number (50) controlling end trial pre-defined milestones later. Note seed = NULL, TrialSimulator pick seed purpose reproducibility.","code":"accrual_rate <- data.frame(end_time = c(10, Inf),                            piecewise_rate = c(30, 50)) trial <- trial(   name = 'Trial-3415', n_patients = 1000,   seed = 1727811904, duration = 40,   enroller = StaggeredRecruiter, accrual_rate = accrual_rate,   dropout = rweibull, shape = 2.139, scale = 38.343 )  trial$add_arms(sample_ratio = c(1, 1, 1), low, high, pbo) #> Arm(s) <low dose, high dose, placebo> are added to the trial. #> Randomization is done for 1000 potential patients. #> Data of 1000 potential patients are generated for the trial with 3 arm(s) <low dose, high dose, placebo>."},{"path":"https://zhangh12.github.io/TrialSimulator/articles/adaptiveDesign.html","id":"define-trial-milestones-and-action-functions","dir":"Articles","previous_headings":"","what":"Define Trial Milestones and Action Functions","title":"An Example of Simulating a Trial with Adaptive Design","text":"Next, define action functions trial milestones, .e., dose selection, interim final analysis. Note action function always arguments trial class Trial character milestone_name. calculate z statistics Farrington-Manning test binary endpoint surrogate using helper function fitFarringtonManning, returns data frame (see ?fitFarringtonManning). interim, test PFS using logrank test carry non-binding futility analysis following action function. Depending many arms carried forward dose selection, fit may consists testing results one two dose arms. Note formal test PFS done end trial p-values. futility analysis planned, can simply set action = doNothing milestone. final analysis, conduct closed test using Dunnett’s test intersection hypotheses. action function follows. Next, register three trial milestones listener","code":"action1 <- function(trial, milestone_name){      locked_data <- trial$get_locked_data(milestone_name)      fit <- fitFarringtonManning(endpoint = 'surrogate', placebo = 'placebo',                               data = locked_data, alternative = 'greater')      # browser() ## if you want to see what does fit look like   z_l <- fit$z[fit$arm == 'low dose']   z_h <- fit$z[fit$arm == 'high dose']   if(z_l > 1.28){     trial$remove_arms('high dose')     trial$save(value = 'low', name = 'kept_arm')   }else if(z_h > 1.28){     trial$remove_arms('low dose')     trial$save(value = 'high', name = 'kept_arm')   }else{     trial$save(value = 'both', name = 'kept_arm')   }    invisible(NULL)  } action2 <- function(trial, milestone_name){      locked_data <- trial$get_locked_data(milestone_name)    fit <- fitLogrank(Surv(pfs, pfs_event) ~ arm, placebo = 'placebo',                      data = locked_data, alternative = 'less')    ## futility analysis   if(max(fit$z) < .5){     trial$save(value = 'negative', name = 'futility')          ## extend duration     ## trial$set_duration(45)   }else{     trial$save(value = 'positive', name = 'futility')   }    invisible(NULL)  } action3 <- function(trial, milestone_name){      locked_data <- trial$get_locked_data(milestone_name)    ## test PFS   dt_pfs <- trial$dunnettTest(Surv(pfs, pfs_event) ~ arm, placebo = 'placebo',                               treatments = c('high dose', 'low dose'),                               milestones = c('dose selection', 'interim', 'final'),                               alternative = 'less',                               planned_info = 'default')      ct_pfs <- trial$closedTest(dt_pfs, treatments = c('high dose', 'low dose'),                              milestones = c('interim', 'final'),                              alpha = .005, alpha_spending = 'asOF')    ## test OS   dt_os <- trial$dunnettTest(Surv(os, os_event) ~ arm, placebo = 'placebo',                              treatments = c('high dose', 'low dose'),                              milestones = c('dose selection', 'final'),                              alternative = 'less',                               planned_info = 'default')      ct_os <- trial$closedTest(dt_pfs, treatments = c('high dose', 'low dose'),                             milestones = c('final'),                             alpha = .02, alpha_spending = 'asOF')      ## we only save testing decision here   ## You can save whatever you want for summarizing things later, e.g. reject time   trial$save(value = ct_pfs$decision[ct_pfs$arm == 'high dose'],               name = 'pfs_high_dose_decision')      trial$save(value = ct_pfs$decision[ct_pfs$arm == 'low dose'],               name = 'pfs_low_dose_decision')      trial$save(value = ct_os$decision[ct_os$arm == 'high dose'],               name = 'os_high_dose_decision')      trial$save(value = ct_os$decision[ct_os$arm == 'low dose'],               name = 'os_low_dose_decision')    invisible(NULL) } dose_selection <- milestone(name = 'dose selection', action = action1,                                when = eventNumber(endpoint = 'surrogate', n = 300)                             )  interim <- milestone(name = 'interim', action = action2,                       when = eventNumber(endpoint = 'pfs', n = 300)                      )  final <- milestone(name = 'final', action = action3,                     when = enrollment(n = 1000, arms = c('placebo', 'low dose', 'high dose')) &                       eventNumber(endpoint = 'os', n = 300) & (                        calendarTime(time = 28) |                           eventNumber(endpoint = 'pfs', n = 520)                        )                    )  listener <- listener() #' register milestones with listener listener$add_milestones(   dose_selection,   interim,   final ) #> A milestone <dose selection> is registered. #> A milestone <interim> is registered. #> A milestone <final> is registered."},{"path":"https://zhangh12.github.io/TrialSimulator/articles/adaptiveDesign.html","id":"execute-a-trial","dir":"Articles","previous_headings":"","what":"Execute a Trial","title":"An Example of Simulating a Trial with Adaptive Design","text":"can run trial follows. default, TrialSimulator generates plot showing cumulative number patients endpoint events time arms. can set FALSE massive number simulation replicates run save time.  custom action functions, can use Trial$save() save intermediate results summary purpose, can accessed anytime anywhere dive action function (action3) final analysis. can literally execute function line line locked data loaded. Note member functions Trial$dunnettTest Trial$closedTest can make use locked data multiple stages (milestones argument) automatically, thus, unlike action3, explicit call Trial$get_locked_data(milestone_name) unnecessary. two null hypotheses PFS OS accepted high dose dropped dose selection. Thus, milestone_at_reject NA, reject_time infinite. contrast, PFS OS significant low . Note even PFS tested interim final, one claim significance final analysis (milestone_at_reject). reject_time (29.4476343) can saved output using member function Trial$save. TrialSimulator abstracts data generation management allow user focus implementing statistical analysis. simulates trial patient level, provide flexibility adaptive design.","code":"controller <- controller(trial, listener) controller$run(plot_event = TRUE) #> Condition of milestone <dose selection> is being checked. #> Data is locked at time = 11.3138461538462 for milestone <dose selection>. #> Locked data can be accessed in Trial$get_locked_data('dose selection').  #> Number of events at lock time: #>   patient pfs os surrogate         arms #> 1     366 142 65       300 c(122, 4.... #>  #> Arm <high dose> is removed. #> Sample ratio is updated to be <low dose: 1, placebo: 1>. #> Trial data is rolling back to time = 11.3138461538462.  #> Randomization will be carried out again for unenrolled patients. #> Randomization is done for 634 potential patients. #> Data of 634 potential patients are generated for the trial with 2 arm(s) <low dose, placebo>. #> Condition of milestone <interim> is being checked. #> Data is locked at time = 19.1658431016631 for milestone <interim>. #> Locked data can be accessed in Trial$get_locked_data('interim').  #> Number of events at lock time: #>   patient pfs  os surrogate         arms #> 1     637 300 146       534 c(319, 1.... #>  #> Condition of milestone <final> is being checked. #> Data is locked at time = 29.4476342734663 for milestone <final>. #> Locked data can be accessed in Trial$get_locked_data('final').  #> Number of events at lock time: #>   patient pfs  os surrogate         arms #> 1     878 542 300       744 c(439, 2.... #>  #> Arm <low dose> is still in the trial.  #> Arm <low dose> is still in the trial.  #> Arm <low dose> is still in the trial.  #> Arm <low dose> is still in the trial.  #> Arm <low dose> is still in the trial.  #> Arm <low dose> is still in the trial.  #> Arm <low dose> is still in the trial.  #> Arm <low dose> is still in the trial.  #> Arm <low dose> is still in the trial.  #> Arm <low dose> is still in the trial.  #> Arm <low dose> is still in the trial.  #> Arm <low dose> is still in the trial.  #> Arm <low dose> is still in the trial. controller$get_output() %>%    kable(escape = FALSE) %>%    kable_styling(bootstrap_options = \"striped\",                  full_width = FALSE,                 position = \"left\") %>%   scroll_box(width = \"100%\") ## test PFS dt_pfs <- trial$dunnettTest(Surv(pfs, pfs_event) ~ arm, placebo = 'placebo',                             treatments = c('high dose', 'low dose'),                             milestones = c('dose selection', 'interim', 'final'),                             alternative = 'less',                              planned_info = 'default') #> Arm <low dose> is still in the trial.  #> Arm <low dose> is still in the trial.  #> Arm <low dose> is still in the trial.  #> Arm <low dose> is still in the trial.  #> Arm <low dose> is still in the trial.  #> Arm <low dose> is still in the trial.  #> Arm <low dose> is still in the trial.  #> Arm <low dose> is still in the trial. ct_pfs <- trial$closedTest(dt_pfs, treatments = c('high dose', 'low dose'),                            milestones = c('interim', 'final'),                            alpha = .005, alpha_spending = 'asOF')  ## test OS dt_os <- trial$dunnettTest(Surv(os, os_event) ~ arm, placebo = 'placebo',                            treatments = c('high dose', 'low dose'),                            milestones = c('dose selection', 'final'),                            alternative = 'less',                             planned_info = 'default') #> Arm <low dose> is still in the trial.  #> Arm <low dose> is still in the trial.  #> Arm <low dose> is still in the trial.  #> Arm <low dose> is still in the trial.  #> Arm <low dose> is still in the trial. ct_os <- trial$closedTest(dt_pfs, treatments = c('high dose', 'low dose'),                           milestones = c('final'),                           alpha = .02, alpha_spending = 'asOF')  print(ct_pfs) #>         arm decision milestone_at_reject reject_time #> 1 high dose   accept                <NA>         Inf #> 2  low dose   reject               final    29.44763 print(ct_os) #>         arm decision milestone_at_reject reject_time #> 1 high dose   accept                <NA>         Inf #> 2  low dose   reject               final    29.44763"},{"path":"https://zhangh12.github.io/TrialSimulator/articles/adaptiveDesign.html","id":"execute-trial-simulation","dir":"Articles","previous_headings":"","what":"Execute Trial Simulation","title":"An Example of Simulating a Trial with Adaptive Design","text":"can run massive number replicates simulation study operating characteristics trial design specifying n Controller$run(). can set plot_event = FALSE turn plotting save running time. Number Randomized Patients Stages Number Events PFS OS Stages Power Testing PFS OS Power Testing PFS OS (Cont.)","code":"## reset a controller if $run has been executed before controller$reset() controller$run(n = 1000, plot_event = FALSE, silent = TRUE) output <- controller$get_output() output %>%    head(10) %>%    kable(escape = FALSE) %>%    kable_styling(bootstrap_options = \"striped\",                  full_width = FALSE,                 position = \"left\") %>%   scroll_box(width = \"100%\") output %>%    summarise(     time_dose_selection = mean(`milestone_time_<dose selection>`),      time_interim = mean(`milestone_time_<interim>`),      time_final = mean(`milestone_time_<final>`),      n_dose_selection = mean(`n_events_<dose selection>_<patient_id>`),      n_interim = mean(`n_events_<interim>_<patient_id>`),      n_final = mean(`n_events_<final>_<patient_id>`),      low = mean(kept_arm == 'low') * 100,      high = mean(kept_arm == 'high') * 100,      both = mean(kept_arm == 'both') * 100   ) %>%    kable(col.names = NULL, digits = 1, align = 'r',          caption = 'Number of Randomized Patients at Stages') %>%    add_header_above(c(rep(c('Dose Selection', 'Interim', 'Final'), 2),                       'Low Dose', 'High Dose', 'Both'), align = 'r') %>%    add_header_above(c('Time' = 3, 'Number of Patients' = 3, 'Selected Dose (%)' = 3)) %>%    kable_styling(full_width = TRUE) output %>%    summarise(     n_pfs_dose_selection = mean(`n_events_<dose selection>_<pfs>`),      n_pfs_interim = mean(`n_events_<interim>_<pfs>`),     n_pfs_final = mean(`n_events_<final>_<pfs>`),     n_os_dose_selection = mean(`n_events_<dose selection>_<os>`),      n_os_interim = mean(`n_events_<interim>_<os>`),     n_os_final = mean(`n_events_<final>_<os>`)   ) %>%    kable(col.names = NULL, digits = 1, align = 'r',          caption = 'Number of Events of PFS and OS at Stages') %>%    add_header_above(rep(c('Dose Selection', 'Interim', 'Final'), 2), align = 'r') %>%    add_header_above(c('PFS' = 3, 'OS' = 3)) %>%    kable_styling(full_width = TRUE) output %>%    summarise(     power_pfs_low = mean(pfs_low_dose_decision == 'reject') * 100,      power_pfs_high = mean(pfs_high_dose_decision == 'reject') * 100,      power_pfs_or = mean(pfs_low_dose_decision == 'reject' | pfs_high_dose_decision == 'reject') * 100,      power_pfs_and = mean(pfs_low_dose_decision == 'reject' & pfs_high_dose_decision == 'reject') * 100,      power_os_low = mean(os_low_dose_decision == 'reject') * 100,      power_os_high = mean(os_high_dose_decision == 'reject') * 100,      power_os_or = mean(os_low_dose_decision == 'reject' | os_high_dose_decision == 'reject') * 100,     power_os_and = mean(os_low_dose_decision == 'reject' & os_high_dose_decision == 'reject') * 100   ) %>%    kable(col.names = NULL, digits = 1, align = 'r',          caption = 'Power of Testing PFS and OS') %>%    add_header_above(rep(c('Low Dose', 'High Dose', 'Low or High', 'Low and High'), 2), align = 'r') %>%    add_header_above(c('PFS (%)' = 4, 'OS (%)' = 4)) %>%    kable_styling(full_width = TRUE) output %>%    summarise(     power_pfs_not_os = mean((pfs_low_dose_decision == 'reject' | pfs_high_dose_decision == 'reject') &                                os_low_dose_decision == 'accept' & os_high_dose_decision == 'accept') * 100,      power_os_not_pfs = mean((os_low_dose_decision == 'reject' | os_high_dose_decision == 'reject') &                                pfs_low_dose_decision == 'accept' & pfs_high_dose_decision == 'accept') * 100,      power_pfs_and_os = mean((pfs_low_dose_decision == 'reject' | pfs_high_dose_decision == 'reject') &                                (os_low_dose_decision == 'reject' | os_high_dose_decision == 'reject')) * 100,     power_pfs_or_os = mean((pfs_low_dose_decision == 'reject' | pfs_high_dose_decision == 'reject') |                                (os_low_dose_decision == 'reject' | os_high_dose_decision == 'reject')) * 100   ) %>%    kable(col.names = NULL, digits = 1, align = 'r',          caption = 'Power of Testing PFS and OS (Cont.)') %>%    add_header_above(c('Reject PFS and Accept OS', 'Accept PFS and Reject OS',                       'Reject PFS and OS', 'Reject PFS or OS'), align = 'r') %>%    kable_styling(full_width = TRUE)"},{"path":"https://zhangh12.github.io/TrialSimulator/articles/conditionSystem.html","id":"a-trial-has-been-running-for-6-months","dir":"Articles","previous_headings":"","what":"A trial has been running for 6 months","title":"Condition System for Triggering Milestones in a Trial","text":"","code":"## Note: the unit of time depends on the context of a trial ##       It is users responsibility to align it with trial's parameters calendarTime(time = 6) #> Calendar time >=  6"},{"path":"https://zhangh12.github.io/TrialSimulator/articles/conditionSystem.html","id":"at-least-520-patients-are-enrolled","dir":"Articles","previous_headings":"","what":"At least 520 patients are enrolled","title":"Condition System for Triggering Milestones in a Trial","text":"","code":"enrollment(n = 520) #> Number of randomized patients >=  520"},{"path":"https://zhangh12.github.io/TrialSimulator/articles/conditionSystem.html","id":"at-least-340-pfs-events-are-observed","dir":"Articles","previous_headings":"","what":"At least 340 PFS events are observed","title":"Condition System for Triggering Milestones in a Trial","text":"","code":"## condition is based on number of event in the placebo arm ## Note: 'pfs' is the name of the endpoint, i.e., endpoints(name = 'pfs', ...) ## Note: 'pbo' is the name of the placebo arm, i.e., arm(name = 'pbo', ...) eventNumber(endpoint = 'pfs', n = 340, arms = 'pbo') #> Number of events (pfs) >= 340 in arms <pbo>.  ## condition can be based on number of event in specific arms eventNumber(endpoint = 'pfs', n = 340, arms = c('pbo', 'trt')) #> Number of events (pfs) >= 340 in arms <pbo, trt>.  ## condition can be based on number of event in the trial ## Note: for example, a trial of more than two arms.  ##       Here the number of PFS events are counted on all arms in trial eventNumber(endpoint = 'pfs', n = 340) #> Number of events (pfs) >= 340 in all arms in a trial."},{"path":"https://zhangh12.github.io/TrialSimulator/articles/conditionSystem.html","id":"other-examples","dir":"Articles","previous_headings":"","what":"Other examples","title":"Condition System for Triggering Milestones in a Trial","text":"","code":"## observe at least 200 OS events on at least 500 enrolled patients, or ## the trial has been running for at least 12 months (enrollment(n = 500) & eventNumber(endpoint = 'os', n = 200)) |    calendarTime(time = 12) #> Combined Condition (or): #> Combined Condition (and): #>     Number of randomized patients >=  500 #>     Number of events (os) >= 200 in all arms in a trial.  #> Calendar time >=  12  ## observe 320 OS or 480 PFS event when the trial has been running for 6 months calendarTime(time = 6) &    (eventNumber('os', n = 320) | eventNumber('pfs', n = 480)) #> Combined Condition (and): #> Calendar time >=  6  #> Combined Condition (or): #>     Number of events (os) >= 320 in all arms in a trial.  #>     Number of events (pfs) >= 480 in all arms in a trial."},{"path":"https://zhangh12.github.io/TrialSimulator/articles/defineArms.html","id":"define-arm-with-mulitple-sets-of-endpoints","dir":"Articles","previous_headings":"","what":"Define Arm with Mulitple Sets of Endpoints","title":"Define and Summarize Arms in Clinical Trials","text":"function endpoint can used define one multiple endpoints simultaneously. endpoints can independent correlated, depending generator provided. following hypothetical example, construct custom generator simulates PFS, OS, PSA levels baseline year 1. pre-specified correlation matrix ensures endpoints appropriately correlated. also ensure PFS always less equal OS. generator, Baseline PSA follows normal distribution mean 20 SD 4.0. one year treatment, average PSA level decreases 8. PFS OS exponentially distributed median times 2.5 4.5 years, respectively. constraint ensures PFS exceed OS. PSA readout times 0 (baseline) 1 (year 1). following code defines endpoints uses print method generate summary report based 10,000 samples generator rng. ⚕⚕ Endpoint Name: PSA_baseline, PSA_year1, OS, PFS ⚕⚕ # Endpoints: 4 can define another set endpoints using separate call endpoint(). However, keep mind endpoints defined separately assumed independent prior calls (.e. PSA_baseline, PSA_year1, PFS OS). following example, define biomarker, even though actually endpoint. practice, function endpoint useful introducing variables, including covariates, biomarkers, sub-group indicators, etc. Ideally, biomarker integrated generator rng capture meaningful correlation endpoints. ⚕⚕ Endpoint Name: biomarker ⚕⚕ # Endpoints: 1 now create treatment arm combining ep1 ep2. print method automatically summarizes marginal distributions endpoints. seen, summary report arm simply concatenates two reports ep1 ep2. ⚕⚕ Arm Name: treated ⚕⚕ # Endpoints: 5 ⚕⚕ Registered Endpoints: PSA_baseline, PSA_year1, OS, PFS, biomarker","code":"rng <- function(n, pfs_rate, os_rate, psa_mean, psa_sd, corr_matrix){      dist <- list()   dist[['PFS']] <- function(x) qexp(x, rate = pfs_rate)   dist[['OS']] <- function(x) qexp(x, rate = os_rate)   dist[['PSA_baseline']] <- function(x) qnorm(x, mean = psa_mean, sd = psa_sd)   dist[['PSA_year1']] <- function(x) qnorm(x, mean = psa_mean - 12, sd = psa_sd)   dsgn = simdata::simdesign_norta(cor_target_final = corr_matrix,                                  dist = dist,                                  transform_initial = data.frame,                                 names_final = names(dist),                                  seed_initial = 1)      simdata::simulate_data(dsgn, n_obs = n) %>%      mutate(PFS = pmin(PFS, OS)) %>%      mutate(PFS_event = 1, OS_event = 1)    } ep1 <- endpoint(name = c('PSA_baseline', 'PSA_year1', 'OS', 'PFS'),                  type = c('non-tte', 'non-tte', 'tte', 'tte'),                  readout = c(PSA_baseline = 0, PSA_year1 = 1),                  generator = rng,                  pfs_rate = log(2)/2.5, os_rate = log(2)/4.5,                  psa_mean = 20, psa_sd = 4,                  corr_matrix = matrix(c(1, .6, -.5, -.4,                                         .6, 1, -.4, -.3,                                         -.5, -.4, 1, .7,                                         -.4, -.3, .7, 1), nrow = 4))  ep1 ep2 <- endpoint(name = 'biomarker',                  type = 'non-tte',                  readout = c(biomarker = 0),                  generator = rbinom,                  size = 1, prob = .3) ep2 trt <- arm(name = 'treated') trt$add_endpoints(ep1, ep2) trt"},{"path":"https://zhangh12.github.io/TrialSimulator/articles/defineArms.html","id":"add-inclusion-criteria-for-the-arm","dir":"Articles","previous_headings":"","what":"Add Inclusion Criteria for the Arm","title":"Define and Summarize Arms in Clinical Trials","text":"can define inclusion criteria arm passing logical filter expressions via ... argument arm(). filters applied generated trial data. example, following code restricts enrollment patients Baseline PSA > 10 Positive PSA values year 1 summary report reflect effect inclusion criteria simulated population. ⚕⚕ Arm Name: treated ⚕⚕ # Endpoints: 5 ⚕⚕ Registered Endpoints: PSA_baseline, PSA_year1, OS, PFS, biomarker","code":"trt <- arm(name = 'treated', PSA_baseline > 10 & PSA_year1 > 0) trt$add_endpoints(ep1, ep2) trt"},{"path":"https://zhangh12.github.io/TrialSimulator/articles/defineArms.html","id":"simulate-data-explicitly-not-recommended","dir":"Articles","previous_headings":"","what":"Simulate Data Explicitly (Not Recommended)","title":"Define and Summarize Arms in Clinical Trials","text":"Although TrialSimulator allows direct data generation using generate_data() method, generally discouraged. One core principles TrialSimulator separate trial simulation logic data generation, allowing framework manage data generation truncation (/censoring) dynamically based trial milestones. Nevertheless, inspection debugging, one can call gives preview patient-level data generated treatment arm configuration (generator, inclusion filters). However, enrollment schedule dropout taken account, another reason strongly discourage way use TrialSimulator.","code":"## not recommended tmp <- trt$generate_data(100) head(tmp) #>         PFS         OS PSA_baseline PSA_year1 PFS_event OS_event #> 1 1.2410022  2.9010900     17.05084 7.4786703         1        1 #> 2 1.5231352  4.0614705     14.86082 6.7132135         1        1 #> 3 0.8116851  3.0751050     24.34986 9.0405846         1        1 #> 4 3.5868602 10.1470295     13.49077 0.2577257         1        1 #> 5 1.2952825  1.2952825     21.89733 8.6974747         1        1 #> 6 0.3332482  0.3332482     20.30860 7.4350724         1        1 #>   PSA_baseline_readout PSA_year1_readout biomarker biomarker_readout #> 1                    0                 1         0                 0 #> 2                    0                 1         0                 0 #> 3                    0                 1         1                 0 #> 4                    0                 1         1                 0 #> 5                    0                 1         0                 0 #> 6                    0                 1         0                 0"},{"path":"https://zhangh12.github.io/TrialSimulator/articles/defineLongitudinalEndpoints.html","id":"example-simulating-longitudinal-blood-pressure-endpoints","dir":"Articles","previous_headings":"","what":"Example: Simulating Longitudinal Blood Pressure Endpoints","title":"Define Longitudinal Endpoints in Clinical Trials","text":"Suppose blood pressure measured patient baseline (week 0), weeks 2 4 following randomization. interested changes baseline weeks 2 4. typical dataset milestone (e.g., enrollment follow-) can accessed calling trial$get_locked_data(milestone_name) may resemble following: example, variables baseline, bp_cfb2, bp_cfb4 observed weeks 0, 2, 4, respectively. Therefore, define readout = c(baseline = 0, bp_cfb2 = 2, bp_cfb4 = 4) endpoint definition. simulate correlated values across time points, assume baseline, bp2, bp4 follow multivariate normal distribution. user must provide mean vector covariance matrix variables. Importantly, custom generator function must accept n (number observations) first argument, required TrialSimulator, otherwise throws error. function assumes trivariate normal distribution blood pressure baseline, week 2, week 4. Users may also extend function support complex simulation logic needed.","code":"#> # A tibble: 6 × 3 #>   baseline bp_cfb2 bp_cfb4 #>      <dbl>   <dbl>   <dbl> #> 1     144.  -24.7    -21.0 #> 2     148.  -22.2    -42.5 #> 3     145.  -13.4    -30.4 #> 4     148.   -8.03   -31.2 #> 5     139.  -28.1    -24.4 #> 6     133.  -18.8    -18.3 library(mvtnorm) bp_generator <- function(n, bp_means, bp_vcov){   dat <- rmvnorm(n, mean = bp_means, sigma = bp_vcov) %>%      as.data.frame()   names(dat) <- c('baseline', 'bp2', 'bp4')   dat %>%      mutate(       bp_cfb2 = bp2 - baseline,        bp_cfb4 = bp4 - baseline     ) %>%      select(baseline, bp_cfb2, bp_cfb4) }"},{"path":"https://zhangh12.github.io/TrialSimulator/articles/defineLongitudinalEndpoints.html","id":"defining-endpoints-for-an-arm","dir":"Articles","previous_headings":"","what":"Defining Endpoints for an Arm","title":"Define Longitudinal Endpoints in Clinical Trials","text":"now use endpoint() function define longitudinal endpoints treatment arm. required parameters custom generator, bp_means bp_vcov, passed ellipsis (...) argument. Note deliberately specify name readout arguments order different data frame returned bp_generator, illustrate endpoint() function correctly maps variable names respective time points. However, user responsible ensuring order name type aligned; function automatically infer types generator output. example also demonstrates endpoint() can used generate covariates. instance, baseline value typically used covariate statistical models, therefore simulated retained. generally, users can define covariates, biomarker dynamics, subgroup indicators using mechanism simulate complex trial designs. simple way generate report endpoint object print console directly ⚕⚕ Endpoint Name: bp_cfb2, baseline, bp_cfb4 ⚕⚕ # Endpoints: 3","code":"vcov1 <- matrix(   c(2, 1.5, 1,      1.5, 3, 1.5,      1, 1.5, 4),   nrow = 3 )  ep_in_trt1 <- endpoint(   name = c('bp_cfb2', 'baseline', 'bp_cfb4'),    type = rep('non-tte', 3),    readout = c(baseline = 0, bp_cfb4 = 4, bp_cfb2 = 2),    generator = bp_generator,    bp_means = c(140, 125, 120),    bp_vcov = vcov1 ) ep_in_trt1"},{"path":"https://zhangh12.github.io/TrialSimulator/articles/defineLongitudinalEndpoints.html","id":"defining-endpoints-for-another-arm","dir":"Articles","previous_headings":"","what":"Defining Endpoints for Another Arm","title":"Define Longitudinal Endpoints in Clinical Trials","text":"now define another arm slightly different means correlation structure blood pressure: ⚕⚕ Endpoint Name: bp_cfb2, baseline, bp_cfb4 ⚕⚕ # Endpoints: 3 Note user can even specify different generators across arms. example, bp_generator can replaced another function different mechanism arguments.","code":"vcov2 <- matrix(   c(2, 1.5, 1,      1.5, 3, 1,      1, 1, 4),   nrow = 3 )  ep_in_trt2 <- endpoint(   name = c('bp_cfb2', 'baseline', 'bp_cfb4'),    type = rep('non-tte', 3),    readout = c(baseline = 0, bp_cfb4 = 4, bp_cfb2 = 2),    generator = bp_generator,    bp_means = c(140, 127, 122),    bp_vcov = vcov2 )  ep_in_trt2"},{"path":"https://zhangh12.github.io/TrialSimulator/articles/defineLongitudinalEndpoints.html","id":"creating-treatment-arms-and-adding-endpoints","dir":"Articles","previous_headings":"","what":"Creating Treatment Arms and Adding Endpoints","title":"Define Longitudinal Endpoints in Clinical Trials","text":"Finally, create two treatment arms attach respective endpoints: ⚕⚕ Arm Name: treatment 1 ⚕⚕ # Endpoints: 3 ⚕⚕ Registered Endpoints: bp_cfb2, baseline, bp_cfb4 ⚕⚕ Arm Name: treatment 2 ⚕⚕ # Endpoints: 3 ⚕⚕ Registered Endpoints: bp_cfb2, baseline, bp_cfb4","code":"trt1 <- arm(name = 'treatment 1') trt2 <- arm(name = 'treatment 2')  trt1$add_endpoints(ep_in_trt1) trt2$add_endpoints(ep_in_trt2)  trt1 trt2"},{"path":"https://zhangh12.github.io/TrialSimulator/articles/defineNonTimeToEventEndpoints.html","id":"define-endpoints-with-random-number-generators","dir":"Articles","previous_headings":"","what":"Define endpoints with random number generators","title":"Define Non-Time-to-Event Endpoints in Clinical Trials","text":"Similar time--event endpoints, non-TTE endpoints can defined using univariate random number generator takes n (number observations) first argument. stats package provides set random number generators can assigned generator endpoints, additional arguments required generator can passed .... creating non-TTE endpoints, argument type set \"non-tte\", argument readout specified named numeric vector, indicating time required endpoint available analysis patient enrollment. example , define two types endpoints: Continuous endpoint: Tumor size change baseline (cfb), available 6 months, assuming normal distribution (generator = rnorm) custom mean sd. Binary endpoint: Objective response rate (orr), available 2 months, assuming binomial distribution (generator = rbinom) size = 1 custom prob. treatment arms defined, can proceed create trial. Patients recruited piecewise constant rate, accrual pattern follows: First 6 months: 10 patients per month. 6 months: 20 patients per month 420 patients randomized 1:1 two arms. also specify dropout process Weibull distribution. dropout rates set follows: 15% dropout 12 months 30% dropout 18 months constraints resolved using Weibull dropout function: 0.15=1−e−(12/λ)k0.30=1−e−(18/λ)k \\begin{split} 0.15 & = & 1 - e^{-(12/\\lambda)^k} \\\\ 0.30 & = & 1 - e^{-(18/\\lambda)^k} \\end{split} Using computed scale parameter λ=\\lambda= 30.636 shape parameter k=k= 1.939, specify trial setup: accrual_rate argument TrialSimulator::StaggeredRecruiter controlling patients recruited trial. Similarly, scale shape arguments rweibull. arguments passed ... trial(). TrialSimulator allows defining trial milestones specific time points data locked analysis. , define three key milestones: Interim Analysis: Triggered orr observed 60 patients. cfb observed least 100 patients, orr observed least 180 patients. Final Analysis: Occurs trial reaches 30 months. action = doNothing milestone means don’t expect action time triggered milestones. practice, instead doNothing, custom action function can adopted add remove arms (e.g., dose selection), adjust sample ratio per arm, carry statistical analysis based locked data. advanced setups covered vignettes. Next, register milestones listener create controller monitor execute trial.  can inspect dataset locked different milestone calling member function get_locked_data milestone names. Ideally, done within custom action function, decision made based data locked time milestone. Since cfb 6-month readout time, interim analysis, patients’ cfb values still unavailable, appearing NA interim_data. However, values become available random_data collected later time point. demonstrates TrialSimulator properly automatically handles endpoint availability different milestones example, simulate tumor size change baseline (cfb). However, many trials, appropriate simulate tumor size baseline follow-separately allow complex modeling, longitudinal repeated measures analysis. covered another vignette. flexible setup, TrialSimulator enables efficient endpoint definition, adaptive trial execution, data monitoring—allowing users design simulate clinical trials tailored specific research needs.","code":"## endpoints in placebo arm tumor_cfb_pbo <- endpoint(name = 'cfb', type = 'non-tte',                            readout = c(cfb = 6),                           generator = rnorm, mean = .8, sd = 3.2) orr_pbo <- endpoint(name = 'orr', type = 'non-tte',                      readout = c(orr = 2),                     generator = rbinom, size = 1, prob = .1)  ## define the placebo arm pbo <- arm(name = 'placebo') pbo$add_endpoints(tumor_cfb_pbo, orr_pbo)  ## endpoints in treatment arm tumor_cfb_trt <- endpoint(name = 'cfb', type = 'non-tte',                            readout = c(cfb = 6),                            generator = rnorm, mean = -2.3, sd = 1.5) orr_trt <- endpoint(name = 'orr', type = 'non-tte',                      readout = c(orr = 2),                      generator = rbinom, size = 1, prob = .25)  ## define the treatment arm trt <- arm(name = 'treatment') trt$add_endpoints(tumor_cfb_trt, orr_trt) dropout_pars <- weibullDropout(c(12, 18), c(.15, .30)) dropout_pars #>     shape     scale  #>  1.938589 30.635696 accrual_rate <- data.frame(end_time = c(6, Inf),                             piecewise_rate = c(10, 20))  trial <- trial(   name = 'Trial-31415', description = 'Example Clinical Trial',    n_patients = 420, duration = 30,    enroller = StaggeredRecruiter, accrual_rate = accrual_rate,    dropout = rweibull, scale = 30.636, shape = 1.939 ) #> Seed is not specified. TrialSimulator sets it to 1012203595  ## add arms to the trial trial$add_arms(sample_ratio = c(1, 1), trt, pbo) #> Arm(s) <treatment, placebo> are added to the trial. #> Randomization is done for 420 potential patients. #> Data of 420 potential patients are generated for the trial with 2 arm(s) <treatment, placebo>. trial #>  ⚕⚕ Trial Name:  Trial-31415   #>  ⚕⚕ Description:  Example Clinical Trial   #>  ⚕⚕ # of Arms:  2   #>  ⚕⚕ Registered Arms:  treatment, placebo   #>  ⚕⚕ Sample Ratio:  1, 1   #>  ⚕⚕ # of Patients:  420   #>  ⚕⚕ Planned Duration:  30   #>  ⚕⚕ Random Seed:  1012203595 interim <- milestone(name = 'interim',                       when = eventNumber(endpoint = 'orr', n = 60),                       action = doNothing)  random <- milestone(name = 'random',                      when =                        calendarTime(time = 10) &                        (eventNumber(endpoint = 'cfb', n = 100) |                           eventNumber(endpoint = 'orr', n = 180)                        ),                      action = doNothing)  final <- milestone(name = 'final',                     when = calendarTime(time = 30),                     action = doNothing) ## register milestones to the listener listener <- listener() listener$add_milestones(interim, random, final) #> A milestone <interim> is registered. #> A milestone <random> is registered. #> A milestone <final> is registered.  ## run the trial controller <- controller(trial, listener) controller$run() #> Condition of milestone <interim> is being checked. #> Data is locked at time = 8.05 for milestone <interim>. #> Locked data can be accessed in Trial$get_locked_data('interim').  #> Number of events at lock time: #>   patient cfb orr         arms #> 1     102  18  60 c(51, 10.... #>  #> Condition of milestone <random> is being checked. #> Data is locked at time = 14.8 for milestone <random>. #> Locked data can be accessed in Trial$get_locked_data('random').  #> Number of events at lock time: #>   patient cfb orr         arms #> 1     237 100 178 c(118, 4.... #>  #> Condition of milestone <final> is being checked. #> Data is locked at time = 30 for milestone <final>. #> Locked data can be accessed in Trial$get_locked_data('final').  #> Number of events at lock time: #>   patient cfb orr         arms #> 1     420 282 327 c(210, 1.... #> interim_data <- trial$get_locked_data(milestone_name = 'interim') random_data <- trial$get_locked_data(milestone_name = 'random') final_data <- trial$get_locked_data(milestone_name = 'final') head(interim_data) #>   patient_id       arm enroll_time dropout_time       cfb cfb_readout orr #> 1          1 treatment         0.0    21.180883 -4.434289           6   0 #> 2          2   placebo         0.1     2.977640        NA           6   0 #> 3          3   placebo         0.2    28.175451 -1.657398           6   1 #> 4          4 treatment         0.3    27.254577  1.004898           6   0 #> 5          5 treatment         0.4     5.663727        NA           6   0 #> 6          6   placebo         0.5    27.379476  6.093597           6   0 #>   orr_readout #> 1           2 #> 2           2 #> 3           2 #> 4           2 #> 5           2 #> 6           2 not_ready_at_interim <-    interim_data %>%    dplyr::filter(is.na(cfb) &                    is.na(orr) &                    enroll_time + 6 < dropout_time) %>%    head() %>%    print() #>   patient_id       arm enroll_time dropout_time cfb cfb_readout orr orr_readout #> 1         63 treatment        6.10     23.76025  NA           6  NA           2 #> 2         64   placebo        6.15     29.50080  NA           6  NA           2 #> 3         66   placebo        6.25     26.44169  NA           6  NA           2 #> 4         67   placebo        6.30     25.48133  NA           6  NA           2 #> 5         69   placebo        6.40     84.56996  NA           6  NA           2 #> 6         70 treatment        6.45     31.77506  NA           6  NA           2  random_data %>%    dplyr::filter(patient_id %in% not_ready_at_interim$patient_id) %>%    print() #>   patient_id       arm enroll_time dropout_time        cfb cfb_readout orr #> 1         63 treatment        6.10     23.76025 -4.8136091           6   0 #> 2         64   placebo        6.15     29.50080  1.5471692           6   0 #> 3         66   placebo        6.25     26.44169 -3.1648153           6   0 #> 4         67   placebo        6.30     25.48133 -3.9319150           6   0 #> 5         69   placebo        6.40     84.56996  1.1369365           6   0 #> 6         70 treatment        6.45     31.77506 -0.7169747           6   0 #>   orr_readout #> 1           2 #> 2           2 #> 3           2 #> 4           2 #> 5           2 #> 6           2"},{"path":"https://zhangh12.github.io/TrialSimulator/articles/defineTimeToEventEndpoints.html","id":"define-a-univariate-endpoint-with-random-number-generators-from-stats","dir":"Articles","previous_headings":"","what":"Define a univariate endpoint with random number generators from stats","title":"Define Time-to-Event Endpoints in Clinical Trials","text":"define time--event endpoint progression-free survival (PFS) following exponential distribution, need specify name type. specification crucial TrialSimulator ensures arms set endpoints manages endpoint data based type. example, endpoints type \"tte\" (time--event) automatically receive additional column (name)_event indicate censoring status. Arguments generator function (case, rate) passed .... can verify generator works expected requesting example dataset: Note data returned test_generator validation purposes. actual trial simulation, TrialSimulator determines call generator many samples draw. request access data locked milestone, can use member function get_locked_data Trials object introduced vignette Example Simulating Trial Adaptive Design. can get summary report printing endpoint object ⚕⚕ Endpoint Name: PFS ⚕⚕ # Endpoints: 1 Similarly, can define PFS endpoint treatment arm: Now can define placebo treatment arms adding PFS endpoints: cover create trial object based arms pbo trt another vignette.","code":"pfs_pbo <- endpoint(name = 'PFS', type = 'tte',                      generator = rexp, rate = log(2)/5.6) test_set <- pfs_pbo$test_generator(n = 1e5) head(test_set) #>          PFS PFS_event #> 1  6.5316820         1 #> 2  0.1490485         1 #> 3  3.6793035         1 #> 4  0.1933984         1 #> 5 51.7238773         1 #> 6 10.1631791         1 median(test_set$PFS) ## should be close to 5.6 #> [1] 5.592334 pfs_pbo pfs_trt <- endpoint(name = 'PFS', type = 'tte',                      generator = rexp, rate = log(2)/6.4) median(pfs_trt$test_generator(n = 1e5)$PFS) ## should be close to 6.4 #> [1] 6.444728 pbo <- arm(name = 'placebo') pbo$add_endpoints(pfs_pbo) trt <- arm(name = 'treatment') trt$add_endpoints(pfs_trt)"},{"path":"https://zhangh12.github.io/TrialSimulator/articles/defineTimeToEventEndpoints.html","id":"define-a-univariate-endpoint-with-custom-random-number-generators","dir":"Articles","previous_headings":"","what":"Define a univariate endpoint with custom random number generators","title":"Define Time-to-Event Endpoints in Clinical Trials","text":"endpoints accepts custom random number generators univariate random variables, long generator’s first argument n (number observations). Additional arguments can passed ... endpoints. TrialSimulator provides built-custom generator, PiecewiseConstantExponentialRNG, generate time--event endpoints piecewise constant exponential distributions. particularly useful simulating lagged delayed treatment effects. example demonstrates scenario treatment effect begins week 2:  example, PiecewiseConstantExponentialRNG adds column PFS_event specified endpoint_name = 'PFS'. patients PFS censored (PFS_event = 0). default, custom generator supplied event column provided time--event endpoint, TrialSimulator add one set values 1 (censoring). add endpoint arm,","code":"risk_pbo <- data.frame(   end_time = c(2, 8, 10),    piecewise_risk = c(1, 0.48, 0.25) * exp(-1) )  pfs_pbo <- endpoint(name = 'PFS', type = 'tte',                      generator = PiecewiseConstantExponentialRNG,                      risk = risk_pbo,                      endpoint_name = 'PFS') risk_trt <- risk_pbo %>%    mutate(hazard_ratio = c(1, .6, .7))  pfs_trt <- endpoint(name = 'PFS', type = 'tte',                      generator = PiecewiseConstantExponentialRNG,                      risk = risk_trt,                      endpoint_name = 'PFS')  test_set <- rbind(pfs_pbo$test_generator(n = 1e4) %>% mutate(arm = 'pbo'),                    pfs_trt$test_generator(n = 1e4) %>% mutate(arm = 'trt'))  sfit <- survfit(Surv(time = PFS, event = PFS_event) ~ arm, test_set) ggsurvplot(sfit, data = test_set, palette = c(\"blue\", \"red\")) head(test_set %>% slice_sample(prop = 1)) #>          PFS PFS_event arm #> 1 10.0000000         0 trt #> 2  4.5502723         1 trt #> 3  3.9635839         1 pbo #> 4  0.9192734         1 trt #> 5  3.8969154         1 pbo #> 6 10.0000000         0 pbo pbo <- arm(name = 'placebo') pbo$add_endpoints(pfs_pbo)  trt <- arm(name = 'treatment') trt$add_endpoints(pfs_trt)"},{"path":"https://zhangh12.github.io/TrialSimulator/articles/defineTimeToEventEndpoints.html","id":"define-multiple-endpoints","dir":"Articles","previous_headings":"","what":"Define multiple endpoints","title":"Define Time-to-Event Endpoints in Clinical Trials","text":"can define one endpoint trial. Let’s add overall survival (OS) second endpoint. ’ll assume median overall survival 7.2 months placebo arm 8.5 months treatment arm. Note defining PFS OS separately (.e., calling endpoints endpoint), implicitly assuming endpoints independent trial.","code":"os_pbo <- endpoint(name = 'OS', type = 'tte',                     generator = rexp, rate = log(2)/7.2) os_trt <- endpoint(name = 'OS', type = 'tte',                     generator = rexp, rate = log(2)/8.5)  median(os_pbo$test_generator(n = 1e5)$OS) ## should be close to 7.2 #> [1] 7.170061 median(os_trt$test_generator(n = 1e5)$OS) ## should be close to 8.5 #> [1] 8.547774  ## add endpoint to existing arms pbo$add_endpoints(os_pbo) trt$add_endpoints(os_trt)"},{"path":"https://zhangh12.github.io/TrialSimulator/articles/defineTimeToEventEndpoints.html","id":"an-example-of-a-custom-random-number-generator-for-correlated-endpoints","dir":"Articles","previous_headings":"","what":"An example of a custom random number generator for correlated endpoints","title":"Define Time-to-Event Endpoints in Clinical Trials","text":"define multiple correlated endpoints, need create custom generator. example, define one based R package simdata: Note custom generator, need add columns event indicator time--event endpoints. Instead use test_generator, simpler way summarize endpoint object print directly. example, two endpoints placebo arm ⚕⚕ Endpoint Name: PFS, OS ⚕⚕ # Endpoints: 2 two endpoints treatment arm ⚕⚕ Endpoint Name: OS, PFS ⚕⚕ # Endpoints: 2 define arms correlated endpoints, simply following:","code":"custom_generator <- function(n, pfs_rate, os_rate, corr){      dist <- list()   dist[['PFS']] <- function(x) qexp(x, rate = pfs_rate)   dist[['OS']] <- function(x) qexp(x, rate = os_rate)   dsgn = simdata::simdesign_norta(cor_target_final = corr,                                  dist = dist,                                  transform_initial = data.frame,                                 names_final = names(dist),                                  seed_initial = 1)      simdata::simulate_data(dsgn, n_obs = n) %>%      mutate(PFS_event = 1, OS_event = 1) ## event indicators } corr <- matrix(c(1, .6, .6, 1), nrow = 2) eps_pbo <- endpoint(name = c('PFS', 'OS'), type = c('tte', 'tte'),                      generator = custom_generator,                      pfs_rate = log(2)/5.6, os_rate = log(2)/7.2,                      corr = corr)  eps_trt <- endpoint(name = c('OS', 'PFS'), type = c('tte', 'tte'),                      generator = custom_generator,                      pfs_rate = log(2)/6.4, os_rate = log(2)/8.5,                      corr = corr)  test_set <- rbind(eps_pbo$test_generator(n = 1e5) %>% mutate(arm = 'pbo'),                    eps_trt$test_generator(n = 1e5) %>% mutate(arm = 'trt'))  with(test_set, cor(PFS, OS)) ## should be close to 0.6 #> [1] 0.5992274  ## sample medians match to the parameters well test_set %>%    group_by(arm) %>%    summarise(PFS = median(PFS), OS = median(OS)) #> # A tibble: 2 × 3 #>   arm     PFS    OS #>   <chr> <dbl> <dbl> #> 1 pbo    5.58  7.21 #> 2 trt    6.38  8.51 eps_pbo eps_trt pbo <- arm(name = 'placebo') pbo$add_endpoints(eps_pbo)  trt <- arm(name = 'treatment') trt$add_endpoints(eps_trt)"},{"path":"https://zhangh12.github.io/TrialSimulator/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Han Zhang. Maintainer, author.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhang H (2025). TrialSimulator: Clinical Trial Simulator. R package version 0.90.0, https://zhangh12.github.io/TrialSimulator/.","code":"@Manual{,   title = {TrialSimulator: Clinical Trial Simulator},   author = {Han Zhang},   year = {2025},   note = {R package version 0.90.0},   url = {https://zhangh12.github.io/TrialSimulator/}, }"},{"path":"https://zhangh12.github.io/TrialSimulator/index.html","id":"trialsimulator-","dir":"","previous_headings":"","what":"Clinical Trial Simulator","title":"Clinical Trial Simulator","text":"⚕ loop clinical trial simulation ⚕ goal TrialSimulator provide pipeline implementing simulation clinical trial efficiently reliably. follows principle modularity isolate codes statistical testing data generation management. provides set tools sample endpoints common custom distributions, manage trial data, summarize simulation results fixed adaptive designs. also provides functions group sequential design, graphical testing procedure, combination test, closed test widely used analyzing complex trial designs.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/index.html","id":"shiny-app","dir":"","previous_headings":"","what":"Shiny App","title":"Clinical Trial Simulator","text":"online version app hosted shinyapps.io.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/index.html","id":"validation","dir":"","previous_headings":"","what":"Validation","title":"Clinical Trial Simulator","text":"validation documents R package hosted continuously updated.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Clinical Trial Simulator","text":"can install development version TrialSimulator GitHub :","code":"if (!require(\"remotes\")) {   install.packages(\"remotes\") } remotes::install_github(   \"zhangh12/TrialSimulator\",    build_manual = TRUE,    build_vignettes = TRUE,    force = TRUE )"},{"path":"https://zhangh12.github.io/TrialSimulator/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Clinical Trial Simulator","text":"TrialSimulator designed modular architecture, allowing users systematically construct simulate clinical trials structured flexible manner. simulation process broken three key steps: Defining Endpoints: Specify treatment endpoints evaluated throughout trial. Specifying Milestone: Establish conditions specific milestones (e.g., interim analysis, futility assessment, stopping rules) triggered. Defining Actions Milestones: Determine appropriate actions taken milestone triggered, adjusting enrollment, terminating treatment arms, conducting statistical analysis. efficiently utilize TrialSimulator clinical trial simulations, recommend reading following vignettes order: Time--event (TTE) endpoints Non-TTE endpoints Longitudinal endpoints Define summarize arms Triggering trial milestones [Action function] [Fixed design] Design dose selection, interim, multiple endpoints [logrank test] [Cox proportional hazard model] [Linear regression model] [Logistic regression model] [Group sequential test] [Graphical testing procedure] [Combination test based independent increment]","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":null,"dir":"Reference","previous_headings":"","what":"Class of Arm — Arms","title":"Class of Arm — Arms","text":"Create class arm.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class of Arm — Arms","text":"Arms$new() Arms$add_endpoints() Arms$get_name() Arms$get_number_endpoints() Arms$has_endpoint() Arms$get_endpoints() Arms$get_endpoints_name() Arms$generate_data() Arms$print() Arms$clone()","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class of Arm — Arms","text":"initialize arm","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Arm — Arms","text":"","code":"Arms$new(name, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Arm — Arms","text":"name name arm, arm's label generated data ... subset condition compatible dplyr::filter. can used specify inclusion criteria arm. default specified, .e. data generated generator specified ....","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"method-add-endpoints-","dir":"Reference","previous_headings":"","what":"Method add_endpoints()","title":"Class of Arm — Arms","text":"add list endpoints arm","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Arm — Arms","text":"","code":"Arms$add_endpoints(...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Arm — Arms","text":"... one objects class Endpoint","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"method-get-name-","dir":"Reference","previous_headings":"","what":"Method get_name()","title":"Class of Arm — Arms","text":"return name arm","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Arm — Arms","text":"","code":"Arms$get_name()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"method-get-number-endpoints-","dir":"Reference","previous_headings":"","what":"Method get_number_endpoints()","title":"Class of Arm — Arms","text":"return number endpoints arm","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Arm — Arms","text":"","code":"Arms$get_number_endpoints()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"method-has-endpoint-","dir":"Reference","previous_headings":"","what":"Method has_endpoint()","title":"Class of Arm — Arms","text":"check arm endpoint. Return TRUE FALSE.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Arm — Arms","text":"","code":"Arms$has_endpoint()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"method-get-endpoints-","dir":"Reference","previous_headings":"","what":"Method get_endpoints()","title":"Class of Arm — Arms","text":"return list endpoints arm","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Arm — Arms","text":"","code":"Arms$get_endpoints()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"method-get-endpoints-name-","dir":"Reference","previous_headings":"","what":"Method get_endpoints_name()","title":"Class of Arm — Arms","text":"return name endpoints registered arm","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Arm — Arms","text":"","code":"Arms$get_endpoints_name()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"method-generate-data-","dir":"Reference","previous_headings":"","what":"Method generate_data()","title":"Class of Arm — Arms","text":"generate arm data","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Arm — Arms","text":"","code":"Arms$generate_data(n_patients_in_arm)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Arm — Arms","text":"n_patients_in_arm integer. Number patients randomized arm","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Class of Arm — Arms","text":"print arm","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Arm — Arms","text":"","code":"Arms$print(categorical_vars = NULL)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Arm — Arms","text":"categorical_vars categorical_vars character. Vector categorical variables. can used specify variables limited distinct values categorical variables summary.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class of Arm — Arms","text":"objects class cloneable method.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Arm — Arms","text":"","code":"Arms$clone(deep = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Arm — Arms","text":"deep Whether make deep clone.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of Arm — Arms","text":"","code":"# Instead of using Arm$new, please use arm(), a user-friendly # wrapper. See examples in ?arm"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controllers.html","id":null,"dir":"Reference","previous_headings":"","what":"Class of Controller — Controllers","title":"Class of Controller — Controllers","text":"Create class controller run trial.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controllers.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class of Controller — Controllers","text":"Controllers$new() Controllers$get_listener() Controllers$get_trial() Controllers$mute() Controllers$reset() Controllers$get_output() Controllers$run() Controllers$clone()","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controllers.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class of Controller — Controllers","text":"initialize controller trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controllers.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Controller — Controllers","text":"","code":"Controllers$new(trial, listener)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controllers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Controller — Controllers","text":"trial Trials object. listener Listeners object.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controllers.html","id":"method-get-listener-","dir":"Reference","previous_headings":"","what":"Method get_listener()","title":"Class of Controller — Controllers","text":"return listener","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controllers.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Controller — Controllers","text":"","code":"Controllers$get_listener()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controllers.html","id":"method-get-trial-","dir":"Reference","previous_headings":"","what":"Method get_trial()","title":"Class of Controller — Controllers","text":"return trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controllers.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Controller — Controllers","text":"","code":"Controllers$get_trial()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controllers.html","id":"method-mute-","dir":"Reference","previous_headings":"","what":"Method mute()","title":"Class of Controller — Controllers","text":"mute messages (including warnings)","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controllers.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Controller — Controllers","text":"","code":"Controllers$mute()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controllers.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Controller — Controllers","text":"silent logical.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controllers.html","id":"method-reset-","dir":"Reference","previous_headings":"","what":"Method reset()","title":"Class of Controller — Controllers","text":"reset trial listener registered controller running additional replicate simulation.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controllers.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Controller — Controllers","text":"","code":"Controllers$reset()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controllers.html","id":"method-get-output-","dir":"Reference","previous_headings":"","what":"Method get_output()","title":"Class of Controller — Controllers","text":"return data frame current outputs saved calling save.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controllers.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Controller — Controllers","text":"","code":"Controllers$get_output(cols = NULL, simplify = TRUE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controllers.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Controller — Controllers","text":"cols columns returned Controller$output. NULL, columns returned. simplify logical. Return value rather data frame one column length(col) == 1 simplify == TRUE.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controllers.html","id":"method-run-","dir":"Reference","previous_headings":"","what":"Method run()","title":"Class of Controller — Controllers","text":"run trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controllers.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Controller — Controllers","text":"","code":"Controllers$run(n = 1, plot_event = TRUE, silent = FALSE, dry_run = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controllers.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Controller — Controllers","text":"n number replicates simulation. n = 1 default. Simulation results can accessed Controller$get_output(). plot_event create event plot silent logical. TRUE muting messages trial. Note warning messages still displayed. dry_run TRUE action function provided users ignored built-default action default_action called instead. default function locks data milestone triggered. Milestone time number endpoints' events sample sizes saved. suggested set dry_run = TRUE estimate distributions triggering time number events formally using custom action functions fixed design use. helps determining planned maximum information group sequential design reasonable time milestone interest planning trial. Set FALSE formal simulations. However, adaptive design arm(s) possibly added removed, setting dry_run TRUE usually helpful adaption actually applied estimate milestone time.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controllers.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class of Controller — Controllers","text":"objects class cloneable method.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controllers.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Controller — Controllers","text":"","code":"Controllers$clone(deep = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controllers.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Controller — Controllers","text":"deep Whether make deep clone.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controllers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of Controller — Controllers","text":"","code":"##"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/CorrelatedPfsAndOs3.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate PFS and OS using the three-states model — CorrelatedPfsAndOs3","title":"Generate PFS and OS using the three-states model — CorrelatedPfsAndOs3","text":"Generate PFS OS using three-states model","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/CorrelatedPfsAndOs3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate PFS and OS using the three-states model — CorrelatedPfsAndOs3","text":"","code":"CorrelatedPfsAndOs3(n, h01, h02, h12, pfs_name = \"pfs\", os_name = \"os\")"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/CorrelatedPfsAndOs3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate PFS and OS using the three-states model — CorrelatedPfsAndOs3","text":"n integer. Number observations. h01 constant transition hazard state \"stable\" state \"progression\". h02 constant transition hazard state \"stable\" state \"death\". h12 constant transition hazard state \"progression\" state \"death\". pfs_name column name PFS returned data frame. must consistent `name` function `endpoint()`. os_name column name OS returned data frame. must consistent `name` function `endpoint()`.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/CorrelatedPfsAndOs3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate PFS and OS using the three-states model — CorrelatedPfsAndOs3","text":"data frame four columns, including PFS, OS event indicators. event indicators 1s.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/CorrelatedPfsAndOs3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate PFS and OS using the three-states model — CorrelatedPfsAndOs3","text":"","code":"pfs_and_os_trt <- CorrelatedPfsAndOs3(1e4, 0.06, 0.30, 0.30, 'PFS', 'OS') pfs_and_os_pbo <- CorrelatedPfsAndOs3(1e4, 0.10, 0.40, 0.30, 'PFS', 'OS')"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/CorrelatedPfsAndOs4.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate PFS, OS and objective response using the four-states model — CorrelatedPfsAndOs4","title":"Generate PFS, OS and objective response using the four-states model — CorrelatedPfsAndOs4","text":"Generate PFS, OS objective response using four-states model","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/CorrelatedPfsAndOs4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate PFS, OS and objective response using the four-states model — CorrelatedPfsAndOs4","text":"","code":"CorrelatedPfsAndOs4(   n,   transition_probability,   duration,   death_name = \"death\",   progression_name = \"progression\",   response_name = \"response\" )"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/CorrelatedPfsAndOs4.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate PFS, OS and objective response using the four-states model — CorrelatedPfsAndOs4","text":"n integer. Number observations. transition_probability 4x4 matrix defining transition probabilities stable (initial state, 1), response (2), progression (3) death (absorbing, 4). duration integer. Duration trial. Set sufficient large integer practice cover duration trial (potentially extended). death_name column name OS returned data frame. must consistent `name` function `endpoint()`. progression_name column name PFS returned data frame. must consistent `name` function `endpoint()`. response_name column name objective response returned data frame. must consistent `name` function `endpoint()`.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/CorrelatedPfsAndOs4.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate PFS, OS and objective response using the four-states model — CorrelatedPfsAndOs4","text":"data frame n rows 6 columns (response, progression, death, event indicators response_event, progression_event, death_event 1 means event 0 means censored duration).","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/CorrelatedPfsAndOs4.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate PFS, OS and objective response using the four-states model — CorrelatedPfsAndOs4","text":"","code":"m <- matrix(c(0.99, 0.0035, 0.0055, 0.0010,                  0, 0.9900, 0.0052, 0.0048,                  0,      0, 0.9960, 0.0040,                  0,      0,      0,      1),              nrow = 4, byrow = TRUE)  pfs_and_os <- CorrelatedPfsAndOs4(1e4, m, 365 * 3)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/DynamicRNGFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper of random number generator. — DynamicRNGFunction","title":"A wrapper of random number generator. — DynamicRNGFunction","text":"wrapper random number generator.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/DynamicRNGFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper of random number generator. — DynamicRNGFunction","text":"","code":"DynamicRNGFunction(fn, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/DynamicRNGFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper of random number generator. — DynamicRNGFunction","text":"fn random number generator, e.g., rnorm, rchisq, etc. can user-defined random number generator well, e.g., PiecewiseConstantExponentialRNG ... arguments fn. Specifying invalid arguments can trigger error stopped. three exceptions. (1) rng can passed `...` give true name fn. necessary may hard parse accurately DynamicRNGFunction, simply informative purpose scenarios. (2) var_name can passed `...` specify name generated variable. (3) simplify can set FALSE convert vector one-column data frame returned object. happens built-random number generators, e.g., rnorm, rbinom, etc. three arguments passed fn.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/DynamicRNGFunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper of random number generator. — DynamicRNGFunction","text":"function generate random number based `fn` arguments `...`. Specified arguments fixed changed invoking `DynamicRNGFunction(fn, ...)()`. example, `foo <- DynamicRNGFunction(rnorm, sd = 2)`, `foo(n = 100)` always generate data normal distribution variance 4. `foo(n = 100, sd = 1)` trigger error. However, argument specified `DynamicRNGFunction`, can specified later. example, `foo(n = 100, mean = -1)` generate data N(-1, 4).","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/DynamicRNGFunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A wrapper of random number generator. — DynamicRNGFunction","text":"","code":"# example code dfunc <- DynamicRNGFunction(rnorm, sd = 3.2) x <- dfunc(1e3) hist(x)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Class of Endpoint — Endpoints","title":"Class of Endpoint — Endpoints","text":"Create class endpoint specify name, type assign random number generator.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class of Endpoint — Endpoints","text":"Endpoints$new() Endpoints$test_generator() Endpoints$get_generator() Endpoints$get_readout() Endpoints$get_uid() Endpoints$get_name() Endpoints$get_type() Endpoints$print() Endpoints$clone()","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class of Endpoint — Endpoints","text":"initialize endpoint","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Endpoint — Endpoints","text":"","code":"Endpoints$new(name, type = c(\"tte\", \"non-tte\"), readout = NULL, generator, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Endpoint — Endpoints","text":"name character vector. Name(s) endpoint(s) type character vector. Type(s) endpoint(s). supports \"tte\" time--event endpoints, \"non-tte\" types endpoints (e.g., continous, binary, categorical, repeated measurement. TrialSimulator verification endpoint type \"tte\". However, special manipulation done non-tte endpoints. readout numeric vector name non-tte endpoint(s). readout specified every non-tte endpoint. example, c(endpoint1 = 6, endpoint2 = 3).  endpoints tte, readout can NULL. generator RNG function. first argument must `n`, number patients. must return data frame `n` rows. support built-random number generators stats, e.g., stats::rnorm, stats::rexp, etc. n argument number observations. generator custom functions long (1) first argument n; (2) returns vector length n data frame n rows. Custom random number generator can return data one endpoint. useful users need simulate correlated endpoints. column names returned data frame match name exactly. endpoint type \"tte\", custom generator also return column event indicator. example, \"pfs\" \"tte\", custom generator return least two columns \"pfs\" \"pfs_event\". Usually pfs_event can 1s censoring. Censoring can specified later defining Trial argument dropout. See ?Trial. Note covariates, e.g., biomarker, subgroup, needed generating analyzing trial data, can defined Endpoint well. ... optional arguments generator.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":"method-test-generator-","dir":"Reference","previous_headings":"","what":"Method test_generator()","title":"Class of Endpoint — Endpoints","text":"test random number generator endpoints. returns example dataset.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Endpoint — Endpoints","text":"","code":"Endpoints$test_generator(n = 1000)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Endpoint — Endpoints","text":"n integer. Number random numbers generated generator.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":"method-get-generator-","dir":"Reference","previous_headings":"","what":"Method get_generator()","title":"Class of Endpoint — Endpoints","text":"return random number generator endpoint","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Endpoint — Endpoints","text":"","code":"Endpoints$get_generator()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":"method-get-readout-","dir":"Reference","previous_headings":"","what":"Method get_readout()","title":"Class of Endpoint — Endpoints","text":"return readout function","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Endpoint — Endpoints","text":"","code":"Endpoints$get_readout()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":"method-get-uid-","dir":"Reference","previous_headings":"","what":"Method get_uid()","title":"Class of Endpoint — Endpoints","text":"return uid","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Endpoint — Endpoints","text":"","code":"Endpoints$get_uid()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":"method-get-name-","dir":"Reference","previous_headings":"","what":"Method get_name()","title":"Class of Endpoint — Endpoints","text":"return endpoints' name","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Endpoint — Endpoints","text":"","code":"Endpoints$get_name()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":"method-get-type-","dir":"Reference","previous_headings":"","what":"Method get_type()","title":"Class of Endpoint — Endpoints","text":"return endpoints' type","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Endpoint — Endpoints","text":"","code":"Endpoints$get_type()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Class of Endpoint — Endpoints","text":"print endpoint object","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Endpoint — Endpoints","text":"","code":"Endpoints$print(categorical_vars = NULL)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Endpoint — Endpoints","text":"categorical_vars categorical_vars character. Vector categorical variables. can used specify variables limited distinct values categorical variables summary.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class of Endpoint — Endpoints","text":"objects class cloneable method.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Endpoint — Endpoints","text":"","code":"Endpoints$clone(deep = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Endpoint — Endpoints","text":"deep Whether make deep clone.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of Endpoint — Endpoints","text":"","code":"# Instead of using Endpoint$new, please use endpoint(), a user-friendly # wrapper. See examples in ?endpoint."},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":null,"dir":"Reference","previous_headings":"","what":"Class of GraphicalTesting — GraphicalTesting","title":"Class of GraphicalTesting — GraphicalTesting","text":"Perform graphical testing group sequential design one multiple endpoints. See Maurer & Bretz (2013).","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class of GraphicalTesting — GraphicalTesting","text":"GraphicalTesting$new() GraphicalTesting$reset() GraphicalTesting$is_valid_hid() GraphicalTesting$get_hypothesis_name() GraphicalTesting$get_weight() GraphicalTesting$set_weight() GraphicalTesting$get_alpha() GraphicalTesting$set_alpha() GraphicalTesting$get_hypotheses_ids() GraphicalTesting$get_number_hypotheses() GraphicalTesting$get_hids_not_in_graph() GraphicalTesting$get_testable_hypotheses() GraphicalTesting$has_testable_hypotheses() GraphicalTesting$is_in_graph() GraphicalTesting$is_testable() GraphicalTesting$get_hid() GraphicalTesting$reject_a_hypothesis() GraphicalTesting$set_trajectory() GraphicalTesting$get_trajectory() GraphicalTesting$test_hypotheses() GraphicalTesting$test() GraphicalTesting$get_current_testing_results() GraphicalTesting$get_current_decision() GraphicalTesting$print() GraphicalTesting$clone()","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class of GraphicalTesting — GraphicalTesting","text":"Initialize object graphical testing procedure. Group sequential design also supported.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$new(   alpha,   transition,   alpha_spending,   planned_max_info,   hypotheses = NULL,   silent = FALSE )"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"alpha initial alpha allocated hypotheses. transition matrix transition weights. diagonals 0s. row sums 1s (better power) 0s (outbound edge node). alpha_spending character vector length alpha. Currently supports 'asP', 'asOF', 'asUser'. planned_max_info vector integers. Maximum numbers events (tte endpoints) patients (non-tte endpoints) final analysis hypothesis planning trial. actual numbers different, can specified elsewhere. hypotheses vector characters. Names hypotheses. silent TRUE muting messages generating plots.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-reset-","dir":"Reference","previous_headings":"","what":"Method reset()","title":"Class of GraphicalTesting — GraphicalTesting","text":"reset object class GraphicalTesting original status can reused.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$reset()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-is-valid-hid-","dir":"Reference","previous_headings":"","what":"Method is_valid_hid()","title":"Class of GraphicalTesting — GraphicalTesting","text":"determine index hypothesis valid","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$is_valid_hid(hid)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"hid integer","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-get-hypothesis-name-","dir":"Reference","previous_headings":"","what":"Method get_hypothesis_name()","title":"Class of GraphicalTesting — GraphicalTesting","text":"get name hypothesis given index.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$get_hypothesis_name(hid)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"hid integer","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-get-weight-","dir":"Reference","previous_headings":"","what":"Method get_weight()","title":"Class of GraphicalTesting — GraphicalTesting","text":"return weight two nodes","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$get_weight(hid1, hid2)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"hid1 integer hid2 integer","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-set-weight-","dir":"Reference","previous_headings":"","what":"Method set_weight()","title":"Class of GraphicalTesting — GraphicalTesting","text":"update weight two nodes","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$set_weight(hid1, hid2, value)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"hid1 integer hid2 integer value numeric value set weight two nodes","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-get-alpha-","dir":"Reference","previous_headings":"","what":"Method get_alpha()","title":"Class of GraphicalTesting — GraphicalTesting","text":"return alpha allocated hypothesis calling function. Note function can called several time graph updated dynamically. Thus, returned alpha can different even hid.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$get_alpha(hid)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"hid integer","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-set-alpha-","dir":"Reference","previous_headings":"","what":"Method set_alpha()","title":"Class of GraphicalTesting — GraphicalTesting","text":"update alpha hypothesis","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$set_alpha(hid, value)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"hid integer. Index hypothesis value numeric value allocated","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-get-hypotheses-ids-","dir":"Reference","previous_headings":"","what":"Method get_hypotheses_ids()","title":"Class of GraphicalTesting — GraphicalTesting","text":"return valid hid","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$get_hypotheses_ids()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-get-number-hypotheses-","dir":"Reference","previous_headings":"","what":"Method get_number_hypotheses()","title":"Class of GraphicalTesting — GraphicalTesting","text":"return number hypotheses, including rejected.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$get_number_hypotheses()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-get-hids-not-in-graph-","dir":"Reference","previous_headings":"","what":"Method get_hids_not_in_graph()","title":"Class of GraphicalTesting — GraphicalTesting","text":"return index hypotheses rejected.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$get_hids_not_in_graph()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-get-testable-hypotheses-","dir":"Reference","previous_headings":"","what":"Method get_testable_hypotheses()","title":"Class of GraphicalTesting — GraphicalTesting","text":"return index hypotheses non-zero alphas, thus can tested current stage.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$get_testable_hypotheses()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-has-testable-hypotheses-","dir":"Reference","previous_headings":"","what":"Method has_testable_hypotheses()","title":"Class of GraphicalTesting — GraphicalTesting","text":"determine whether least one hypothesis testable. return FALSE, testing procedure completed.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$has_testable_hypotheses()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-is-in-graph-","dir":"Reference","previous_headings":"","what":"Method is_in_graph()","title":"Class of GraphicalTesting — GraphicalTesting","text":"determine whether hypothesis yet rejected (graph).","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$is_in_graph(hid)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"hid integer. Index hypothesis","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-is-testable-","dir":"Reference","previous_headings":"","what":"Method is_testable()","title":"Class of GraphicalTesting — GraphicalTesting","text":"determine whether hypothesis non-zero alpha allocated.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$is_testable(hid)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"hid integer. Index hypothesis","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-get-hid-","dir":"Reference","previous_headings":"","what":"Method get_hid()","title":"Class of GraphicalTesting — GraphicalTesting","text":"convert hypothesis's name (unique) index.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$get_hid(hypothesis)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"hypothesis character. Name hypothesis. different hid, index.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-reject-a-hypothesis-","dir":"Reference","previous_headings":"","what":"Method reject_a_hypothesis()","title":"Class of GraphicalTesting — GraphicalTesting","text":"remove node graph hypothesis rejected","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$reject_a_hypothesis(hypothesis)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"hypothesis name hypothesis. different hid, index.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-set-trajectory-","dir":"Reference","previous_headings":"","what":"Method set_trajectory()","title":"Class of GraphicalTesting — GraphicalTesting","text":"save new testing results current stage","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$set_trajectory(result)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"result data frame specific columns.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-get-trajectory-","dir":"Reference","previous_headings":"","what":"Method get_trajectory()","title":"Class of GraphicalTesting — GraphicalTesting","text":"return testing results time function called. Note graphical test carried sequential manner. Users may want review results anytime. Value returned function can possibly vary time.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$get_trajectory()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-test-hypotheses-","dir":"Reference","previous_headings":"","what":"Method test_hypotheses()","title":"Class of GraphicalTesting — GraphicalTesting","text":"test hypotheses using p-values (information stats) base current graph. rows order number.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$test_hypotheses(stats)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"stats data frame. must contain following columns: order integer. P-values (among others) hypotheses can tested time (e.g., interim, final analysis) labeled order number. hypothesis tested stage, simply put stats order number. hypotheses character. Name hypotheses tested. identical calling GraphicalTesting$new. p nominal p-values. info observed number events samples test. used compute information fractions group sequential design. max_info integers. Maximum information test. interim, max_info equal planned_max_info calling GraphicalTesting$new. final stage hypothesis, one can update observed numbers.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-test-","dir":"Reference","previous_headings":"","what":"Method test()","title":"Class of GraphicalTesting — GraphicalTesting","text":"test hypotheses using p-values (information stats) base current graph. Users can call function multiple times. P-values order passed stats together. P-values multiple orders can passed together well. example, users p-values current stage, can call function update graph accordingly. case, column order stats constant. can call function p-values next stage available, order another integer. simulation, p-values stages hand, users can call function test single pass. case, column order stats can different values.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$test(stats)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"stats data frame. must contain following columns: order integer. P-values (among others) hypotheses can tested time (e.g., interim, final analysis) labeled order number. hypothesis tested stage, simply put stats order number. p-values stats tested stage, order can absent. hypotheses character. Name hypotheses tested. identical calling GraphicalTesting$new. p nominal p-values. info observed number events samples test. used compute information fractions group sequential design. max_info integers. Maximum information test. interim, max_info equal planned_max_info calling GraphicalTesting$new. final stage hypothesis, one can update observed numbers. alpha_spent accumulative proportion allocated alpha spent alpha_spending = \"asUser\". Set NA_real_ otherwise. hypothesis uses \"asUser\" stats, column ignored.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Class of GraphicalTesting — GraphicalTesting","text":"data frame returned get_current_testing_results. contains details testing steps.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-get-current-testing-results-","dir":"Reference","previous_headings":"","what":"Method get_current_testing_results()","title":"Class of GraphicalTesting — GraphicalTesting","text":"return testing results details time function called. function can called users multiple times, thus returned value varies time. function called GraphicalTesting::test, returns data frame consisting columns hypothesis name hypotheses. obs_p_value observed p-values. max_allocated_alpha maximum allocated alpha hypothesis. decision 'reject' 'accept' hypotheses. stages stage hypothesis. order order number hypothesis tested last time. different stages. typeOfDesign name alpha spending functions.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$get_current_testing_results()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-get-current-decision-","dir":"Reference","previous_headings":"","what":"Method get_current_decision()","title":"Class of GraphicalTesting — GraphicalTesting","text":"get current decisions hypotheses. Returned value changes time depends stages tested already.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$get_current_decision()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Class of GraphicalTesting — GraphicalTesting","text":"named vector values \"accept\" \"reject\". Note hypothesis yet tested calling function, decision hypothesis \"accept\".","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Class of GraphicalTesting — GraphicalTesting","text":"generic function print","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$print(graph = TRUE, trajectory = TRUE, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"graph logic. TRUE visualizing current graph, can vary time. trajectory logic. TRUE print current data frame trajectory, can vary time. ... arguments supported gMCPLite::hGraph, e.g., trhw trhh control size transition box, trdigits control digits displayed transition weights.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class of GraphicalTesting — GraphicalTesting","text":"objects class cloneable method.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-24","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$clone(deep = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"deep Whether make deep clone.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"## Example 1 ## dry-run to study the behavior of a graph ## without group sequential design if(interactive()){ eps <- .01 alpha <- c(.01, .04, 0, 0, 0) transition <- matrix(c(   0, 0, 0, 0, 1,   0, 0, .75, 0, .25,   0, 1/2-eps/2, 0, eps, 1/2-eps/2,   0, 0, 0, 0, 0,   0, 1/2, 1/2, 0, 0 ), nrow = 5, byrow = TRUE)  ## dummy can be anything, we don't actually use it asf <- rep('asOF', 5) ## dummy can be anything, we don't actually use it max_info <- c(300, 1100, 1100, 1100, 500)  hs <- c('H1: UPCR IgA', 'H2: eGFR GN', 'H3: eGFR GN 10wk', 'H5: 2nd Endpoints', 'H4: eGFR IgA')  ## initialize an object gt <- GraphicalTesting$new(alpha, transition, asf, max_info, hs) print(gt)  ## reject hypotheses based on customized order ## to understand the behavior of a testing strategy ## Any other rejection order is possible gt$reject_a_hypothesis('H1: UPCR IgA') print(gt)  gt$reject_a_hypothesis('H2: eGFR GN') print(gt)  gt$reject_a_hypothesis('H4: eGFR IgA') print(gt)  gt$reject_a_hypothesis('H3: eGFR GN 10wk') print(gt)  gt$reset() }  ## Example 2 ## Example modified from vignettes in gMCPLite: ## Graphical testing for group sequential design if(interactive()){ ## initial alpha split to each of the hypotheses alpha <- c(.01, .01, .004, .0, .0005, .0005)  ## transition matrix of the initial graph transition <- matrix(c(   0, 1, 0, 0, 0, 0,   0, 0, .5, .5, 0, 0,   0, 0, 0, 1, 0, 0,   0, 0, 0, 0, .5, .5,   0, 0, 0, 0, 0, 1,   .5, .5, 0, 0, 0, 0 ), nrow = 6, byrow = TRUE)  ## alpha spending functions per hypothesis asf <- c('asUser', 'asOF', 'asUser', 'asOF', 'asOF', 'asOF')  ## planned maximum number of events per hypothesis max_info <- c(295, 800, 310, 750, 500, 1100)  ## name of hypotheses hs <- c('H1: OS sub',         'H2: OS all',         'H3: PFS sub',         'H4: PFS all',         'H5: ORR sub',         'H6: ORR all')  gt <- GraphicalTesting$new(alpha, transition, asf, max_info, hs)  ## print initial graph gt  ## nominal p-values at each stage ## Note: p-values with same order are calculated with the same locked data ## Note: alpha_spent is only specified for hypotheses using custom alpha ##       spending function \"asUser\" stats <-   data.frame(     order = c(1:3, 1:3, 1:2, 1:2, 1, 1),     hypotheses = c(rep('H1: OS sub', 3), rep('H2: OS all', 3),                    rep('H3: PFS sub', 2), rep('H4: PFS all', 2),                    'H5: ORR sub', 'H6: ORR all'),     p = c(.03, .0001, .000001, .2, .15, .1, .2, .001, .3, .2, .00001, .1),     info = c(185, 245, 295, 529, 700, 800, 265, 310, 675, 750, 490, 990),     is_final = c(F, F, T, F, F, T, F, T, F, T, T, T),     max_info = c(rep(295, 3), rep(800, 3), rep(310, 2), rep(750, 2), 490, 990),     alpha_spent = c(c(.1, .4, 1), rep(NA, 3), c(.3, 1), rep(NA, 2), NA, NA)   )  ## test the p-values from the first analysis, plot the updated graph gt$test(stats %>% dplyr::filter(order==1))  ## test the p-values from the second analysis, plot the updated graph gt$test(stats %>% dplyr::filter(order==2))  ## test the p-values from the third analysis, plot the updated graph ## because no futher test would be done, displayed results are final gt$test(stats %>% dplyr::filter(order==3))   ## plot the final status of the graph print(gt, trajectory = FALSE)  ## you can get final testing results as follow gt$get_current_testing_results()  ## if you want to see step-by-step details print(gt$get_trajectory())  ## equivalently, you can call gt$test(stats) for only once to get same results. gt$reset() gt$test(stats)  ## if you only want to get the final testing results gt$get_current_decision() }"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Class of GroupSequentialTest — GroupSequentialTest","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"Perform group sequential test single endpoint based sequential one-sided p-values stages. Selected alpha spending functions, including user-defined functions, supported. Boundaries calculated `rpact`. final analysis, adjustment can applied -running -running trial observed final information greater lower planned maximum information. See Wassmer & Brannath, 2016, p78f. test based p-values z statistics easier handling direction alternative hypothesis current implementation. addition, one-sided test supported sufficient common use clinical design.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"GroupSequentialTest$new() GroupSequentialTest$get_name() GroupSequentialTest$get_alpha() GroupSequentialTest$set_alpha_spending() GroupSequentialTest$get_alpha_spending() GroupSequentialTest$get_max_info() GroupSequentialTest$set_max_info() GroupSequentialTest$get_stage() GroupSequentialTest$reset() GroupSequentialTest$set_trajectory() GroupSequentialTest$get_trajectory() GroupSequentialTest$get_stage_level() GroupSequentialTest$test_one() GroupSequentialTest$test() GroupSequentialTest$print() GroupSequentialTest$clone()","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"initialize group sequential test. Now support one-sided test based p-values.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$new(   alpha = 0.025,   alpha_spending = c(\"asP\", \"asOF\", \"asUser\"),   planned_max_info,   name = \"H0\",   silent = TRUE )"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"alpha familywise error rate alpha_spending alpha spending function. Use \"asUser\" custom alpha spending schedule used. planned_max_info integer. Planned maximum number patients non-tte endpoints number events tte endpoints name character. Name hypothesis, e.g. endpoint, subgroup, etc. Optional. silent TRUE muting messages.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-get-name-","dir":"Reference","previous_headings":"","what":"Method get_name()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"get name hypothesis","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$get_name()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-get-alpha-","dir":"Reference","previous_headings":"","what":"Method get_alpha()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"get overall alpha","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$get_alpha()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-set-alpha-spending-","dir":"Reference","previous_headings":"","what":"Method set_alpha_spending()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"set alpha spending function. useful set 'asUser' final stage adjust - -running trial.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$set_alpha_spending(asf)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"asf character alpha spending function.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-get-alpha-spending-","dir":"Reference","previous_headings":"","what":"Method get_alpha_spending()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"return character alpha spending function","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$get_alpha_spending()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-get-max-info-","dir":"Reference","previous_headings":"","what":"Method get_max_info()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"return planned maximum information","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$get_max_info()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-set-max-info-","dir":"Reference","previous_headings":"","what":"Method set_max_info()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"set planned maximum information. used final stage adjust - -running trial.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$set_max_info(obs_max_info)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"obs_max_info integer. Maximum information, observed number patients events final stage.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-get-stage-","dir":"Reference","previous_headings":"","what":"Method get_stage()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"get current stage.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$get_stage()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-reset-","dir":"Reference","previous_headings":"","what":"Method reset()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"object class GroupSequentialTest designed used sequentially calling GroupSequentialTest$test. planned tests performed, analysis done. case keep calling GroupSequentialTest$test trigger error. reuse object new set staged p-values, call function reset status stage 1. See examples. implementation can prevent error planned number stages tested.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$reset()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-set-trajectory-","dir":"Reference","previous_headings":"","what":"Method set_trajectory()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"save testing result current stage","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$set_trajectory(result, is_final = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"result data frame storing testing result stage. is_final logical. TRUE final test hypothesis, FALSE otherwise.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-get-trajectory-","dir":"Reference","previous_headings":"","what":"Method get_trajectory()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"return testing trajectory current stage. function can called stage. See examples.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$get_trajectory()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-get-stage-level-","dir":"Reference","previous_headings":"","what":"Method get_stage_level()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"compute boundaries given current (potentially updated) settings. returns different values settings changed time.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$get_stage_level()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-test-one-","dir":"Reference","previous_headings":"","what":"Method test_one()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"test hypothesis given p-value current stage","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$test_one(   p_value,   is_final,   observed_info,   alpha_spent = NA_real_ )"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"p_value numeric. p-value. is_final logical. TRUE test carried final analysis. observed_info integer. Observed information current stage. can number samples (non-tte) number events (tte) test. current stage final, observed_info used update planned_max_info, alpha spending function (typeOfDesign rpact) updated 'asUser', argument userAlphaSpending used calling rpact::getDesignGroupSequential. alpha_spent numeric alpha_spending = \"asUser\". must 0 alpha, overall alpha test. NA_real_ alpha spending functions \"asOF\" \"asP\".","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-test-","dir":"Reference","previous_headings":"","what":"Method test()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"Carry test based group sequential design. p_values NULL, dummy values use boundaries calculated users review.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$test(   observed_info,   is_final,   p_values = NULL,   alpha_spent = NULL )"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"observed_info vector integers, observed information stages. is_final logical vector. TRUE test final analysis. p_values vector p-values. specified, length equal length observed_info. alpha_spent accumulative alpha spent observed information. numeric vector values 0 1, length equals length(observed_info) alpha-spending function \"asUser\". Otherwise NULL.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"generic function print","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$print()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"objects class cloneable method.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$clone(deep = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"deep Whether make deep clone.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"## Note: examples showed here replicate the results from ## https://www.rpact.org/vignettes/planning/rpact_boundary_update_example/  ## Example 1. Generate boundaries for a pre-fix group sequential design gst <- GroupSequentialTest$new(   alpha = .025, alpha_spending = 'asOF',   planned_max_info = 387)  ## without giving p-values, boundaries are returned without actual testing gst$test(observed_info = c(205, 285, 393), is_final = c(FALSE, FALSE, TRUE)) gst #>   typeOfDesign stages informationRates alpha sided alphaSpent criticalValues #> 1         asOF      1        0.5216285 0.025     1 0.00207258       2.866898 #> 2         asOF      2        0.7251908 0.025     1 0.00900462       2.392987 #> 3       asUser      3        1.0000000 0.025     1 0.02499999       2.013686 #>   stageLevels obs_p_value decision hypothesis #> 1 0.002072584          NA       NA         H0 #> 2 0.008355905          NA       NA         H0 #> 3 0.022021239          NA       NA         H0  ## Example 2. Calculate boundaries with observed information at stages ## No p-values are provided  ## get an error without resetting an used object try( gst$test(observed_info = 500, is_final = FALSE) ) #> Error in gst$test(observed_info = 500, is_final = FALSE) :  #>   Group sequential test has been completed.  #> No further test is available.  #> Run GroupSequentialTest$reset() and try again.   ## reset the object for re-use gst$reset() #> GroupSequentialTest object <H0> has been reset and is ready to use.  gst$test(observed_info = c(205, 285, 393), is_final = c(FALSE, FALSE, TRUE)) gst #>   typeOfDesign stages informationRates alpha sided alphaSpent criticalValues #> 1         asOF      1        0.5216285 0.025     1 0.00207258       2.866898 #> 2         asOF      2        0.7251908 0.025     1 0.00900462       2.392987 #> 3       asUser      3        1.0000000 0.025     1 0.02499999       2.013686 #>   stageLevels obs_p_value decision hypothesis #> 1 0.002072584          NA       NA         H0 #> 2 0.008355905          NA       NA         H0 #> 3 0.022021239          NA       NA         H0  ## Example 3. Test stagewise p-values sequentially gst$reset() #> GroupSequentialTest object <H0> has been reset and is ready to use.   gst$test(observed_info = 205, is_final = FALSE, p_values = .09) gst$test(285, FALSE, .006)  ## print testing trajectory by now gst #>   typeOfDesign stages informationRates alpha sided alphaSpent criticalValues #> 1         asOF      1        0.5297158 0.025     1 0.00207258       2.866898 #> 2         asOF      2        0.7364341 0.025     1 0.00900462       2.392987 #>   stageLevels obs_p_value decision hypothesis #> 1 0.002072584       0.090   accept         H0 #> 2 0.008355905       0.006   reject         H0  gst$test(393, TRUE, 002)  ## print all testing trajectory gst #>   typeOfDesign stages informationRates alpha sided alphaSpent criticalValues #> 1         asOF      1        0.5216285 0.025     1 0.00207258       2.866898 #> 2         asOF      2        0.7251908 0.025     1 0.00900462       2.392987 #> 3       asUser      3        1.0000000 0.025     1 0.02499999       2.013686 #>   stageLevels obs_p_value decision hypothesis #> 1 0.002072584       0.090   accept         H0 #> 2 0.008355905       0.006   reject         H0 #> 3 0.022021239       2.000   accept         H0  ## you can also test all stages at once ## the result is the same as calling test() for each of the stages gst$reset() #> GroupSequentialTest object <H0> has been reset and is ready to use.  gst$test(c(205, 285, 393), c(FALSE, FALSE, TRUE), c(.09, .006, .002)) gst #>   typeOfDesign stages informationRates alpha sided alphaSpent criticalValues #> 1         asOF      1        0.5216285 0.025     1 0.00207258       2.866898 #> 2         asOF      2        0.7251908 0.025     1 0.00900462       2.392987 #> 3       asUser      3        1.0000000 0.025     1 0.02499999       2.013686 #>   stageLevels obs_p_value decision hypothesis #> 1 0.002072584       0.090   accept         H0 #> 2 0.008355905       0.006   reject         H0 #> 3 0.022021239       0.002   reject         H0  ## Example 4. use user-define alpha spending gst <- GroupSequentialTest$new(   alpha = .025, alpha_spending = 'asUser',   planned_max_info = 387)  gst$test(   observed_info = c(205, 285, 393),   is_final = c(FALSE, FALSE, TRUE),   alpha_spent = c(.005, .0125, .025)) gst #>   typeOfDesign stages informationRates alpha sided alphaSpent criticalValues #> 1       asUser      1        0.5216285 0.025     1 0.00499999       2.575898 #> 2       asUser      2        0.7251908 0.025     1 0.01249999       2.309700 #> 3       asUser      3        1.0000000 0.025     1 0.02499999       2.065005 #>   stageLevels obs_p_value decision hypothesis #> 1 0.004999005          NA       NA         H0 #> 2 0.010452387          NA       NA         H0 #> 3 0.019461267          NA       NA         H0"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":null,"dir":"Reference","previous_headings":"","what":"Class of Listener — Listeners","title":"Class of Listener — Listeners","text":"Create class listener. listener monitors trial checking condition pre-defined milestones. Actions triggered executed automatically.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class of Listener — Listeners","text":"Listeners$new() Listeners$add_milestones() Listeners$get_milestones() Listeners$get_milestone_names() Listeners$monitor() Listeners$mute() Listeners$reset() Listeners$clone()","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class of Listener — Listeners","text":"initialize listener","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Listener — Listeners","text":"","code":"Listeners$new(silent = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Listener — Listeners","text":"silent logical. TRUE mute messages.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":"method-add-milestones-","dir":"Reference","previous_headings":"","what":"Method add_milestones()","title":"Class of Listener — Listeners","text":"register milestones listener. Order ... matter scanned order. user's responsibility use reasonable order calling function, otherwise, result Listener$monitor() can problematic.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Listener — Listeners","text":"","code":"Listeners$add_milestones(...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Listener — Listeners","text":"... milestones","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":"method-get-milestones-","dir":"Reference","previous_headings":"","what":"Method get_milestones()","title":"Class of Listener — Listeners","text":"return registered milestones","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Listener — Listeners","text":"","code":"Listeners$get_milestones(milestone_name = NULL)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Listener — Listeners","text":"milestone_name return Milestone object given name(s). NULL, registered milestones returned.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":"method-get-milestone-names-","dir":"Reference","previous_headings":"","what":"Method get_milestone_names()","title":"Class of Listener — Listeners","text":"return names registered milestones","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Listener — Listeners","text":"","code":"Listeners$get_milestone_names()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":"method-monitor-","dir":"Reference","previous_headings":"","what":"Method monitor()","title":"Class of Listener — Listeners","text":"scan, check, trigger registered milestones. Milestones triggered order calling Listener$add_milestones.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Listener — Listeners","text":"","code":"Listeners$monitor(trial, dry_run)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Listener — Listeners","text":"trial Trial object. dry_run logical. See Controller::run information.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":"method-mute-","dir":"Reference","previous_headings":"","what":"Method mute()","title":"Class of Listener — Listeners","text":"mute messages (including warnings)","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Listener — Listeners","text":"","code":"Listeners$mute(silent)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Listener — Listeners","text":"silent logical.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":"method-reset-","dir":"Reference","previous_headings":"","what":"Method reset()","title":"Class of Listener — Listeners","text":"reset milestones registered listener. Usually, called controller can run additional replicates simulation.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Listener — Listeners","text":"","code":"Listeners$reset()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class of Listener — Listeners","text":"objects class cloneable method.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Listener — Listeners","text":"","code":"Listeners$clone(deep = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Listener — Listeners","text":"deep Whether make deep clone.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listeners.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of Listener — Listeners","text":"","code":"##"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":null,"dir":"Reference","previous_headings":"","what":"Class of Milestones — Milestones","title":"Class of Milestones — Milestones","text":"Create class milestone. milestone means time point take action, e.g., carry (futility, interim, final) analysis add/remove arms, stop trial early. can also general time point trial data used decision making adaptation. example, one can define milestone changing randomization scheme, sample size re-assessment, trial duration extension etc.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class of Milestones — Milestones","text":"Milestones$new() Milestones$get_name() Milestones$get_type() Milestones$get_trigger_condition() Milestones$get_action() Milestones$set_dry_run() Milestones$execute_action() Milestones$get_trigger_status() Milestones$reset() Milestones$trigger_milestone() Milestones$mute() Milestones$clone()","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class of Milestones — Milestones","text":"initialize milestone","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Milestones — Milestones","text":"","code":"Milestones$new(name, type = name, trigger_condition, action = doNothing)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Milestones — Milestones","text":"name character. Name milestone. type character vector. Milestone type(s) (futility, interim, final), milestone can multiple types. information purpose can string. trigger_condition function check milestone trigger. See vignette Condition System Triggering Milestones Trial. action function execute milestone triggers.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"method-get-name-","dir":"Reference","previous_headings":"","what":"Method get_name()","title":"Class of Milestones — Milestones","text":"return name milestone","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Milestones — Milestones","text":"","code":"Milestones$get_name()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"method-get-type-","dir":"Reference","previous_headings":"","what":"Method get_type()","title":"Class of Milestones — Milestones","text":"return type(s) milestone","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Milestones — Milestones","text":"","code":"Milestones$get_type()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"method-get-trigger-condition-","dir":"Reference","previous_headings":"","what":"Method get_trigger_condition()","title":"Class of Milestones — Milestones","text":"return trigger_condition function","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Milestones — Milestones","text":"","code":"Milestones$get_trigger_condition()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"method-get-action-","dir":"Reference","previous_headings":"","what":"Method get_action()","title":"Class of Milestones — Milestones","text":"return action function","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Milestones — Milestones","text":"","code":"Milestones$get_action()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"method-set-dry-run-","dir":"Reference","previous_headings":"","what":"Method set_dry_run()","title":"Class of Milestones — Milestones","text":"set dry run carried milestone. details, refer Controller::run.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Milestones — Milestones","text":"","code":"Milestones$set_dry_run(dry_run)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Milestones — Milestones","text":"dry_run logical.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"method-execute-action-","dir":"Reference","previous_headings":"","what":"Method execute_action()","title":"Class of Milestones — Milestones","text":"execute action function","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Milestones — Milestones","text":"","code":"Milestones$execute_action(trial)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Milestones — Milestones","text":"trial Trial object.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"method-get-trigger-status-","dir":"Reference","previous_headings":"","what":"Method get_trigger_status()","title":"Class of Milestones — Milestones","text":"return trigger status","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Milestones — Milestones","text":"","code":"Milestones$get_trigger_status()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"method-reset-","dir":"Reference","previous_headings":"","what":"Method reset()","title":"Class of Milestones — Milestones","text":"reset milestone can triggered . Usually, called controller trial can run additional replicates simulation.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Milestones — Milestones","text":"","code":"Milestones$reset()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"method-trigger-milestone-","dir":"Reference","previous_headings":"","what":"Method trigger_milestone()","title":"Class of Milestones — Milestones","text":"trigger milestone (always TRUE) execute action accordingly. calls Trial$get_data_lock_time() lock data based conditions implemented Milestones$trigger_condition. time meets condition found, Trial$get_data_lock_time() throw error stop program. means user needs adjust trigger_condition (e.g., target number events (target_n_events) impossible reach).","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Milestones — Milestones","text":"","code":"Milestones$trigger_milestone(trial)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Milestones — Milestones","text":"trial Trial object.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"method-mute-","dir":"Reference","previous_headings":"","what":"Method mute()","title":"Class of Milestones — Milestones","text":"mute messages (including warnings)","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Milestones — Milestones","text":"","code":"Milestones$mute(silent)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Milestones — Milestones","text":"silent logical.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class of Milestones — Milestones","text":"objects class cloneable method.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Milestones — Milestones","text":"","code":"Milestones$clone(deep = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Milestones — Milestones","text":"deep Whether make deep clone.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Milestones.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of Milestones — Milestones","text":"","code":"##"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/PiecewiseConstantExponentialRNG.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate time-to-event endpoint from piecewise constant exponential distribution — PiecewiseConstantExponentialRNG","title":"Generate time-to-event endpoint from piecewise constant exponential distribution — PiecewiseConstantExponentialRNG","text":"Implementation based algorithm.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/PiecewiseConstantExponentialRNG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate time-to-event endpoint from piecewise constant exponential distribution — PiecewiseConstantExponentialRNG","text":"","code":"PiecewiseConstantExponentialRNG(n, risk, endpoint_name)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/PiecewiseConstantExponentialRNG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate time-to-event endpoint from piecewise constant exponential distribution — PiecewiseConstantExponentialRNG","text":"n number random numbers risk data frame columns end_time End time constant risk time window. start time first time window 0. piecewise_risk constant risk time window, absolute risk * relative risk, (h0 * g) link. hazard_ratio optional column simulating active arm. absent, column 1s added. Equivalently, user can multiply piecewise_risk hazard_ratio manually ignore column. endpoint_name name endpoint","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/PiecewiseConstantExponentialRNG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate time-to-event endpoint from piecewise constant exponential distribution — PiecewiseConstantExponentialRNG","text":"","code":"# example code # In this example, absolute risk in [0, 1) and [26, 52] are 0.0181 and # 0.0027, respectively. risk <- data.frame(   end_time = c(1, 4.33, 26.0, 52.0),   piecewise_risk = c(1, 1.01, 0.381, 0.150) * exp(-4.01) ) PiecewiseConstantExponentialRNG(10, risk, 'PFS') #>        PFS PFS_event #> 1  52.0000         0 #> 2  52.0000         0 #> 3  52.0000         0 #> 4  52.0000         0 #> 5  52.0000         0 #> 6  52.0000         0 #> 7  52.0000         0 #> 8   2.7365         1 #> 9  52.0000         0 #> 10 52.0000         0"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/StaggeredRecruiter.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate enrollment time from piecewise constant uniform distribution — StaggeredRecruiter","title":"Generate enrollment time from piecewise constant uniform distribution — StaggeredRecruiter","text":"Accrual rate can 10 patients/months first 2 months, 20 patients/ months second 2 months, eventually 30 patients/months end trial.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/StaggeredRecruiter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate enrollment time from piecewise constant uniform distribution — StaggeredRecruiter","text":"","code":"StaggeredRecruiter(n, accrual_rate)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/StaggeredRecruiter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate enrollment time from piecewise constant uniform distribution — StaggeredRecruiter","text":"n number random numbers accrual_rate data frame columns end_time:     End time constant rate time window. start time     first time window 0. piecewise_rate:     constant rate time window. number patients     recruited window window length x piecewise_rate","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/StaggeredRecruiter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate enrollment time from piecewise constant uniform distribution — StaggeredRecruiter","text":"","code":"accrual_rate <- data.frame(   end_time = c(12, 13:17, Inf),   piecewise_rate = c(15, 15 + 6 * (1:5), 45) )  accrual_rate <- data.frame(   end_time = c(3, 4, 5, 8, Inf),   piecewise_rate = c(1, 2, 2, 3, 4) )  StaggeredRecruiter(30, accrual_rate) #>  [1]  0.000000  1.000000  2.000000  3.000000  3.500000  4.000000  4.500000 #>  [8]  5.000000  5.333333  5.666667  6.000000  6.333333  6.666667  7.000000 #> [15]  7.333333  7.666667  8.000000  8.250000  8.500000  8.750000  9.000000 #> [22]  9.250000  9.500000  9.750000 10.000000 10.250000 10.500000 10.750000 #> [29] 11.000000 11.250000"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":null,"dir":"Reference","previous_headings":"","what":"Class of Trial — Trials","title":"Class of Trial — Trials","text":"Create class trial.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class of Trial — Trials","text":"Trials$new() Trials$get_trial_data() Trials$get_duration() Trials$set_duration() Trials$set_enroller() Trials$get_enroller() Trials$set_dropout() Trials$get_dropout() Trials$roll_back() Trials$remove_arms() Trials$update_sample_ratio() Trials$add_arms() Trials$get_name() Trials$get_description() Trials$get_arms() Trials$get_arms_name() Trials$get_number_arms() Trials$has_arm() Trials$get_an_arm() Trials$get_sample_ratio() Trials$get_number_patients() Trials$get_number_enrolled_patients() Trials$get_number_unenrolled_patients() Trials$get_randomization_queue() Trials$get_enroll_time() Trials$enroll_patients() Trials$set_current_time() Trials$get_current_time() Trials$get_event_tables() Trials$get_data_lock_time_by_event_number() Trials$get_data_lock_time_by_calendar_time() Trials$get_locked_data() Trials$get_locked_data_name() Trials$get_event_number() Trials$save_milestone_time() Trials$get_milestone_time() Trials$lock_data() Trials$event_plot() Trials$censor_trial_data() Trials$save() Trials$bind() Trials$save_custom_data() Trials$get_custom_data() Trials$get() Trials$get_output() Trials$mute() Trials$independentIncrement() Trials$dunnettTest() Trials$closedTest() Trials$get_seed() Trials$print() Trials$get_snapshot_copy() Trials$make_snapshot() Trials$make_arms_snapshot() Trials$reset() Trials$set_arm_added_time() Trials$get_arm_added_time() Trials$set_arm_removal_time() Trials$get_arm_removal_time() Trials$clone()","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class of Trial — Trials","text":"initialize trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$new(   name,   n_patients,   duration,   description = name,   seed = NULL,   enroller,   dropout = NULL,   silent = FALSE,   ... )"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"name character. Name trial. n_patients integer. Maximum number patients enrolled trial. duration Numeric. Trial duration. description character. Optional description trial. default set trial's name. seed random seed. NULL, set.seed() called, uses seed set outside. enroller function returning vector enrollment time patients. first argument number enrolled patients. dropout function returning vector dropout time patients. first argument number enrolled patients. silent logical. TRUE mute messages. ... arguments enroller dropout.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-trial-data-","dir":"Reference","previous_headings":"","what":"Method get_trial_data()","title":"Class of Trial — Trials","text":"return trial data enrolled patients time function called","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_trial_data()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-duration-","dir":"Reference","previous_headings":"","what":"Method get_duration()","title":"Class of Trial — Trials","text":"return maximum duration trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_duration()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-set-duration-","dir":"Reference","previous_headings":"","what":"Method set_duration()","title":"Class of Trial — Trials","text":"set trial duration adaptive designed trial. patients enrolled resetting duration truncated (non-tte endpoints) censored (tte endpoints) original duration. Remaining patients re-randomized. Now new duration must longer old one.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$set_duration(duration)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"duration new duration trial. must longer current duration.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-set-enroller-","dir":"Reference","previous_headings":"","what":"Method set_enroller()","title":"Class of Trial — Trials","text":"set recruitment curve initialize trial.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$set_enroller(func, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"func function generate enrollment time. can built-function like `rexp` customized functions like `StaggeredRecruiter`. ... arguments func.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-enroller-","dir":"Reference","previous_headings":"","what":"Method get_enroller()","title":"Class of Trial — Trials","text":"get function recruitment curve","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_enroller()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-set-dropout-","dir":"Reference","previous_headings":"","what":"Method set_dropout()","title":"Class of Trial — Trials","text":"set distribution drop time. can done initialize trial, updating trial adaptive design.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$set_dropout(func, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"func function generate dropout time. can built-function like `rexp` customized functions. ... arguments func.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-dropout-","dir":"Reference","previous_headings":"","what":"Method get_dropout()","title":"Class of Trial — Trials","text":"get generator dropout time","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_dropout()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-roll-back-","dir":"Reference","previous_headings":"","what":"Method roll_back()","title":"Class of Trial — Trials","text":"roll back data current time trial. , Trial$trial_data cut current time, data deleted. However, Trial$enroll_time current time kept unchanged planned enrollment curve.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$roll_back()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-remove-arms-","dir":"Reference","previous_headings":"","what":"Method remove_arms()","title":"Class of Trial — Trials","text":"remove arms trial. enroll_patients() always called end enroll remaining patients Trial$get_current_time(). function may used futility analysis, dose selection, enrichment analysis (sub-population) interim analysis (early stop efficacy)","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$remove_arms(arms_name)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"arms_name character vector. Name arms removed.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-update-sample-ratio-","dir":"Reference","previous_headings":"","what":"Method update_sample_ratio()","title":"Class of Trial — Trials","text":"update sample ratio arm. happen arm added removed. may want update sample ratio unaffected arms well. function can update sample ratio one arm time. sample ratio updated, trial data rolled back updated randomization queue. Data unenrolled patients re-sampled well.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$update_sample_ratio(arm_name, sample_ratio)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"arm_name character. Name arm length 1. sample_ratio integer. Sample ratio arm.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-add-arms-","dir":"Reference","previous_headings":"","what":"Method add_arms()","title":"Class of Trial — Trials","text":"add one arms trial. enroll_patients() called end enroll remaining patients private$randomization_queue. function can used two scenarios. (1) add arms right trial created (.e., Trial$new(...)). sample_ratio arms added ... length. (2) add arms trial already arm(s)","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$add_arms(sample_ratio, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"sample_ratio integer vector. Sample ratio permuted block randomization. appended existing sample ratio trial. ... one objects class Arm. One exception ... argument enforce. enforce = TRUE, sample ratio newly added arm. rolls back patients Trial$get_current_time(), .e. redo randomization patients. can useful add arms one one creating trial. Note can run Trial$add_arm(sample_ratio1, arm1) followed Trial$add_arm(sample_ratio2, enforce = TRUE, arm2). expected similar result Trial$add_arms(c(sample_ratio1, sample_ratio2), arm1, arm2). Note two method return exactly trial randomization_queue generated twice first approach second approach. statistically, equivalent distribution.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-name-","dir":"Reference","previous_headings":"","what":"Method get_name()","title":"Class of Trial — Trials","text":"return name trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_name()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-description-","dir":"Reference","previous_headings":"","what":"Method get_description()","title":"Class of Trial — Trials","text":"return description trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_description()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-arms-","dir":"Reference","previous_headings":"","what":"Method get_arms()","title":"Class of Trial — Trials","text":"return list arms trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_arms()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-arms-name-","dir":"Reference","previous_headings":"","what":"Method get_arms_name()","title":"Class of Trial — Trials","text":"return arms' name trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_arms_name()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-number-arms-","dir":"Reference","previous_headings":"","what":"Method get_number_arms()","title":"Class of Trial — Trials","text":"get number arms trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_number_arms()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-has-arm-","dir":"Reference","previous_headings":"","what":"Method has_arm()","title":"Class of Trial — Trials","text":"check trial arm. Return TRUE FALSE.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$has_arm()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-an-arm-","dir":"Reference","previous_headings":"","what":"Method get_an_arm()","title":"Class of Trial — Trials","text":"return arm","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_an_arm(arm_name)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"arm_name character, name arm extracted","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-sample-ratio-","dir":"Reference","previous_headings":"","what":"Method get_sample_ratio()","title":"Class of Trial — Trials","text":"return current sample ratio trial. ratio can probably change trial (e.g., arm removed added)","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_sample_ratio(arm_names = NULL)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"arm_names character vector arms.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-number-patients-","dir":"Reference","previous_headings":"","what":"Method get_number_patients()","title":"Class of Trial — Trials","text":"return number patients planning trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_number_patients()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-number-enrolled-patients-","dir":"Reference","previous_headings":"","what":"Method get_number_enrolled_patients()","title":"Class of Trial — Trials","text":"return number enrolled (randomized) patients","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_number_enrolled_patients()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-number-unenrolled-patients-","dir":"Reference","previous_headings":"","what":"Method get_number_unenrolled_patients()","title":"Class of Trial — Trials","text":"return number unenrolled patients","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_number_unenrolled_patients()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-randomization-queue-","dir":"Reference","previous_headings":"","what":"Method get_randomization_queue()","title":"Class of Trial — Trials","text":"return randomization queue planned yet enrolled patients. function update randomization_queue, just return value debugging purpose.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_randomization_queue(index = NULL)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"index index extracted. Return queue NULL.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-enroll-time-","dir":"Reference","previous_headings":"","what":"Method get_enroll_time()","title":"Class of Trial — Trials","text":"return enrollment time planned yet enrolled patients. function update enroll_time, just return value debugging purpose.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-24","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_enroll_time(index = NULL)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"index index extract. Return enroll time NULL.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-enroll-patients-","dir":"Reference","previous_headings":"","what":"Method enroll_patients()","title":"Class of Trial — Trials","text":"assign new patients pre-planned randomization queue pre-specified enrollment time.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-25","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$enroll_patients(n_patients = NULL)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"n_patients number new patients enrolled. NULL, remaining patients plan enrolled. Error may triggered n_patients greater remaining patients planned.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-set-current-time-","dir":"Reference","previous_headings":"","what":"Method set_current_time()","title":"Class of Trial — Trials","text":"set current time trial. data collected changed. private$now set milestone triggered (Milestones class, futility, interim, etc), arm added removed milestone","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-26","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$set_current_time(time)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"time current calendar time trial.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-current-time-","dir":"Reference","previous_headings":"","what":"Method get_current_time()","title":"Class of Trial — Trials","text":"return current time trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-27","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_current_time()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-event-tables-","dir":"Reference","previous_headings":"","what":"Method get_event_tables()","title":"Class of Trial — Trials","text":"count accumulative number events (TTE) non-missing samples (otherwise) calendar time (enroll time + tte TTE, enroll time + readout otherwise)","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-28","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_event_tables(arms = NULL, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"arms vector arms' name event tables created. NULL, arms trial used. ... subset conditions compatible dplyr::filter. Event tables counted subset trial data .","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-data-lock-time-by-event-number-","dir":"Reference","previous_headings":"","what":"Method get_data_lock_time_by_event_number()","title":"Class of Trial — Trials","text":"given set endpoints target number events, determine data lock time milestone (futility, interim, final, etc.). function change trial object (e.g. rolling back yet randomized patients found data lock time).","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-29","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_data_lock_time_by_event_number(   endpoints,   arms,   target_n_events,   type = c(\"all\", \"any\"),   ... )"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"endpoints character vector. Data lock time determined set endpoints. arms vector arms' name number events counted. target_n_events target number events endpoints. type target number events reached. target number events reached. ... subset conditions compatible dplyr::filter. Number Time milestone based event counts subset trial data.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Class of Trial — Trials","text":"data lock time","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of Trial — Trials","text":"","code":"## trial$get_data_lock_time_by_event_number(c('pfs','orr'), c(200,500), 'any')"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-data-lock-time-by-calendar-time-","dir":"Reference","previous_headings":"","what":"Method get_data_lock_time_by_calendar_time()","title":"Class of Trial — Trials","text":"given calendar time lock data, return event counts endpoints.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-30","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_data_lock_time_by_calendar_time(calendar_time, arms)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"calendar_time numeric. Calendar time lock data arms vector arms' name number events counted.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Class of Trial — Trials","text":"data lock time","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of Trial — Trials","text":"","code":"## trial$get_data_lock_time_by_calendar_time(20)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-locked-data-","dir":"Reference","previous_headings":"","what":"Method get_locked_data()","title":"Class of Trial — Trials","text":"return locked data milestone","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-31","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_locked_data(milestone_name)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"milestone_name character, milestone name locked data extracted.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-locked-data-name-","dir":"Reference","previous_headings":"","what":"Method get_locked_data_name()","title":"Class of Trial — Trials","text":"return names locked data","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-32","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_locked_data_name()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-event-number-","dir":"Reference","previous_headings":"","what":"Method get_event_number()","title":"Class of Trial — Trials","text":"return number events lock time milestones","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-33","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_event_number(milestone_name = NULL)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"milestone_name names triggered milestones. Use triggered milestones NULL.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-save-milestone-time-","dir":"Reference","previous_headings":"","what":"Method save_milestone_time()","title":"Class of Trial — Trials","text":"save time new milestone.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-34","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$save_milestone_time(milestone_time, milestone_name)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-18","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"milestone_time numeric. Time new milestone. milestone_name character. Name new milestone.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-milestone-time-","dir":"Reference","previous_headings":"","what":"Method get_milestone_time()","title":"Class of Trial — Trials","text":"return milestone time triggering given milestone","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-35","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_milestone_time(milestone_name = NULL)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-19","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"milestone_name character. Name milestone. NULL, time triggered milestones returned.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-lock-data-","dir":"Reference","previous_headings":"","what":"Method lock_data()","title":"Class of Trial — Trials","text":"lock data specific calendar time. time--event endpoints, event indicator *_event updated accordingly. Locked data stored separately. OVERWRITE/UPDATE private$trial_data! can lose actual time--event information. example, patient may censored first data lock. However, may event observed later data lock.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-36","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$lock_data(at_calendar_time, milestone_name)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-20","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"at_calendar_time time point lock trial data milestone_name assign milestone name name locked data future reference.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-event-plot-","dir":"Reference","previous_headings":"","what":"Method event_plot()","title":"Class of Trial — Trials","text":"plot cumulative number events/samples calendar time.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-37","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$event_plot()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-censor-trial-data-","dir":"Reference","previous_headings":"","what":"Method censor_trial_data()","title":"Class of Trial — Trials","text":"censor trial data calendar time","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-38","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$censor_trial_data(   censor_at = NULL,   selected_arms = NULL,   enrolled_before = Inf )"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-21","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"censor_at time censoring. set trial duration NULL. selected_arms censoring applied selected arms (e.g., removed arms) . NULL, set available arms trial data. Otherwise, censoring applied user-specified arms . necessary number events/sample size removed arms fixed unchanged since corresponding milestone triggered. case, one can update trial data something like censor_trial_data(censor_at = milestone_time, selected_arms = removed_arms). enrolled_before censoring applied patients enrolled specific time. argument used trial duration updated set_duration. Adaptation happens set_duration called fix duration patients enrolled adaptation maintain independent increment. work trial duration updated multiple times.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-save-","dir":"Reference","previous_headings":"","what":"Method save()","title":"Class of Trial — Trials","text":"save single value one-row data frame trial's output analysis/summary later.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-39","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$save(value, name = \"\", overwrite = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-22","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"value value saved. can vector (length 1) data frame (one row). name character name saved object. used name column trial's output value vector. value data frame, name prefix pasted column name value trial's output. user want use value's column name trial's output, set name '' default. Otherwise, column name , e.g., \"{name}_<{names(value)}>\". overwrite logic. TRUE overwriting existing entries warning, otherwise, throwing error stop.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-bind-","dir":"Reference","previous_headings":"","what":"Method bind()","title":"Class of Trial — Trials","text":"row bind data frame existing data frame. name existing Trial, equivalent Trial$save. Extra columns value ignored. Columns Trial$custom_data[[name]] value filled NA.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-40","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$bind(value, name)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-23","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"value data frame saved. can consist one multiple rows. name character. Name object saved.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-save-custom-data-","dir":"Reference","previous_headings":"","what":"Method save_custom_data()","title":"Class of Trial — Trials","text":"save arbitrary (number ) objects trial users can use control workflow. common use case store simulation parameters used action functions.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-41","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$save_custom_data(value, name, overwrite = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-24","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"value value saved. type. name character. Name value accessed later. overwrite logic. TRUE overwriting existing entries warning, otherwise, throwing error stop.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-custom-data-","dir":"Reference","previous_headings":"","what":"Method get_custom_data()","title":"Class of Trial — Trials","text":"return saved custom data specified name.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-42","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_custom_data(name)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-25","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"name character. Name custom data accessed.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-","dir":"Reference","previous_headings":"","what":"Method get()","title":"Class of Trial — Trials","text":"alias function get_custom_data make short cool.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-43","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get(name)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-26","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"name character. Name custom data accessed.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-output-","dir":"Reference","previous_headings":"","what":"Method get_output()","title":"Class of Trial — Trials","text":"return data frame current outputs saved calling save.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-44","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_output(cols = NULL, simplify = TRUE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-27","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"cols columns returned Trial$output. NULL, columns returned. simplify logical. Return value rather data frame one column length(col) == 1 simplify == TRUE.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-mute-","dir":"Reference","previous_headings":"","what":"Method mute()","title":"Class of Trial — Trials","text":"mute messages (including warnings)","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-45","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$mute(silent)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-28","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"silent logical.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-independentincrement-","dir":"Reference","previous_headings":"","what":"Method independentIncrement()","title":"Class of Trial — Trials","text":"calculate independent increments given set milestones","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-46","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$independentIncrement(   formula,   placebo,   milestones,   alternative,   planned_info,   ... )"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-29","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"formula object class formula can used survival::coxph. Must consist arm endpoint data. covariate allowed. Stratification variables supported can added using strata(...). placebo character. String placebo trial's locked data. milestones character vector milestone names trial, e.g., listener$get_milestone_names(). alternative character string specifying alternative hypothesis, must one \"greater\" \"less\". default value. \"greater\" means superiority treatment placebo established hazard ratio greater 1 log-rank test used. planned_info vector planned accumulative number event time--event endpoint. named milestone names. Note: planned_info can also character \"oracle\" planned number events set observed number events, case inverse normal z statistics equal one-sided logrank statistics. purpose debugging . formal simulation, \"oracle\" used adaptation present. Pre-fixed planned_info used create weights combination test controls family-wise error rate strong sense. ... subset condition compatible dplyr::filter. survdiff fitted subset compute one-sided logrank statistics. useful trial consists two arms. default specified, data used fit model.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Class of Trial — Trials","text":"function returns data frame columns: p_inverse_normal one-sided p-value inverse normal test based logrank test (alternative hypothesis: risk higher placebo arm). Accumulative data used. z_inverse_normal z statistics p_inverse_normal. Accumulative data used. p_lr one-sided p-value logrank test  (alternative hypothesis: risk higher placebo arm). Accumulative data used. z_lr z statistics p_lr. Accumulative data used. info observed accumulative event number. planned_info planned accumulative event number. info_pbo observed accumulative event number placebo. info_trt observed accumulative event number treatment arm. wt weights z_inverse_normal.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of Trial — Trials","text":"","code":"\\dontrun{ trial$independentIncrement('pfs', 'pbo', listener$get_milestone_names(), 'less', 'oracle') }"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-dunnetttest-","dir":"Reference","previous_headings":"","what":"Method dunnettTest()","title":"Class of Trial — Trials","text":"carry closed test based Dunnett method group sequential design.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-47","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$dunnettTest(   formula,   placebo,   treatments,   milestones,   alternative,   planned_info,   ... )"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-30","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"formula object class formula can used survival::coxph. Must consist arm endpoint data. covariate allowed. Stratification variables supported can added using strata(...). placebo character. Name placebo arm. treatments character vector. Name treatment arms used comparison. milestones character vector. Names triggered milestones either adaptation applied statistical testing endpoint performed. Milestones milestones need sorted triggering time. alternative character string specifying alternative hypothesis, must one \"greater\" \"less\". default value. \"greater\" means superiority treatment placebo established hazard ratio greater 1 log-rank test used. planned_info data frame planned number events time--event endpoint stage arm. Milestone names, .e., milestones row names planned_info, arm names, .e., c(placebo, treatments) column names. Note accumulative stage-wise event numbers. usually easy determine numbers practice, simulation may used get estimates. Note: planned_info can also character \"default\" planned_info set number newly randomized patients control arm stages. assumes event rate change time /sample ratio placebo treatment arm change well, may true. purpose debugging rapid implementation . Using simulation pick planned_info recommended formal simulation study. Another issue planned_info set \"default\" possible patient recruitment done specific stage, result, planned_info zero can crash program. ... subset condition compatible dplyr::filter. survdiff fitted subset compute one-sided logrank statistics. useful comparison made subset treatment arms. default specified, data (placebo plus one treatment arm time) locked data used fit model.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class of Trial — Trials","text":"function computes stage-wise p-values intersection hypotheses based Dunnett test. one treatment arm present, equivalent compute stage-wise p-values elemental hypotheses. function also computes inverse normal combination test statistics stages. choice planned_info can affect calculation stage-wise p-values. Specifically, used compute columns observed_info p_inverse_normal returned data frame, used Trial$closedTest(). choice planned_info can affect result Trial$closedTest() user chose caution. Note Trial$closedTest(), observed_info, derived planned_info, lead closed testing results constant. closed test uses information fraction observed_info/sum(observed_info). result, setting planned_info , e.g., 10 * planned_info give closed test results. Based numerical study, setting planned_info = \"default\" leads much higher power (roughly 10%) setting planned_info median event numbers stages, can determined simulation. sure regulator support practice. example, milestone (e.g., interim analysis) triggered pre-specified calendar time, number randomized patients random unknown planning trial. understand correctly, regulator may want information fraction closed test (combined Dunnett test) pre-fixed. addition, choice planned_info assumes event rates change time obviously true. recommended always use pre-fixed planned_info restrict control family-wise error rate. pointed choice pre-fixed planned_info can affect statistical power significantly fine-tuning may required.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Class of Trial — Trials","text":"list element names like arm_name, arm1_name|arm2_name, arm1_name|arm2_name|arm3_name, etc., .e., possible combination treatment arms comparison. element data frame, column names self-explained. Specifically, columns p_inverse_normal, observed_info, is_final can used GroupSequentialTest perform significance test.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of Trial — Trials","text":"","code":"\\dontrun{ trial$dunnettTest('pfs', 'pbo', c('high dose', 'low dose'),                   listener$get_milestone_names(), 'default') }"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-closedtest-","dir":"Reference","previous_headings":"","what":"Method closedTest()","title":"Class of Trial — Trials","text":"perform closed test based Dunnett test","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-48","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$closedTest(   dunnett_test,   treatments,   milestones,   alpha,   alpha_spending = c(\"asP\", \"asOF\") )"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-31","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"dunnett_test object returned Trial$dunnettTest(). treatments character vector. Name treatment arms used comparison. milestones character vector. Names triggered milestones significance testing endpoint performed closed test. Milestones milestones need sorted triggering time. alpha numeric. Allocated alpha. alpha_spending alpha spending function. can \"asP\" \"asOF\". Note theoretically can \"asUser\", tested. may supported future.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Class of Trial — Trials","text":"data frame columns arm, decision (final decision hypothesis end trial, \"accept\" \"reject\"), milestone_at_reject, reject_time. hypothesis accepted end trial, milestone_at_reject NA, reject_time Inf. Note hypothesis tested multiple milestones, final decision \"accept\" accepted least one milestone. decision \"reject\" hypothesis rejected milestones.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of Trial — Trials","text":"","code":"\\dontrun{ dt <- trial$dunnettTest(   Surv(pfs, pfs_event) ~ arm,   placebo = 'pbo',   treatments = c('high dose', 'low dose'),   milestones = c('dose selection', 'interim', 'final'),   data.frame(pbo = c(100, 160, 80),              low = c(100, 160, 80),              high = c(100, 160, 80),              row.names = c('dose selection', 'interim', 'final'))  trial$closedTest(dt, treatments = c('high dose', 'low dose'),                  milestones = c('interim', 'final'),                  alpha = 0.025, alpha_spending = 'asOF') }"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-seed-","dir":"Reference","previous_headings":"","what":"Method get_seed()","title":"Class of Trial — Trials","text":"return random seed","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-49","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_seed()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Class of Trial — Trials","text":"print trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-50","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$print()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-snapshot-copy-","dir":"Reference","previous_headings":"","what":"Method get_snapshot_copy()","title":"Class of Trial — Trials","text":"return snapshot trial executed.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-51","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_snapshot_copy()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-make-snapshot-","dir":"Reference","previous_headings":"","what":"Method make_snapshot()","title":"Class of Trial — Trials","text":"make snapshot running trial. can useful resetting trial. called initializing `Trial` object, arms added yet.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-52","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$make_snapshot()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-make-arms-snapshot-","dir":"Reference","previous_headings":"","what":"Method make_arms_snapshot()","title":"Class of Trial — Trials","text":"make snapshot arms","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-53","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$make_arms_snapshot()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-reset-","dir":"Reference","previous_headings":"","what":"Method reset()","title":"Class of Trial — Trials","text":"reset trial snapshot taken executed. Seed reassigned new one. Enrollment time re-generated. trial already arms function called, added back recruit patients .","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-54","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$reset()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-set-arm-added-time-","dir":"Reference","previous_headings":"","what":"Method set_arm_added_time()","title":"Class of Trial — Trials","text":"save time arm added trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-55","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$set_arm_added_time(arm, time)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-32","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"arm name added arm. time time arm added.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-arm-added-time-","dir":"Reference","previous_headings":"","what":"Method get_arm_added_time()","title":"Class of Trial — Trials","text":"get time arm added trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-56","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_arm_added_time(arm)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-33","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"arm arm name.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-set-arm-removal-time-","dir":"Reference","previous_headings":"","what":"Method set_arm_removal_time()","title":"Class of Trial — Trials","text":"save time arm removed trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-57","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$set_arm_removal_time(arm, time)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-34","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"arm name removed arm. time time arm removed.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-get-arm-removal-time-","dir":"Reference","previous_headings":"","what":"Method get_arm_removal_time()","title":"Class of Trial — Trials","text":"get time arm removed trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-58","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$get_arm_removal_time(arm)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-35","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"arm arm name.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class of Trial — Trials","text":"objects class cloneable method.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"usage-59","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trials","text":"","code":"Trials$clone(deep = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trials.html","id":"arguments-36","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trials","text":"deep Whether make deep clone.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/reference/arm.html","id":null,"dir":"Reference","previous_headings":"","what":"Define an Arm — arm","title":"Define an Arm — arm","text":"Define arm trial. user-friendly wrapper class constructor Arm$new. Users familiar concept classes may consider using wrapper directly.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/arm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define an Arm — arm","text":"","code":"arm(name, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/arm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define an Arm — arm","text":"name name arm, arm's label generated data ... subset condition compatible dplyr::filter. can used specify inclusion criteria arm. default specified, .e. data generated generator specified ....","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/arm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define an Arm — arm","text":"","code":"risk <- data.frame(   end_time = c(1, 10, 26.0, 52.0),   piecewise_risk = c(1, 1.01, 0.381, 0.150) * exp(-3.01) )  pfs <- endpoint(name = 'pfs', type='tte', generator = PiecewiseConstantExponentialRNG, risk = risk, endpoint_name = 'pfs')  orr <- endpoint(   name = 'orr', type = 'non-tte',   readout = c(orr = 2), generator = rbinom,   size = 1, prob = .4)  placebo <- arm(name = 'pbo')  placebo$add_endpoints(pfs, orr) placebo #>  ⚕⚕ Arm Name:  pbo   #>  ⚕⚕ # of Endpoints:  2   #>  ⚕⚕ Registered Endpoints:  pfs, orr   #> Summary generated. head(placebo$get_endpoints()[[1]]$get_generator()(n = 1e3)) #>          pfs pfs_event #> 1 16.4354271         1 #> 2  0.7869123         1 #> 3  2.6020352         1 #> 4 15.2175440         1 #> 5 52.0000000         0 #> 6  2.8633132         1 placebo$get_endpoints()[[2]]$get_name() #> [1] \"orr\"  ## print summary reports for endpoint objects in console # placebo"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/calendarTime.html","id":null,"dir":"Reference","previous_headings":"","what":"Triggering condition by calendar time — calendarTime","title":"Triggering condition by calendar time — calendarTime","text":"Define condition trigger trial milestone calendar time. milestone trigger trial running least specified duration. can used combined conditions specified enrollment eventNumber.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/calendarTime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Triggering condition by calendar time — calendarTime","text":"","code":"calendarTime(time)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/calendarTime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Triggering condition by calendar time — calendarTime","text":"time numeric. Calendar time trigger milestone trial.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/calendarTime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Triggering condition by calendar time — calendarTime","text":"object class `Condition`","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/controller.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Controller — controller","title":"Define a Controller — controller","text":"Define controller trial. user-friendly wrapper class constructor Controller$new. Users familiar concept classes may consider using wrapper directly.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/controller.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Controller — controller","text":"","code":"controller(trial, listener)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/controller.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Controller — controller","text":"trial Trial object. listener Listener object.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/controller.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a Controller — controller","text":"","code":"# a minimum, meaningful, and executable example, # where a randomized trial with two arms is simulated and analyzed.  control <- arm(name = 'control arm') active <- arm(name = 'active arm')  pfs_in_control <- endpoint(name = 'PFS', type = 'tte', generator = rexp, rate = log(2) / 5) control$add_endpoints(pfs_in_control)  pfs_in_active <- endpoint(name = 'PFS', type = 'tte', generator = rexp, rate = log(2) / 6) active$add_endpoints(pfs_in_active)  accrual_rate <- data.frame(end_time = c(10, Inf), piecewise_rate = c(30, 50)) trial <- trial(name = 'trial',                n_patients = 1000,                duration = 40,                enroller = StaggeredRecruiter,                accrual_rate = accrual_rate,                dropout = rweibull, shape = 2, scale = 38) #> Seed is not specified. TrialSimulator sets it to 1830226262  trial$add_arms(sample_ratio = c(1, 1), control, active) #> Arm(s) <control arm, active arm> are added to the trial.  #> Randomization is done for 1000 potential patients.  #> Data of 1000 potential patients are generated for the trial with 2 arm(s) <control arm, active arm>.   action_at_final <- function(trial, milestone_name){   locked_data <- trial$get_locked_data(milestone_name)   fitLogrank(Surv(PFS, PFS_event) ~ arm, placebo = 'control arm',              data = locked_data, alternative = 'less')   invisible(NULL) }  final <- milestone(name = 'final analysis',                    action = action_at_final,                    when = calendarTime(time = 40))  listener <- listener() listener$add_milestones(final) #> A milestone <final analysis> is registered.   controller <- controller(trial, listener) controller$run(n = 1) #> Condition of milestone <final analysis> is being checked.  #> Data is locked at time = 40 for milestone <final analysis>. #> Locked data can be accessed in Trial$get_locked_data('final analysis').  #> Number of events at lock time:  #>   patient PFS         arms #> 1    1000 709 c(500, 3.... #>"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/default_action.html","id":null,"dir":"Reference","previous_headings":"","what":"default action function for dry run of a trial — default_action","title":"default action function for dry run of a trial — default_action","text":"default action function dry run trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/default_action.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"default action function for dry run of a trial — default_action","text":"","code":"default_action()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/doNothing.html","id":null,"dir":"Reference","previous_headings":"","what":"An action function that does nothing — doNothing","title":"An action function that does nothing — doNothing","text":"action function nothing corresponding milestone triggered. listener monitoring trial determining time trigger milestone, data automatically locked necessary data manipulation executed. users intent modify trial adaptively milestone, e.g., adding (Trial$add_arms()) removing (Trial$remove_arms()) arm(s), changing sampling ratio(s) (Trial$update_sample_ratio()), modifying trial duration, carrying statistical testing, saving intermediate results (Trial$save()), function can used set argument action creating new milestone.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/doNothing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An action function that does nothing — doNothing","text":"","code":"doNothing(trial, milestone_name)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/doNothing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An action function that does nothing — doNothing","text":"trial Trial object. milestone_name character. Name milestone triggered.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/doNothing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An action function that does nothing — doNothing","text":"function returns NULL. Actually, nothing done function.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/endpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Define endpoints — endpoint","title":"Define endpoints — endpoint","text":"Define one multiple endpoints. user-friendly wrapper class constructor Endpoint$new. Users familiar concept classes may consider using wrapper directly. wrapper ","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/endpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define endpoints — endpoint","text":"","code":"endpoint(name, type = c(\"tte\", \"non-tte\"), readout = NULL, generator, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/endpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define endpoints — endpoint","text":"name character vector. Name(s) endpoint(s) type character vector. Type(s) endpoint(s). supports \"tte\" time--event endpoints, \"non-tte\" types endpoints (e.g., continous, binary, categorical, repeated measurement. TrialSimulator verification endpoint type \"tte\". However, special manipulation done non-tte endpoints. readout numeric vector name non-tte endpoint(s). readout specified every non-tte endpoint. example, c(endpoint1 = 6, endpoint2 = 3).  endpoints tte, readout can NULL. generator RNG function. first argument must `n`, number patients. must return data frame `n` rows. support built-random number generators stats, e.g., stats::rnorm, stats::rexp, etc. n argument number observations. generator custom functions long (1) first argument n; (2) returns vector length n data frame n rows. Custom random number generator can return data one endpoint. useful users need simulate correlated endpoints. column names returned data frame match name exactly. endpoint type \"tte\", custom generator also return column event indicator. example, \"pfs\" \"tte\", custom generator return least two columns \"pfs\" \"pfs_event\". Usually pfs_event can 1s censoring. Censoring can specified later defining Trial argument dropout. See ?Trial. Note covariates, e.g., biomarker, subgroup, needed generating analyzing trial data, can defined Endpoint well. ... optional arguments generator.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/endpoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define endpoints — endpoint","text":"","code":"set.seed(12345) ## Example 1. Generate a time-to-event endpoint. ## Two columns are returned, one for time, one for event (1/0, 0 for ## A built-in RNG function is used to handle piecewise constant exponential ## distribution risk <- data.frame(   end_time = c(1, 10, 26.0, 52.0),   piecewise_risk = c(1, 1.01, 0.381, 0.150) * exp(-3.01) )  pfs <- endpoint(name = 'pfs', type='tte', generator = PiecewiseConstantExponentialRNG, risk = risk, endpoint_name = 'pfs') pfs$get_generator() #> generator : #> $risk #>   end_time piecewise_risk #> 1        1    0.049291679 #> 2       10    0.049784596 #> 3       26    0.018780130 #> 4       52    0.007393752 #>  #> $endpoint_name #> [1] \"pfs\" #>   ## Example 2. Generate continuous and binary endpoints using R's built-in ## RNG functions, e.g. rnorm, rexp, rbinom, etc. ep1 <- endpoint(          name = 'cd4', type = 'non-tte', generator = rnorm, readout = c(cd4=1),          mean = 1.2) ep2 <- endpoint(          name = 'resp_time', type = 'non-tte', generator = rexp, readout = c(resp_time=0),          rate = 4.5) ep3 <- endpoint(          name = 'orr', type = 'non-tte', readout = c(orr=3), generator = rbinom,          size = 1, prob = .4)  mean(ep1$get_generator()(1e4)[, 1]) # compared to 1.2 #> [1] 1.199141 sd(ep1$get_generator()(1e4)[, 1]) # compared to 1.0 #> [1] 0.9865558  log(2) / median(ep2$get_generator()(1e4)[, 1]) # compared to 4.5 #> [1] 4.554779  mean(ep3$get_generator()(1e4)[, 1]) # compared to 0.4 #> [1] 0.3961  ## print summary reports for endpoint objects in console # ep1 # ep2 # ep3  ## An example of piecewise constant exponential random number generator ## Baseline hazards are piecewise constant ## Hazard ratios are piecewise constant, resulting a delayed effect.  run <- TRUE  if (!requireNamespace(\"survminer\", quietly = TRUE)) {   run <- FALSE   message(\"Please install 'survminer' to run this example.\") }  if (!requireNamespace(\"survival\", quietly = TRUE)) {   run <- FALSE   message(\"Please install 'survival' to run this example.\") }  if(run){ risk1 <- risk ep1 <- endpoint(   name = 'pfs', type='tte',   generator = PiecewiseConstantExponentialRNG,   risk=risk1, endpoint_name = 'pfs')  risk2 <- risk1 risk2$hazard_ratio <- c(1, 1, .6, .4) ep2 <- endpoint(   name = 'pfs', type='tte',   generator = PiecewiseConstantExponentialRNG,   risk=risk2, endpoint_name = 'pfs')  n <- 1000 tte <- rbind(ep1$get_generator()(n), ep2$get_generator()(n)) arm <- rep(0:1, each = n) dat <- data.frame(tte, arm) sfit <- survival::survfit(   survival::Surv(time = pfs, event = pfs_event) ~ arm, dat)  survminer::ggsurvplot(sfit,            data = dat,            pval = TRUE,  # Show p-value            conf.int = TRUE,  # Show confidence intervals            risk.table = TRUE,  # Add risk table            palette = c(\"blue\", \"red\"))  ## print summary reports for endpoint objects in console # ep1 # ep2  }"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/enrollment.html","id":null,"dir":"Reference","previous_headings":"","what":"Triggering condition by number of randomized patients — enrollment","title":"Triggering condition by number of randomized patients — enrollment","text":"Define condition trigger trial milestone number randomized patients. milestone trigger trial enrolled least specified number patients. can used combined conditions specified calendarTime eventNumber.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/enrollment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Triggering condition by number of randomized patients — enrollment","text":"","code":"enrollment(n, ..., arms = NULL)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/enrollment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Triggering condition by number of randomized patients — enrollment","text":"n integer. Number randomized patients. ... subset conditions compatible dplyr::filter. Number randomized patients counted subset trial data . arms vector character. Name arms number patients counted. NULL, use arms yet removed trial time calculation.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/enrollment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Triggering condition by number of randomized patients — enrollment","text":"object class `Condition`","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/eventNumber.html","id":null,"dir":"Reference","previous_headings":"","what":"Triggering condition by number of events or observations of an endpoint — eventNumber","title":"Triggering condition by number of events or observations of an endpoint — eventNumber","text":"Define condition trigger trial milestone number events time--event endpoint number non-missing observations non-time--event endpoint. milestone triggered trial observed least specified number endpoint events (non-missing observations). can used combined conditions specified calendarTime enrollment. Number events time--event endpoint can vary different milestones patients randomized trial, events onset time. Number non-missing observations non-time--event endpoint can vary different milestones patients randomized trial, patients treated readout time (thus, NA turns value).","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/eventNumber.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Triggering condition by number of events or observations of an endpoint — eventNumber","text":"","code":"eventNumber(endpoint, n, ..., arms = NULL)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/eventNumber.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Triggering condition by number of events or observations of an endpoint — eventNumber","text":"endpoint character. Name endpoint. n integer. Targeted number events. ... subset conditions compatible dplyr::filter. Number events counted subset trial data . arms vector character. Name arms number events counted. NULL, use arms yet removed trial time calculation.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/eventNumber.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Triggering condition by number of events or observations of an endpoint — eventNumber","text":"object class `Condition`","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitCoxph.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Cox proportional hazard ratio model — fitCoxph","title":"Fit Cox proportional hazard ratio model — fitCoxph","text":"Fit Cox proportional hazards model time--event endpoint.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitCoxph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Cox proportional hazard ratio model — fitCoxph","text":"","code":"fitCoxph(formula, placebo, data, alternative, scale, ..., tidy = TRUE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitCoxph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Cox proportional hazard ratio model — fitCoxph","text":"formula object class formula can used survival::coxph. Must consist arm endpoint data. Covariates can adjusted. Interactions arm covariates allowed formula, arm must term main effect, estimate main effect tested. placebo Character. String indicating placebo data$arm. data Data frame. Usually locked data set. alternative character string specifying alternative hypothesis, must one \"greater\" \"less\". default value. \"greater\" means superiority treatment placebo established hazard ratio greater 1. scale character. type estimate output. Must one \"log hazard ratio\" \"hazard ratio\". default value. ... Subset conditions compatible dplyr::filter. coxph fitted subset . argument can useful create subset data analysis trial consists two arms. default, specified, data used fit model. one condition can specified ..., e.g., fitCoxph(formula, 'pbo', data, 'less', 'log hazard ratio', arm %% c('pbo', 'low dose'), pfs > 0.5), equivalent : fitCoxph(formula, 'pbo', data, 'less', 'log hazard ratio', arm %% c('pbo', 'low dose') & pfs > 0.5). tidy logical. FALSE information returned. Default TRUE.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitCoxph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Cox proportional hazard ratio model — fitCoxph","text":"data frame three columns: arm name treatment arm. placebo name placebo arm. estimate estimate main effect arm, depending scale. p one-sided p-value log hazard ratio (treated vs placebo). info number events endpoint subset. z z statistics log hazard ratios.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitFarringtonManning.html","id":null,"dir":"Reference","previous_headings":"","what":"Farrington-Manning test for rate difference — fitFarringtonManning","title":"Farrington-Manning test for rate difference — fitFarringtonManning","text":"Test rate difference comparing pre-specified value using Farrington-Manning test","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitFarringtonManning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Farrington-Manning test for rate difference — fitFarringtonManning","text":"","code":"fitFarringtonManning(endpoint, placebo, data, alternative, delta = 0, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitFarringtonManning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Farrington-Manning test for rate difference — fitFarringtonManning","text":"endpoint Character. Name endpoint data. placebo Character. String indicating placebo data$arm. data Data frame. Usually locked data set. alternative character string specifying alternative hypothesis, must one \"greater\" \"less\". default value. \"greater\" means superiority treatment placebo established rate difference greater `delta`. delta rate difference treatment arm placebo null. ... Subset conditions compatible dplyr::filter. glm fitted subset . argument can useful create subset data analysis trial consists two arms. default, specified, data used fit model. one condition can specified ..., e.g., fitFarringtonManning('remission', 'pbo', data, delta, arm %% c('pbo', 'low dose'), cfb > 0.5), equivalent : fitFarringtonManning('remission', 'pbo', data, delta, arm %% c('pbo', 'low dose') & cfb > 0.5). Note one treatment arm present data applying filter ..., models fitted placebo verse treatment arms.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitFarringtonManning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Farrington-Manning test for rate difference — fitFarringtonManning","text":"data frame three columns: p one-sided p-value log odds ratio (treated vs placebo). info sample size subset NA removed. z z statistics log odds ratio (treated vs placebo).","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitFarringtonManning.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Farrington-Manning test for rate difference — fitFarringtonManning","text":"Farrington, Conor P., Godfrey Manning. \"Test statistics sample size formulae comparative binomial trials null hypothesis non-zero risk difference non-unity relative risk.\" Statistics medicine 9.12 (1990): 1447-1454.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit linear regression model — fitLinear","title":"Fit linear regression model — fitLinear","text":"Fit linear regression model continuous endpoint.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit linear regression model — fitLinear","text":"","code":"fitLinear(formula, placebo, data, alternative, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitLinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit linear regression model — fitLinear","text":"formula object class formula. Must include arm endpoint data. Covariates can adjusted. placebo Character. String indicating placebo arm data$arm. data Data frame. Usually locked data set. alternative character string specifying alternative hypothesis, must one \"greater\" \"less\". default value. \"greater\" means superiority treatment placebo established greater mean treated arm. ... Subset conditions compatible dplyr::filter. glm fitted subset . argument can useful create subset data analysis trial consists two arms. default, specified, data used fit model. one condition can specified ..., e.g., fitLinear(cfb ~ arm, 'pbo', data, 'greater', arm %% c('pbo', 'low dose'), cfb > 0.5), equivalent : fitLinear(cfb ~ arm, 'pbo', data, 'greater', arm %% c('pbo', 'low dose') & cfb > 0.5). Note one treatment arm present data applying filter ..., models fitted placebo verse treatment arms.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitLinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit linear regression model — fitLinear","text":"data frame columns: arm name treatment arm. placebo name placebo arm. estimate estimate average treatment effect arm. p one-sided p-value -arm difference (treated vs placebo). info sample size used model NA removed. z z statistics -arm difference (treated vs placebo).","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitLogistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit logistic regression model — fitLogistic","title":"Fit logistic regression model — fitLogistic","text":"Fit logistic regression model binary endpoint.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitLogistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit logistic regression model — fitLogistic","text":"","code":"fitLogistic(formula, placebo, data, alternative, scale, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitLogistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit logistic regression model — fitLogistic","text":"formula object class formula. Must include arm endpoint data. Covariates can adjusted. placebo Character. String indicating placebo data$arm. data Data frame. Usually locked data set. alternative character string specifying alternative hypothesis, must one \"greater\" \"less\". default value. \"greater\" means superiority treatment placebo established odds ratio greater 1. scale character. type estimate output. Must one \"coefficient\", \"log odds ratio\", \"odds ratio\", \"risk ratio\", \"risk difference\". default value. ... Subset conditions compatible dplyr::filter. glm fitted subset . argument can useful create subset data analysis trial consists two arms. default, specified, data used fit model. one condition can specified ..., e.g., fitLogistic(remission ~ arm, 'pbo', data, 'greater', 'odds ratio', arm %% c('pbo', 'low dose'), cfb > 0.5), equivalent : fitLogistic(remission ~ arm, 'pbo', data, 'greater', 'odds ratio', arm %% c('pbo', 'low dose') & cfb > 0.5). Note one treatment arm present data applying filter ..., models fitted placebo verse treatment arms.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitLogistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit logistic regression model — fitLogistic","text":"data frame columns: arm name treatment arm. placebo name placebo arm. estimate estimate depending scale. p one-sided p-value log odds ratio (treated vs placebo). info sample size used model NA removed. z z statistics log odds ratio (treated vs placebo).","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitLogrank.html","id":null,"dir":"Reference","previous_headings":"","what":"Carry out log rank test — fitLogrank","title":"Carry out log rank test — fitLogrank","text":"Compute log rank test statistic endpoint.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitLogrank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Carry out log rank test — fitLogrank","text":"","code":"fitLogrank(formula, placebo, data, alternative, ..., tidy = TRUE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitLogrank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Carry out log rank test — fitLogrank","text":"formula object class formula can used survival::coxph. Must consist arm endpoint data. covariate allowed. Stratification variables supported can added using strata(...). placebo character. String placebo data$arm. data data frame. Usually locked data. alternative character string specifying alternative hypothesis, must one \"greater\" \"less\". default value. \"greater\" means superiority treatment placebo established hazard ratio greater 1. ... subset condition compatible dplyr::filter. survival::coxph ties = \"exact\" fitted subset . argument useful create subset data analysis trial consists two arms. default specified, data used fit model. one conditions can specified ..., e.g., fitLogrank(formula, data, arm %% c('pbo', 'low dose'), pfs > 0.5), equivalent fitLogrank(formula, data, arm %% c('pbo', 'low dose') & pfs > 0.5). tidy logical. FALSE information returned. Default TRUE.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitLogrank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Carry out log rank test — fitLogrank","text":"data frame three columns: arm name treatment arm. placebo name placebo arm. p one-sided p-value log-rank test (treated vs placebo). info number events endpoint subset. z z statistics log hazard ratios.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/getAdaptiveDesignOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Get simulation output in the vignette adaptiveDesign.Rmd — getAdaptiveDesignOutput","title":"Get simulation output in the vignette adaptiveDesign.Rmd — getAdaptiveDesignOutput","text":"Internal function retrieves precomputed simulation results. meant use package users.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/getAdaptiveDesignOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get simulation output in the vignette adaptiveDesign.Rmd — getAdaptiveDesignOutput","text":"","code":"getAdaptiveDesignOutput()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/getAdaptiveDesignOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get simulation output in the vignette adaptiveDesign.Rmd — getAdaptiveDesignOutput","text":"data frame containing simulation results 1000 replicates.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/listener.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Listener — listener","title":"Define a Listener — listener","text":"Define listener. user-friendly wrapper class constructor Listener$new. Users familiar concept classes may consider using wrapper directly.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/listener.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Listener — listener","text":"","code":"listener(silent = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/listener.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Listener — listener","text":"silent logical. TRUE mute messages.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/listener.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a Listener — listener","text":"","code":"listener <- listener()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/milestone.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Milestone of a Trial — milestone","title":"Define a Milestone of a Trial — milestone","text":"Define milestone trial. user-friendly wrapper class constructor Milestones$new. Users familiar concept classes may consider using wrapper directly.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/milestone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Milestone of a Trial — milestone","text":"","code":"milestone(name, when, action = doNothing)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/milestone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Milestone of a Trial — milestone","text":"name character. Name milestone. condition check milestone triggered. action function execute milestone triggers. action executed simply need record triggering time milestone, action can default value, built-function doNothing.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/rconst.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate constant variable — rconst","title":"Generate constant variable — rconst","text":"random number generator returning constant. can used set dropout time. Currently default value dropout time, `value = Inf`.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/rconst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate constant variable — rconst","text":"","code":"rconst(n, value)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/rconst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate constant variable — rconst","text":"n integer. Number observations. value value constant observations.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/solveMixtureExponentialDistribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve parameters in a mixture exponential distribution — solveMixtureExponentialDistribution","title":"Solve parameters in a mixture exponential distribution — solveMixtureExponentialDistribution","text":"Assume overall population mixture two exponential distributions medians median1 (\\(m_1\\)) median2 (\\(m_2\\)). Given proportion first component (\\(p_1\\)) overall median \\(m\\), $$p_1 (1 - e^{-\\log(2)m/m_1}) + (1 - p_1) (1 - e^{-\\log(2)m/m_2}) = 1/2$$ function computes \\(m_2\\) \\(m\\) given \\(p_1\\) \\(m_1\\).","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/solveMixtureExponentialDistribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve parameters in a mixture exponential distribution — solveMixtureExponentialDistribution","text":"","code":"solveMixtureExponentialDistribution(   weight1,   median1,   median2 = NULL,   overall_median = NULL )"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/solveMixtureExponentialDistribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve parameters in a mixture exponential distribution — solveMixtureExponentialDistribution","text":"weight1 numeric. proportion first component. median1 numeric. Median first component. median2 numeric. Median second component. NULL, overall_median must specified, function calculate return median2. overall_median numeric. Median overall population. NULL, median2 must specified, function calculate return overall_median.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/solveMixtureExponentialDistribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solve parameters in a mixture exponential distribution — solveMixtureExponentialDistribution","text":"named vector median2 overall_median.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/solveMixtureExponentialDistribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Solve parameters in a mixture exponential distribution — solveMixtureExponentialDistribution","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  median2 <-   solveMixtureExponentialDistribution(     weight1 = .3,     median1 = 10,     overall_median = 8)  median2 #>  median2  #> 7.305935   n <- 1e6 ifelse(   runif(n) < .3,   rexp(n, rate=log(2)/10),   rexp(n, rate=log(2)/median2)) %>%   median() ## should be close to 8 #> [1] 8.010029  overall_median <-   solveMixtureExponentialDistribution(     weight1 = .4,     median1 = 12,     median2 = 4)  overall_median #> overall_median  #>        5.90597   ifelse(   runif(n) < .4,   rexp(n, rate=log(2)/12),   rexp(n, rate=log(2)/4)) %>%   median() ## should be close to overall_median #> [1] 5.901173"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/summarizeDataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize A Data Frame — summarizeDataFrame","title":"Summarize A Data Frame — summarizeDataFrame","text":"minimum alternative summarytools::dfSummary avoid package dependency.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/summarizeDataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize A Data Frame — summarizeDataFrame","text":"","code":"summarizeDataFrame(   data,   exclude_vars = NULL,   tte_vars = NULL,   event_vars = NULL,   categorical_vars = NULL )"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/summarizeDataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize A Data Frame — summarizeDataFrame","text":"data data frame. exclude_vars columns excluded summary. tte_vars character. Vector time--event variables. event_vars character. Vector event indicators. Every time--event variable corresponding event indicator. categorical_vars character. Vector categorical variables. can used specify variables limited distinct values categorical variables summary.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/summarizeDataFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize A Data Frame — summarizeDataFrame","text":"data frame summary","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/summarizeDataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize A Data Frame — summarizeDataFrame","text":"","code":"set.seed(123)  n <- 1000 data <- data.frame(   age = rnorm(n, 65, 10),   gender = sample(c('M', 'F', NA), n, replace = TRUE, prob = c(.4, .4, .2)),   time_to_death = rexp(n, .01),   death = rbinom(n, 1, .6),   type = sample(LETTERS[1:8], n, replace = TRUE) )  summarizeDataFrame(data, tte_vars = 'time_to_death', event_vars = 'death') #> Summary generated."},{"path":"https://zhangh12.github.io/TrialSimulator/reference/trial.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Trial — trial","title":"Define a Trial — trial","text":"Define trial. user-friendly wrapper class constructor Trial$new. Users familiar concept classes may consider using wrapper directly.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/trial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Trial — trial","text":"","code":"trial(   name,   n_patients,   duration,   description = name,   seed = NULL,   enroller,   dropout = NULL,   silent = FALSE,   ... )"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/trial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Trial — trial","text":"name character. Name trial. n_patients integer. Maximum number patients enrolled trial. duration Numeric. Trial duration. description character. Optional description trial. default set trial's name. seed random seed. NULL, set.seed() called, uses seed set outside. enroller function returning vector enrollment time patients. first argument number enrolled patients. dropout function returning vector dropout time patients. first argument number enrolled patients. silent logical. TRUE mute messages. ... arguments enroller dropout.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/trial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a Trial — trial","text":"","code":"risk1 <- data.frame(   end_time = c(1, 10, 26.0, 52.0),   piecewise_risk = c(1, 1.01, 0.381, 0.150) * exp(-3.01) )  pfs1 <- endpoint(name = 'pfs', type='tte',           generator = PiecewiseConstantExponentialRNG,           risk = risk1, endpoint_name = 'pfs')  orr1 <- endpoint(   name = 'orr', type = 'non-tte',   readout = c(orr=1), generator = rbinom,   size = 1, prob = .4)  placebo <- arm(name = 'pbo')  placebo$add_endpoints(pfs1, orr1)  risk2 <- risk1 risk2$hazard_ratio <- .8  pfs2 <- endpoint(name = 'pfs', type='tte',           generator = PiecewiseConstantExponentialRNG,           risk = risk2, endpoint_name = 'pfs')  orr2 <- endpoint(   name = 'orr', type = 'non-tte',   generator = rbinom, readout = c(orr=3),   size = 1, prob = .6)  active <- arm(name = 'ac')  active$add_endpoints(pfs2, orr2)  ## Plan a trial, Trial-3415, of up to 100 patients. ## Enrollment time follows an exponential distribution, with median 5 trial <- trial(   name = 'Trial-3415', n_patients = 100,   seed = 31415926, duration = 100,   enroller = rexp, rate = log(2) / 5) trial$add_arms(sample_ratio = c(1, 2), placebo, active) #> Arm(s) <pbo, ac> are added to the trial.  #> Randomization is done for 100 potential patients.  #> Data of 100 potential patients are generated for the trial with 2 arm(s) <pbo, ac>.   trial #>  ⚕⚕ Trial Name:  Trial-3415   #>  ⚕⚕ Description:  Trial-3415   #>  ⚕⚕ # of Arms:  2   #>  ⚕⚕ Registered Arms:  pbo, ac   #>  ⚕⚕ Sample Ratio:  1, 2   #>  ⚕⚕ # of Patients:  100   #>  ⚕⚕ Planned Duration:  100   #>  ⚕⚕ Random Seed:  31415926"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/weibullDropout.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Parameters of Weibull Distribution as a Dropout Method — weibullDropout","title":"Calculate Parameters of Weibull Distribution as a Dropout Method — weibullDropout","text":"Fit scale shape parameters Weibull distribution match dropout rates two specified time points.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/weibullDropout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Parameters of Weibull Distribution as a Dropout Method — weibullDropout","text":"","code":"weibullDropout(time, dropout_rate)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/weibullDropout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Parameters of Weibull Distribution as a Dropout Method — weibullDropout","text":"time numeric vector two time points dropout rates specified. dropout_rate numeric vector dropout rates time.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/weibullDropout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Parameters of Weibull Distribution as a Dropout Method — weibullDropout","text":"named vector scale shape parameters.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-feature-0-90-0","dir":"Changelog","previous_headings":"","what":"New Feature","title":"TrialSimulator 0.90.0","text":"Save event counts per arm simulation output. long stop program planned patients already randomized trial calling function enroll_patients. useful milestone triggered patients recruited.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fix-0-90-0","dir":"Changelog","previous_headings":"","what":"Bug Fix","title":"TrialSimulator 0.90.0","text":"Fix bug affects functions   patient recruitment completed fast thus sample increment milestones. bug can substantially reduce testing powers.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-feature-0-89-0","dir":"Changelog","previous_headings":"","what":"New Feature","title":"TrialSimulator 0.89.0","text":"Support ... eventNumber count event subset trial data. useful enrichment design milestone defined based biomarker.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-feature-0-88-0","dir":"Changelog","previous_headings":"","what":"New Feature","title":"TrialSimulator 0.88.0","text":"Add function get alias get_custom_data Trials class.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fix-0-88-0","dir":"Changelog","previous_headings":"","what":"Bug Fix","title":"TrialSimulator 0.88.0","text":"Fix bug results returned controller error triggered.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"update-0-88-0","dir":"Changelog","previous_headings":"","what":"Update","title":"TrialSimulator 0.88.0","text":"Print informative message trial$dunnettTest(..., planned_info = \"default\") triggers error.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fix-0-87-0","dir":"Changelog","previous_headings":"","what":"Bug Fix","title":"TrialSimulator 0.87.0","text":"Revise Trials$dunnettTest compatible one-sided logrank test.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fix-0-86-0","dir":"Changelog","previous_headings":"","what":"Bug Fix","title":"TrialSimulator 0.86.0","text":"Fix bug fourth-state model.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-feature-0-85-0","dir":"Changelog","previous_headings":"","what":"New Feature","title":"TrialSimulator 0.85.0","text":"Add data generators time response, progression death.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-feature-0-84-0","dir":"Changelog","previous_headings":"","what":"New Feature","title":"TrialSimulator 0.84.0","text":"function fitLogrank now supports formula. strata(...) can formula. covariate accepted. Add unit tests fitLogistic.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-feature-0-83-0","dir":"Changelog","previous_headings":"","what":"New Feature","title":"TrialSimulator 0.83.0","text":"function fitLogistic now supports scale = \"coefficient\" compute regression coefficient main effect arm presence covariates. also equivalent scale = \"log odds ratio\" absence covariates. Add unit tests fitLogistic.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-feature-0-82-0","dir":"Changelog","previous_headings":"","what":"New Feature","title":"TrialSimulator 0.82.0","text":"function fitCoxph now supports formula compute log hazard ratio hazard ratio main effect arm. detect whether arm’s main effect specified formula. allows covariates interaction covariates arm. However, main effect arm tested returned. Add unit tests fitCoxph.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-feature-0-81-0","dir":"Changelog","previous_headings":"","what":"New Feature","title":"TrialSimulator 0.81.0","text":"function fitLogistic now supports computing log odds ratio, odds ratio, risk ratio, risk difference using emmeans contrast, presence covariates. Add unit tests fitLogistic fitLinear.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-feature-0-80-0","dir":"Changelog","previous_headings":"","what":"New Feature","title":"TrialSimulator 0.80.0","text":"function fitLogistic now supports formula covariates, uses emmeans contrast compute average treatment effect (ATE) logit scale.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-feature-0-79-0","dir":"Changelog","previous_headings":"","what":"New Feature","title":"TrialSimulator 0.79.0","text":"function fitLinear now supports formula covariates, uses emmeans contrast compute average treatment effect (ATE) mean scale.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"updates-0-78-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"TrialSimulator 0.78.0","text":"trigger_condition function milestone deprecated replaced . Note trigger_condition still supported R6 class Milestones.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"updates-0-77-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"TrialSimulator 0.77.0","text":"Add case unit test.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fixes-0-76-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"TrialSimulator 0.76.0","text":"Fix bug trial$get_custom_data throws error n > 1 controller$run(n) custom data wiped trial$reset.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"update-0-75-0","dir":"Changelog","previous_headings":"","what":"Update","title":"TrialSimulator 0.75.0","text":"Add vignette defining arms.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-feature-0-74-0","dir":"Changelog","previous_headings":"","what":"New Feature","title":"TrialSimulator 0.74.0","text":"Support inclusion criteria arm ... argument.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-feature-0-73-0","dir":"Changelog","previous_headings":"","what":"New Feature","title":"TrialSimulator 0.73.0","text":"Print summary report arms printing arm object console rmarkdown.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-feature-0-72-0","dir":"Changelog","previous_headings":"","what":"New Feature","title":"TrialSimulator 0.72.0","text":"Print summary report endpoints printing endpoint object console rmarkdown.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"updates-0-70-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"TrialSimulator 0.70.0","text":"Add vignette longitudinal endpoints.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"updates-0-68-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"TrialSimulator 0.68.0","text":"Rename trial event milestone. major update. Relevant codes documents updated accordingly. Add executable examples controller() per suggestion CRAN team.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"updates-0-67-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"TrialSimulator 0.67.0","text":"Print event counts trial events using message() Shiny app can display properly.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"updates-0-66-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"TrialSimulator 0.66.0","text":"Add cases unit test.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-65-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.65.0","text":"Add function solveMixtureExponentialDistribution compute median exponential endpoint subgroup overall population.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-63-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.63.0","text":"Add wrapper functions endpoints, arm, trial, event, listener controller Endpoint$new, Arm$new, Trial$new, Event$new, Listener$new Controller$new.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-62-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.62.0","text":"Allow extending trial duration Trial$set_duration.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"updates-0-61-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"TrialSimulator 0.61.0","text":"Deprecate function enroll_a_patient. Use enroll_patients .","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"updates-0-58-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"TrialSimulator 0.58.0","text":"Update vignette adaptive seamless design.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fixes-0-58-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"TrialSimulator 0.58.0","text":"Fix bug use n > 1 Controller$run arm can possibly removed adaptively trial.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-58-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.58.0","text":"Allow specifying arms enrollment. useful count randomized patients arms even removed adaptively.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"updates-0-57-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"TrialSimulator 0.57.0","text":"Move vignette comparison GraphicalTesting graphicalMCP repository TrialSimulatorDocuments.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-56-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.56.0","text":"Controller$run now can specify number simulation replicates newly added argument n. n greater 1, simulation results can accessed Controller$get_output().","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fixes-0-55-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"TrialSimulator 0.55.0","text":"Fix bug StaggeredRecruiter force enrollment time first patient zero. known issue lazy fix . Earlier version may overestimated time events.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-55-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.55.0","text":"add function fitFarringtonManning Farrington-Manning test rate difference.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-54-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.54.0","text":"Add function Trial$bind row bind data frame action functions. useful prepare inputs group sequential graphical test.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-53-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.53.0","text":"Add vignette condition system.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fixes-0-52-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"TrialSimulator 0.52.0","text":"Fix bug data censored correctly events. bug affect trial without interims.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-51-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.51.0","text":"Add vignette non-time--event endpoints. Add function weibullDropout compute parameters Weibull distribution using dropout distribution.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-49-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.49.0","text":"Add vignette time--event endpoints.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fixes-0-48-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"TrialSimulator 0.48.0","text":"Fix bug alpha node graph set rounding error bound 1e-5 alpha propagated.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-47-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.47.0","text":"Support new condition system event triggering. Built-functions enrollment, eventNumber calendarTime can combined & |. Nested combination supported using parentheses. TriggerByEventNumbers TriggerByCalendarTime therefore deprecated.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fixes-0-44-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"TrialSimulator 0.44.0","text":"Fix bug adding arm already trial.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-43-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.43.0","text":"Add function fitLogistic fit logistic regression model. Support model fitting multiple treatment arms logistic regression, Cox PH model, logrank test.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"minor-updates-0-42-0","dir":"Changelog","previous_headings":"","what":"Minor Updates","title":"TrialSimulator 0.42.0","text":"Add logo.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fixes-0-40-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"TrialSimulator 0.40.0","text":"Revise examples CRAN submission.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fixes-0-39-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"TrialSimulator 0.39.0","text":"Remove space class name eliminate R CMD check note.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fixes-0-38-2","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"TrialSimulator 0.38.2","text":"Throw error message none hypotheses test non-zero alpha graphical test. Update vignette.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-38-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.38.1","text":"Plot stacked area chart accumulative event numbers endpoints.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fixes-0-38-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"TrialSimulator 0.38.1","text":"Fix bug small weight (epsilon) used graph graphical testing. Small weight can conflict integral tolerance error.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-37-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.37.0","text":"Return informative error message custom random number generators used define endpoints. Specifically, guides users return columns time--event endpoints properly. Update manual generator Endpoint.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fixes-0-36-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"TrialSimulator 0.36.0","text":"Fix bug GraphicalTesting hypothesis tested multiple times stage alpha passed rejected hypothesis.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-35-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.35.0","text":"Warn incremental information low can affect normality approximation combination test.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fixes-0-35-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"TrialSimulator 0.35.0","text":"Minor bugs fixed.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-33-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.33.0","text":"Add README.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-33-0-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.33.0","text":"Provide default action function do_nothing() users intent anything triggered event. function can passed argument action creating new event, e.g., Event$new(name = 'interim', trigger_condition = TriggerByCalendarTime, action = do_nothing, calendar_time = 64).","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-30-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.30.0","text":"Capture error inside Controller$run() insert error message output (see Trial$get_output()$error_message). helps integrate TrialSimulator targets.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-29-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.29.0","text":"Support closed test based inverse normal combination test. Seed can accessed Trial$get_seed().","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-28-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.28.0","text":"Support inverse normal combination test multiple treatment arms present. Dunnett’s test used comparison. Specify random seed user dose pick one. Seed saved Trial’s output reproducibility.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-27-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.27.0","text":"Support dry run fixed design.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-26-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.26.0","text":"Adjust boundary final analysis - -running trials. Support custom alpha spending function graphical testing procedure.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-25-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.25.0","text":"Support inverse normal combination test logrank statistics.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-24-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.24.0","text":"Update GraphicalTesting based simplified interface GroupSequentialTest.","code":""}]
