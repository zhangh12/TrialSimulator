[{"path":"https://zhangh12.github.io/TrialSimulator/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Han Zhang Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/articles/defineNonTimeToEventEndpoints.html","id":"define-endpoints-with-random-number-generators","dir":"Articles","previous_headings":"","what":"Define endpoints with random number generators","title":"Define Non-Time-to-Event Endpoints in Clinical Trials","text":"Similar time--event endpoints, non-TTE endpoints can defined using univariate random number generator takes n (number observations) first argument. stats package provides set random number generators can assigned generator Endpoint$new, additional arguments required generator can passed .... creating non-TTE endpoints, argument type set \"non-tte\", argument readout specified named numeric vector, indicating time required endpoint available analysis patient enrollment. example , define two types endpoints: Continuous endpoint: Tumor size change baseline (cfb), available 6 months, assuming normal distribution (generator = rnorm) custom mean sd. Binary endpoint: Objective response rate (orr), available 2 months, assuming binomial distribution (generator = rbinom) size = 1 custom prob. treatment arms defined, can proceed create trial. Patients recruited piecewise constant rate, accrual pattern follows: First 6 months: 10 patients per month. 6 months: 20 patients per month 420 patients randomized 1:1 two arms. also specify dropout process Weibull distribution. dropout rates set follows: 15% dropout 12 months 30% dropout 18 months constraints resolved using Weibull dropout function: 0.15=1−e−(12/λ)k0.30=1−e−(18/λ)k \\begin{split} 0.15 & = & 1 - e^{-(12/\\lambda)^k} \\\\ 0.30 & = & 1 - e^{-(18/\\lambda)^k} \\end{split} Using computed scale parameter λ=\\lambda= 30.636 shape parameter k=k= 1.939, specify trial setup: accrual_rate argument TrialSimulator::StaggeredRecruiter controlling patients recruited trial. Similarly, scale shape arguments rweibull. arguments passed ... Trial$new. TrialSimulator allows defining trial events specific time points data locked analysis. , define three key events: Interim Analysis: Triggered orr observed 60 patients. cfb observed least 100 patients, orr observed least 180 patients. Final Analysis: Occurs trial reaches 30 months. action = doNothing Event$new means don’t expect action time triggered events. practice, instead doNothing, custom action function can adopted add remove arms (e.g., dose selection), adjust sample ratio per arm, carry statistical analysis based locked data. advanced setups covered vignettes. Next, register events listener create controller monitor execute trial.  can inspect dataset locked different event points calling member function get_locked_data event names. Ideally, done within custom action function, decision made based data locked time event. Since cfb 6-month readout time, interim analysis, patients’ cfb values still unavailable, appearing NA interim_data. However, values become available random_data collected later time point. demonstrates TrialSimulator properly automatically handles endpoint availability different event triggers. example, simulate tumor size change baseline (cfb). However, many trials, appropriate simulate tumor size baseline follow-separately allow complex modeling, longitudinal repeated measures analysis. covered another vignette. flexible setup, TrialSimulator enables efficient endpoint definition, adaptive trial execution, data monitoring—allowing users design simulate clinical trials tailored specific research needs.","code":"## endpoints in placebo arm tumor_cfb_pbo <- Endpoint$new(name = 'cfb', type = 'non-tte',                                readout = c(cfb = 6),                               generator = rnorm, mean = .8, sd = 3.2) orr_pbo <- Endpoint$new(name = 'orr', type = 'non-tte',                          readout = c(orr = 2),                         generator = rbinom, size = 1, prob = .1)  ## define the placebo arm pbo <- Arm$new(name = 'placebo') pbo$add_endpoints(tumor_cfb_pbo, orr_pbo)  ## endpoints in treatment arm tumor_cfb_trt <- Endpoint$new(name = 'cfb', type = 'non-tte',                                readout = c(cfb = 6),                                generator = rnorm, mean = -2.3, sd = 1.5) orr_trt <- Endpoint$new(name = 'orr', type = 'non-tte',                          readout = c(orr = 2),                          generator = rbinom, size = 1, prob = .25)  ## define the treatment arm trt <- Arm$new(name = 'treatment') trt$add_endpoints(tumor_cfb_trt, orr_trt) dropout_pars <- weibullDropout(c(12, 18), c(.15, .30)) dropout_pars #>     shape     scale  #>  1.938589 30.635696 accrual_rate <- data.frame(end_time = c(6, Inf),                             piecewise_rate = c(100, 200))  trial <- Trial$new(   name = 'Trial-31415', description = 'Example Clinical Trial',    n_patients = 4200, duration = 30,    enroller = StaggeredRecruiter, accrual_rate = accrual_rate,    dropout = rweibull, scale = 30.636, shape = 1.939 ) #> Seed is not specified. TrialSimulator sets it to 1012203595  ## add arms to the trial trial$add_arms(sample_ratio = c(1, 1), trt, pbo) #> Arm(s) <treatment, placebo> are added to the trial. #> Randomization is done for 4200 potential patients. #> Data of 4200 potential patients are generated for the trial with 2 arm(s) <treatment, placebo>. trial #>  ⚕⚕ Trial Name:  Trial-31415   #>  ⚕⚕ Description:  Example Clinical Trial   #>  ⚕⚕ # of Arms:  2   #>  ⚕⚕ Registered Arms:  treatment, placebo   #>  ⚕⚕ Sample Ratio:  1, 1   #>  ⚕⚕ # of Patients:  4200   #>  ⚕⚕ Planned Duration:  30   #>  ⚕⚕ Random Seed:  1012203595 interim <- Event$new(name = 'interim',                       trigger_condition = eventNumber(endpoint = 'orr', n = 60),                       action = doNothing)  random <- Event$new(name = 'random',                      trigger_condition =                        calendarTime(time = 10) &                        (eventNumber(endpoint = 'cfb', n = 100) |                           eventNumber(endpoint = 'orr', n = 180)                       ),                      action = doNothing)  final <- Event$new(name = 'final',                     trigger_condition = calendarTime(time = 30),                     action = doNothing) ## register events to the listener listener <- Listener$new() listener$add_events(interim, random, final) #> An event <interim> is registered. #> An event <random> is registered. #> An event <final> is registered.  ## run the trial controller <- Controller$new(trial, listener) controller$run() #> Conditioin of event <interim> is being checked. #> Data is locked at time = 2.61 for event <interim>. #> Locked data can be accessed in Trial$get_locked_data('interim').  #> Number of events at lock time: #>   patient cfb orr                 arms #> 1     261   0  60 <treatment, placebo> #>  #> Conditioin of event <random> is being checked. #> Data is locked at time = 10 for event <random>. #> Locked data can be accessed in Trial$get_locked_data('random').  #> Number of events at lock time: #>   patient cfb orr                 arms #> 1    1400 371 958 <treatment, placebo> #>  #> Conditioin of event <final> is being checked. #> Data is locked at time = 30 for event <final>. #> Locked data can be accessed in Trial$get_locked_data('final').  #> Number of events at lock time: #>   patient  cfb  orr                 arms #> 1    4200 2749 3165 <treatment, placebo> #> interim_data <- trial$get_locked_data(event_name = 'interim') random_data <- trial$get_locked_data(event_name = 'random') final_data <- trial$get_locked_data(event_name = 'final') head(interim_data) #>   patient_id       arm enroll_time dropout_time cfb cfb_readout orr orr_readout #> 1          1   placebo        0.01     8.829854  NA           6   1           2 #> 2          2 treatment        0.02     7.273669  NA           6   0           2 #> 3          3 treatment        0.03    24.190599  NA           6   0           2 #> 4          4   placebo        0.04    21.036405  NA           6   1           2 #> 5          5   placebo        0.05     8.090716  NA           6   0           2 #> 6          6 treatment        0.06    20.617792  NA           6   1           2 not_ready_at_interim <-    interim_data %>%    dplyr::filter(is.na(cfb) &                    is.na(orr) &                    enroll_time + 6 < dropout_time) %>%    head() %>%    print() #>   patient_id       arm enroll_time dropout_time cfb cfb_readout orr orr_readout #> 1         62   placebo        0.62     16.86055  NA           6  NA           2 #> 2         63 treatment        0.63     17.77554  NA           6  NA           2 #> 3         64   placebo        0.64     21.93531  NA           6  NA           2 #> 4         65   placebo        0.65     47.96224  NA           6  NA           2 #> 5         66 treatment        0.66     13.75719  NA           6  NA           2 #> 6         67   placebo        0.67     30.93186  NA           6  NA           2  random_data %>%    dplyr::filter(patient_id %in% not_ready_at_interim$patient_id) %>%    print() #>   patient_id       arm enroll_time dropout_time       cfb cfb_readout orr #> 1         62   placebo        0.62     16.86055  3.351833           6   0 #> 2         63 treatment        0.63     17.77554 -2.673179           6   1 #> 3         64   placebo        0.64     21.93531 12.891415           6   0 #> 4         65   placebo        0.65     47.96224  2.065637           6   0 #> 5         66 treatment        0.66     13.75719 -0.896166           6   0 #> 6         67   placebo        0.67     30.93186  2.416739           6   0 #>   orr_readout #> 1           2 #> 2           2 #> 3           2 #> 4           2 #> 5           2 #> 6           2"},{"path":"https://zhangh12.github.io/TrialSimulator/articles/defineTimeToEventEndpoints.html","id":"define-a-univariate-endpoint-with-random-number-generators-from-stats","dir":"Articles","previous_headings":"","what":"Define a univariate endpoint with random number generators from stats","title":"Define Time-to-Event Endpoints in Clinical Trials","text":"define time--event endpoint progression-free survival (PFS) following exponential distribution, need specify name type. specification crucial TrialSimulator ensures arms set endpoints manages endpoint data based type. example, endpoints type \"tte\" (time--event) automatically receive additional column (name)_event indicate censoring status. Arguments generator function (case, rate) passed .... can verify generator works expected requesting example dataset: Note data returned test_generator validation purposes. actual trial simulation, TrialSimulator determines call generator many samples draw. Similarly, can define PFS endpoint treatment arm: Now can define placebo treatment arms adding PFS endpoints: cover create trial object based arms pbo trt another vignette.","code":"pfs_pbo <- Endpoint$new(name = 'PFS', type = 'tte',                          generator = rexp, rate = log(2)/5.6) test_set <- pfs_pbo$test_generator(n = 1e5) head(test_set) #>          PFS PFS_event #> 1  6.5316820         1 #> 2  0.1490485         1 #> 3  3.6793035         1 #> 4  0.1933984         1 #> 5 51.7238773         1 #> 6 10.1631791         1 median(test_set$PFS) ## should be close to 5.6 #> [1] 5.592334 library(TrialSimulator) pfs_trt <- Endpoint$new(name = 'PFS', type = 'tte',                          generator = rexp, rate = log(2)/6.4) median(pfs_trt$test_generator(n = 1e5)$PFS) ## should be close to 6.4 #> [1] 6.434287 pbo <- Arm$new(name = 'placebo') pbo$add_endpoints(pfs_pbo) trt <- Arm$new(name = 'treatment') trt$add_endpoints(pfs_trt)"},{"path":"https://zhangh12.github.io/TrialSimulator/articles/defineTimeToEventEndpoints.html","id":"define-a-univariate-endpoint-with-custom-random-number-generators","dir":"Articles","previous_headings":"","what":"Define a univariate endpoint with custom random number generators","title":"Define Time-to-Event Endpoints in Clinical Trials","text":"Endpoint$new accepts custom random number generators univariate random variables, long generator’s first argument n (number observations). Additional arguments can passed ... Endpoint$new. TrialSimulator provides built-custom generator, PiecewiseConstantExponentialRNG, generate time--event endpoints piecewise constant exponential distributions. particularly useful simulating lagged delayed treatment effects. example demonstrates scenario treatment effect begins week 2:  example, PiecewiseConstantExponentialRNG adds column PFS_event specified endpoint_name = 'PFS'. patients PFS censored (PFS_event = 0). default, custom generator supplied event column provided time--event endpoint, TrialSimulator add one set values 1 (censoring). add endpoint arm,","code":"risk_pbo <- data.frame(   end_time = c(2, 8, 10),    piecewise_risk = c(1, 0.48, 0.25) * exp(-1) )  pfs_pbo <- Endpoint$new(name = 'PFS', type = 'tte',                          generator = PiecewiseConstantExponentialRNG,                          risk = risk_pbo,                          endpoint_name = 'PFS') risk_trt <- risk_pbo %>%    mutate(hazard_ratio = c(1, .6, .7))  pfs_trt <- Endpoint$new(name = 'PFS', type = 'tte',                          generator = PiecewiseConstantExponentialRNG,                          risk = risk_trt,                          endpoint_name = 'PFS')  test_set <- rbind(pfs_pbo$test_generator(n = 1e4) %>% mutate(arm = 'pbo'),                    pfs_trt$test_generator(n = 1e4) %>% mutate(arm = 'trt'))  sfit <- survfit(Surv(time = PFS, event = PFS_event) ~ arm, test_set) ggsurvplot(sfit, data = test_set, palette = c(\"blue\", \"red\")) head(test_set %>% slice_sample(prop = 1)) #>         PFS PFS_event arm #> 1  7.517612         1 pbo #> 2 10.000000         0 trt #> 3  3.817789         1 trt #> 4  8.372652         1 trt #> 5 10.000000         0 pbo #> 6  1.221958         1 pbo pbo <- Arm$new(name = 'placebo') pbo$add_endpoints(pfs_pbo)  trt <- Arm$new(name = 'treatment') trt$add_endpoints(pfs_trt)"},{"path":"https://zhangh12.github.io/TrialSimulator/articles/defineTimeToEventEndpoints.html","id":"define-multiple-endpoints","dir":"Articles","previous_headings":"","what":"Define multiple endpoints","title":"Define Time-to-Event Endpoints in Clinical Trials","text":"can define one endpoint trial. Let’s add overall survival (OS) second endpoint. ’ll assume median overall survival 7.2 months placebo arm 8.5 months treatment arm. Note defining PFS OS separately (.e., calling Endpoint$new endpoint), implicitly assuming endpoints independent trial.","code":"os_pbo <- Endpoint$new(name = 'OS', type = 'tte',                         generator = rexp, rate = log(2)/7.2) os_trt <- Endpoint$new(name = 'OS', type = 'tte',                         generator = rexp, rate = log(2)/8.5)  median(os_pbo$test_generator(n = 1e5)$OS) ## should be close to 7.2 #> [1] 7.160499 median(os_trt$test_generator(n = 1e5)$OS) ## should be close to 8.5 #> [1] 8.532867  ## add endpoint to existing arms pbo$add_endpoints(os_pbo) trt$add_endpoints(os_trt)"},{"path":"https://zhangh12.github.io/TrialSimulator/articles/defineTimeToEventEndpoints.html","id":"an-example-of-a-custom-random-number-generator-for-correlated-endpoints","dir":"Articles","previous_headings":"","what":"An example of a custom random number generator for correlated endpoints","title":"Define Time-to-Event Endpoints in Clinical Trials","text":"define multiple correlated endpoints, need create custom generator. example, define one based R package simdata: Note custom generator, need add columns event indicator time--event endpoints. define arms correlated endpoints, simply following:","code":"custom_generator <- function(n, pfs_rate, os_rate, corr){      dist <- list()   dist[['PFS']] <- function(x) qexp(x, rate = pfs_rate)   dist[['OS']] <- function(x) qexp(x, rate = os_rate)   dsgn = simdata::simdesign_norta(cor_target_final = corr,                                  dist = dist,                                  transform_initial = data.frame,                                 names_final = names(dist),                                  seed_initial = 1)      simdata::simulate_data(dsgn, n_obs = n) %>%      mutate(PFS_event = 1, OS_event = 1) ## event indicators } corr <- matrix(c(1, .6, .6, 1), nrow = 2) eps_pbo <- Endpoint$new(name = c('PFS', 'OS'), type = c('tte', 'tte'),                                generator = custom_generator,                                pfs_rate = log(2)/5.6, os_rate = log(2)/7.2,                                corr = corr)  eps_trt <- Endpoint$new(name = c('OS', 'PFS'), type = c('tte', 'tte'),                                generator = custom_generator,                                pfs_rate = log(2)/6.4, os_rate = log(2)/8.5,                                corr = corr)  test_set <- rbind(eps_pbo$test_generator(n = 1e5) %>% mutate(arm = 'pbo'),                    eps_trt$test_generator(n = 1e5) %>% mutate(arm = 'trt'))  with(test_set, cor(PFS, OS)) ## should be close to 0.6 #> [1] 0.5992274  ## sample medians match to the parameters well test_set %>%    group_by(arm) %>%    summarise(PFS = median(PFS), OS = median(OS)) #> # A tibble: 2 × 3 #>   arm     PFS    OS #>   <chr> <dbl> <dbl> #> 1 pbo    5.58  7.21 #> 2 trt    6.38  8.51 pbo <- Arm$new(name = 'placebo') pbo$add_endpoints(eps_pbo)  trt <- Arm$new(name = 'treatment') trt$add_endpoints(eps_trt)"},{"path":"https://zhangh12.github.io/TrialSimulator/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Han Zhang. Maintainer, author.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhang H (2025). TrialSimulator: Clinical Trial Simulator. R package version 0.52.2, https://zhangh12.github.io/TrialSimulator/.","code":"@Manual{,   title = {TrialSimulator: Clinical Trial Simulator},   author = {Han Zhang},   year = {2025},   note = {R package version 0.52.2},   url = {https://zhangh12.github.io/TrialSimulator/}, }"},{"path":"https://zhangh12.github.io/TrialSimulator/index.html","id":"trialsimulator-","dir":"","previous_headings":"","what":"Clinical Trial Simulator","title":"Clinical Trial Simulator","text":"goal TrialSimulator provide pipeline implementing simulation clinical trial efficiently reliably. follows principle modularity isolate codes statistical testing data generation management. provides set tools sample endpoints common custom distributions, manage trial data, summarize simulation results fixed adaptive designs. also provides functions group sequential design, graphical testing procedure, combination test, closed test widely used analyze complex trial designs.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Clinical Trial Simulator","text":"can install development version TrialSimulator GitHub :","code":"if (!require(\"remotes\")) {   install.packages(\"remotes\") } remotes::install_github(   \"zhangh12/TrialSimulator\",    build_manual = TRUE,    build_vignettes = TRUE,    force = TRUE )"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arm.html","id":null,"dir":"Reference","previous_headings":"","what":"Class of Arm — Arm","title":"Class of Arm — Arm","text":"Create class arm.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arm.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class of Arm — Arm","text":"Arm$new() Arm$add_endpoints() Arm$get_name() Arm$get_description() Arm$get_number_endpoints() Arm$has_endpoint() Arm$get_endpoints() Arm$clone()","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arm.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class of Arm — Arm","text":"initialize arm","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arm.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Arm — Arm","text":"","code":"Arm$new(name, description = name)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Arm — Arm","text":"name name arm description description arm","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arm.html","id":"method-add-endpoints-","dir":"Reference","previous_headings":"","what":"Method add_endpoints()","title":"Class of Arm — Arm","text":"add list endpoints arm","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arm.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Arm — Arm","text":"","code":"Arm$add_endpoints(...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arm.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Arm — Arm","text":"... one objects class Endpoint","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arm.html","id":"method-get-name-","dir":"Reference","previous_headings":"","what":"Method get_name()","title":"Class of Arm — Arm","text":"return name arm","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arm.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Arm — Arm","text":"","code":"Arm$get_name()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arm.html","id":"method-get-description-","dir":"Reference","previous_headings":"","what":"Method get_description()","title":"Class of Arm — Arm","text":"return description arm","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arm.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Arm — Arm","text":"","code":"Arm$get_description()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arm.html","id":"method-get-number-endpoints-","dir":"Reference","previous_headings":"","what":"Method get_number_endpoints()","title":"Class of Arm — Arm","text":"return number endpoints arm","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arm.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Arm — Arm","text":"","code":"Arm$get_number_endpoints()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arm.html","id":"method-has-endpoint-","dir":"Reference","previous_headings":"","what":"Method has_endpoint()","title":"Class of Arm — Arm","text":"check arm endpoint. Return TRUE FALSE.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arm.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Arm — Arm","text":"","code":"Arm$has_endpoint()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arm.html","id":"method-get-endpoints-","dir":"Reference","previous_headings":"","what":"Method get_endpoints()","title":"Class of Arm — Arm","text":"return list endpoints arm","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arm.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Arm — Arm","text":"","code":"Arm$get_endpoints()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arm.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class of Arm — Arm","text":"objects class cloneable method.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arm.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Arm — Arm","text":"","code":"Arm$clone(deep = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arm.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Arm — Arm","text":"deep Whether make deep clone.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Arm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of Arm — Arm","text":"","code":"risk <- data.frame(   end_time = c(1, 10, 26.0, 52.0),   piecewise_risk = c(1, 1.01, 0.381, 0.150) * exp(-3.01) )  pfs <- Endpoint$new(name = 'pfs', type='tte', generator = PiecewiseConstantExponentialRNG, risk = risk, endpoint_name = 'pfs')  orr <- Endpoint$new(   name = 'orr', type = 'non-tte',   readout = c(orr = 2), generator = rbinom,   size = 1, prob = .4)  placebo <- Arm$new(   name = 'pbo', description = 'Placebo arm')  placebo$add_endpoints(pfs, orr) placebo #> <Arm> #>   Public: #>     add_endpoints: function (...)  #>     clone: function (deep = FALSE)  #>     get_description: function ()  #>     get_endpoints: function ()  #>     get_name: function ()  #>     get_number_endpoints: function ()  #>     has_endpoint: function ()  #>     initialize: function (name, description = name)  #>   Private: #>     description: Placebo arm #>     endpoints: list #>     name: pbo placebo$get_endpoints()[[1]]$get_generator()(n = 1e3) |> head() #>          pfs pfs_event #> 1  0.1506736         1 #> 2 16.9618028         1 #> 3 20.1894275         1 #> 4  6.8827606         1 #> 5 52.0000000         0 #> 6 52.0000000         0 placebo$get_endpoints()[[2]]$get_name() #> [1] \"orr\""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controller.html","id":null,"dir":"Reference","previous_headings":"","what":"Class of Controller — Controller","title":"Class of Controller — Controller","text":"Create class controller run trial.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controller.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class of Controller — Controller","text":"Controller$new() Controller$get_listener() Controller$get_trial() Controller$mute() Controller$run() Controller$clone()","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controller.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class of Controller — Controller","text":"initialize controller trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controller.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Controller — Controller","text":"","code":"Controller$new(trial, listener)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controller.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Controller — Controller","text":"trial Trial object. listener Listener object.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controller.html","id":"method-get-listener-","dir":"Reference","previous_headings":"","what":"Method get_listener()","title":"Class of Controller — Controller","text":"return listener","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controller.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Controller — Controller","text":"","code":"Controller$get_listener()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controller.html","id":"method-get-trial-","dir":"Reference","previous_headings":"","what":"Method get_trial()","title":"Class of Controller — Controller","text":"return trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controller.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Controller — Controller","text":"","code":"Controller$get_trial()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controller.html","id":"method-mute-","dir":"Reference","previous_headings":"","what":"Method mute()","title":"Class of Controller — Controller","text":"mute messages (including warnings)","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controller.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Controller — Controller","text":"","code":"Controller$mute()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controller.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Controller — Controller","text":"silent logical.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controller.html","id":"method-run-","dir":"Reference","previous_headings":"","what":"Method run()","title":"Class of Controller — Controller","text":"run trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controller.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Controller — Controller","text":"","code":"Controller$run(plot_event = TRUE, silent = FALSE, dry_run = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controller.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Controller — Controller","text":"plot_event create event plot silent logical. TRUE muting messages trial. Note warning messages still displayed. dry_run TRUE action function provided users ignored built-default action default_action called instead. default function locks data event triggered. Event time number endpoints' events sample sizes saved. suggested set dry_run = TRUE estimate distributions triggering time number events formally using custom action functions fixed design use. helps determining planned maximum information group sequential design reasonable time event interest planning trial. Set FALSE formal simulations. However, adaptive design arm(s) possibly added removed, setting dry_run TRUE usually helpful adaption actually applied estimate event time.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controller.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class of Controller — Controller","text":"objects class cloneable method.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controller.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Controller — Controller","text":"","code":"Controller$clone(deep = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controller.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Controller — Controller","text":"deep Whether make deep clone.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Controller.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of Controller — Controller","text":"","code":"##"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/DynamicRNGFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper of random number generator. — DynamicRNGFunction","title":"A wrapper of random number generator. — DynamicRNGFunction","text":"wrapper random number generator.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/DynamicRNGFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper of random number generator. — DynamicRNGFunction","text":"","code":"DynamicRNGFunction(fn, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/DynamicRNGFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper of random number generator. — DynamicRNGFunction","text":"fn random number generator, e.g., rnorm, rchisq, etc. can user-defined random number generator well, e.g., PiecewiseConstantExponentialRNG ... arguments fn. Specifying invalid arguments can trigger error stopped. three exceptions. (1) rng can passed `...` give true name fn. necessary may hard parse accurately DynamicRNGFunction, simply informative purpose scenarios. (2) var_name can passed `...` specify name generated variable. (3) simplify can set FALSE convert vector one-column data frame returned object. happens built-random number generators, e.g., rnorm, rbinom, etc. three arguments passed fn.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/DynamicRNGFunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper of random number generator. — DynamicRNGFunction","text":"function generate random number based `fn` arguments `...`. Specified arguments fixed changed invoking `DynamicRNGFunction(fn, ...)()`. example, `foo <- DynamicRNGFunction(rnorm, sd = 2)`, `foo(n = 100)` always generate data normal distribution variance 4. `foo(n = 100, sd = 1)` trigger error. However, argument specified `DynamicRNGFunction`, can specified later. example, `foo(n = 100, mean = -1)` generate data N(-1, 4).","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/DynamicRNGFunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A wrapper of random number generator. — DynamicRNGFunction","text":"","code":"# example code dfunc <- DynamicRNGFunction(rnorm, sd = 3.2) x <- dfunc(1e3) hist(x)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/DynamicTriggerConditionFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper of event trigger condition function — DynamicTriggerConditionFunction","title":"A wrapper of event trigger condition function — DynamicTriggerConditionFunction","text":"wrapper event trigger condition function","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/DynamicTriggerConditionFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper of event trigger condition function — DynamicTriggerConditionFunction","text":"","code":"DynamicTriggerConditionFunction(fn, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/DynamicTriggerConditionFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper of event trigger condition function — DynamicTriggerConditionFunction","text":"fn function. ... arguments fn.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/DynamicTriggerConditionFunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper of event trigger condition function — DynamicTriggerConditionFunction","text":"function determine whether trigger condition met, based `fn` arguments `...`. Specified arguments fixed changed invoking `DynamicTriggerConditionFunction(fn, ...)()`. example, `foo <- DynamicTriggerConditionFunction(TriggerByEventNumbers, ` `endpoints = c('pfs', 'os'), target_n_events = c(150, 80), type = '')`, `foo()` always trigger action collecting either 150 PFS events, 80 OS events. `foo(target_n_events = c(150, 100))` trigger error. However, argument specified `DynamicTriggerConditionFunction`, can specified later.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/DynamicTriggerConditionFunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A wrapper of event trigger condition function — DynamicTriggerConditionFunction","text":"","code":"##"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Class of Endpoint — Endpoint","title":"Class of Endpoint — Endpoint","text":"Create class endpoint specify name, type assign random number generator.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoint.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class of Endpoint — Endpoint","text":"Endpoint$new() Endpoint$test_generator() Endpoint$get_generator() Endpoint$get_readout() Endpoint$get_uid() Endpoint$get_name() Endpoint$get_type() Endpoint$clone()","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoint.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class of Endpoint — Endpoint","text":"initialize endpoint","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoint.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Endpoint — Endpoint","text":"","code":"Endpoint$new(name, type = c(\"tte\", \"non-tte\"), readout = NULL, generator, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Endpoint — Endpoint","text":"name character vector. Name(s) endpoint(s) type character vector. Type(s) endpoint(s). supports \"tte\" time--event endpoints, \"non-tte\" types endpoints (e.g., continous, binary, categorical, repeated measurement. TrialSimulator verification endpoint type \"tte\". However, special manipulation done non-tte endpoints. readout numeric vector name non-tte endpoint(s). readout specified every non-tte endpoint. example, c(endpoint1 = 6, endpoint2 = 3).  endpoints tte, readout can NULL. generator RNG function. first argument must `n`, number patients. must return data frame `n` rows. support built-random number generators stats, e.g., stats::rnorm, stats::rexp, etc. n argument number observations. generator custom functions long (1) first argument n; (2) returns vector length n data frame n rows. Custom random number generator can return data one endpoint. useful users need simulate correlated endpoints. column names returned data frame match name exactly. endpoint type \"tte\", custom generator also return column event indicator. example, \"pfs\" \"tte\", custom generator return least two columns \"pfs\" \"pfs_event\". Usually pfs_event can 1s censoring. Censoring can specified later defining Trial argument dropout. See ?Trial. Note covariates, e.g., biomarker, subgroup, needed generating analyzing trial data, can defined Endpoint well. ... optional arguments generator.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoint.html","id":"method-test-generator-","dir":"Reference","previous_headings":"","what":"Method test_generator()","title":"Class of Endpoint — Endpoint","text":"test random number generator endpoints. returns example dataset.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoint.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Endpoint — Endpoint","text":"","code":"Endpoint$test_generator(n = 1000)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoint.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Endpoint — Endpoint","text":"n integer. Number random numbers generated generator.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoint.html","id":"method-get-generator-","dir":"Reference","previous_headings":"","what":"Method get_generator()","title":"Class of Endpoint — Endpoint","text":"return random number generator endpoint","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoint.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Endpoint — Endpoint","text":"","code":"Endpoint$get_generator()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoint.html","id":"method-get-readout-","dir":"Reference","previous_headings":"","what":"Method get_readout()","title":"Class of Endpoint — Endpoint","text":"return readout function","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoint.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Endpoint — Endpoint","text":"","code":"Endpoint$get_readout()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoint.html","id":"method-get-uid-","dir":"Reference","previous_headings":"","what":"Method get_uid()","title":"Class of Endpoint — Endpoint","text":"return uid","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoint.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Endpoint — Endpoint","text":"","code":"Endpoint$get_uid()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoint.html","id":"method-get-name-","dir":"Reference","previous_headings":"","what":"Method get_name()","title":"Class of Endpoint — Endpoint","text":"return endpoints' name","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoint.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Endpoint — Endpoint","text":"","code":"Endpoint$get_name()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoint.html","id":"method-get-type-","dir":"Reference","previous_headings":"","what":"Method get_type()","title":"Class of Endpoint — Endpoint","text":"return endpoints' type","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoint.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Endpoint — Endpoint","text":"","code":"Endpoint$get_type()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoint.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class of Endpoint — Endpoint","text":"objects class cloneable method.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoint.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Endpoint — Endpoint","text":"","code":"Endpoint$clone(deep = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoint.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Endpoint — Endpoint","text":"deep Whether make deep clone.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Endpoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of Endpoint — Endpoint","text":"","code":"set.seed(12345) ## Example 1. Generate a time-to-event endpoint. ## Two columns are returned, one for time, one for event (1/0, 0 for ## A built-in RNG function is used to handle piecewise constant exponential ## distribution risk <- data.frame(   end_time = c(1, 10, 26.0, 52.0),   piecewise_risk = c(1, 1.01, 0.381, 0.150) * exp(-3.01) )  pfs <- Endpoint$new(name = 'pfs', type='tte', generator = PiecewiseConstantExponentialRNG, risk = risk, endpoint_name = 'pfs') pfs$get_generator() #> PiecewiseConstantExponentialRNG : #> $risk #>   end_time piecewise_risk #> 1        1    0.049291679 #> 2       10    0.049784596 #> 3       26    0.018780130 #> 4       52    0.007393752 #>  #> $endpoint_name #> [1] \"pfs\" #>   ## Example 2. Generate continuous and binary endpoints using R's built-in ## RNG functions, e.g. rnorm, rexp, rbinom, etc. ep1 <- Endpoint$new(          name = 'cd4', type = 'non-tte', generator = rnorm, readout = c(cd4=1),          mean = 1.2) ep2 <- Endpoint$new(          name = 'resp_time', type = 'non-tte', generator = rexp, readout = c(resp_time=0),          rate = 4.5) ep3 <- Endpoint$new(          name = 'orr', type = 'non-tte', readout = c(orr=3), generator = rbinom,          size = 1, prob = .4)  mean(ep1$get_generator()(1e4)[, 1]) # compared to 1.2 #> [1] 1.199141 sd(ep1$get_generator()(1e4)[, 1]) # compared to 1.0 #> [1] 0.9865558  log(2) / median(ep2$get_generator()(1e4)[, 1]) # compared to 4.5 #> [1] 4.554779  mean(ep3$get_generator()(1e4)[, 1]) # compared to 0.4 #> [1] 0.3961  ## An example of piecewise constant exponential random number generator ## Baseline hazards are piecewise constant ## Hazard ratios are piecewise constant, resulting a delayed effect.  run <- TRUE  if (!requireNamespace(\"survminer\", quietly = TRUE)) {   run <- FALSE   message(\"Please install 'survminer' to run this example.\") }  if (!requireNamespace(\"survival\", quietly = TRUE)) {   run <- FALSE   message(\"Please install 'survival' to run this example.\") }  if(run){ risk1 <- risk ep1 <- TrialSimulator::Endpoint$new(   name = 'pfs', type='tte',   generator = PiecewiseConstantExponentialRNG,   risk=risk1, endpoint_name = 'pfs')  risk2 <- risk1 risk2$hazard_ratio <- c(1, 1, .6, .4) ep2 <- TrialSimulator::Endpoint$new(   name = 'pfs', type='tte',   generator = PiecewiseConstantExponentialRNG,   risk=risk2, endpoint_name = 'pfs')  n <- 1000 tte <- rbind(ep1$get_generator()(n), ep2$get_generator()(n)) arm <- rep(0:1, each = n) dat <- data.frame(tte, arm) sfit <- survival::survfit(   survival::Surv(time = pfs, event = pfs_event) ~ arm, dat)  survminer::ggsurvplot(sfit,            data = dat,            pval = TRUE,  # Show p-value            conf.int = TRUE,  # Show confidence intervals            risk.table = TRUE,  # Add risk table            palette = c(\"blue\", \"red\"))  }"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":null,"dir":"Reference","previous_headings":"","what":"Class of Event — Event","title":"Class of Event — Event","text":"Create class event. event means time point take action, e.g., carry (futility, interim, final) analysis add/remove arms, stop trial early.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class of Event — Event","text":"Event$new() Event$get_name() Event$get_type() Event$get_trigger_condition() Event$get_action() Event$set_dry_run() Event$execute_action() Event$get_trigger_status() Event$trigger_event() Event$mute() Event$clone()","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class of Event — Event","text":"initialize Event","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Event — Event","text":"","code":"Event$new(name, type = name, trigger_condition, action = doNothing, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Event — Event","text":"name character. Name event. type character vector. Event type(s) (futility, interim, final), event can multiple types. trigger_condition function check event trigger. Return TRUE/FALSE. action function execute event triggers. ... arguments trigger_condition.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"method-get-name-","dir":"Reference","previous_headings":"","what":"Method get_name()","title":"Class of Event — Event","text":"return name event","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Event — Event","text":"","code":"Event$get_name()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"method-get-type-","dir":"Reference","previous_headings":"","what":"Method get_type()","title":"Class of Event — Event","text":"return type(s) event","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Event — Event","text":"","code":"Event$get_type()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"method-get-trigger-condition-","dir":"Reference","previous_headings":"","what":"Method get_trigger_condition()","title":"Class of Event — Event","text":"return trigger_condition function","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Event — Event","text":"","code":"Event$get_trigger_condition()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"method-get-action-","dir":"Reference","previous_headings":"","what":"Method get_action()","title":"Class of Event — Event","text":"return action function","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Event — Event","text":"","code":"Event$get_action()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"method-set-dry-run-","dir":"Reference","previous_headings":"","what":"Method set_dry_run()","title":"Class of Event — Event","text":"set dry run carried event. details, refer Controller::run.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Event — Event","text":"","code":"Event$set_dry_run(dry_run)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Event — Event","text":"dry_run logical.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"method-execute-action-","dir":"Reference","previous_headings":"","what":"Method execute_action()","title":"Class of Event — Event","text":"execute action function","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Event — Event","text":"","code":"Event$execute_action(trial)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Event — Event","text":"trial Trial object.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"method-get-trigger-status-","dir":"Reference","previous_headings":"","what":"Method get_trigger_status()","title":"Class of Event — Event","text":"return trigger status","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Event — Event","text":"","code":"Event$get_trigger_status()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"method-trigger-event-","dir":"Reference","previous_headings":"","what":"Method trigger_event()","title":"Class of Event — Event","text":"trigger event (always TRUE) execute action accordingly. calls Trial$get_data_lock_time() lock data based conditions implemented Event$trigger_condition. time meets condition found, Trial$get_data_lock_time() throw error stop program. means user needs adjust trigger_condition (e.g., target number events (target_n_events) impossible reach).","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Event — Event","text":"","code":"Event$trigger_event(trial, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Event — Event","text":"trial Trial object. ... arguments.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"method-mute-","dir":"Reference","previous_headings":"","what":"Method mute()","title":"Class of Event — Event","text":"mute messages (including warnings)","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Event — Event","text":"","code":"Event$mute(silent)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Event — Event","text":"silent logical.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class of Event — Event","text":"objects class cloneable method.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Event — Event","text":"","code":"Event$clone(deep = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Event — Event","text":"deep Whether make deep clone.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Event.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of Event — Event","text":"","code":"##"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":null,"dir":"Reference","previous_headings":"","what":"Class of GraphicalTesting — GraphicalTesting","title":"Class of GraphicalTesting — GraphicalTesting","text":"Perform graphical testing group sequential design one multiple endpoints. See Maurer & Bretz (2013).","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class of GraphicalTesting — GraphicalTesting","text":"GraphicalTesting$new() GraphicalTesting$reset() GraphicalTesting$is_valid_hid() GraphicalTesting$get_hypothesis_name() GraphicalTesting$get_weight() GraphicalTesting$set_weight() GraphicalTesting$get_alpha() GraphicalTesting$set_alpha() GraphicalTesting$get_hypotheses_ids() GraphicalTesting$get_number_hypotheses() GraphicalTesting$get_hids_not_in_graph() GraphicalTesting$get_testable_hypotheses() GraphicalTesting$has_testable_hypotheses() GraphicalTesting$is_in_graph() GraphicalTesting$is_testable() GraphicalTesting$get_hid() GraphicalTesting$reject_a_hypothesis() GraphicalTesting$set_trajectory() GraphicalTesting$get_trajectory() GraphicalTesting$test_hypotheses() GraphicalTesting$test() GraphicalTesting$get_current_testing_results() GraphicalTesting$get_current_decision() GraphicalTesting$print() GraphicalTesting$clone()","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class of GraphicalTesting — GraphicalTesting","text":"Initialize object graphical testing procedure. Group sequential design also supported.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$new(   alpha,   transition,   alpha_spending,   planned_max_info,   hypotheses = NULL,   silent = FALSE )"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"alpha initial alpha allocated hypotheses. transition matrix transition weights. diagonals 0s. row sums 1s (better power) 0s (outbound edge node). alpha_spending character vector length alpha. Currently supports 'asP', 'asOF', 'asUser'. planned_max_info vector integers. Maximum numbers events (tte endpoints) patients (non-tte endpoints) final analysis hypothesis planning trial. actual numbers different, can specified elsewhere. hypotheses vector characters. Names hypotheses. silent TRUE muting messages generating plots.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-reset-","dir":"Reference","previous_headings":"","what":"Method reset()","title":"Class of GraphicalTesting — GraphicalTesting","text":"reset object class GraphicalTesting original status can reused.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$reset()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-is-valid-hid-","dir":"Reference","previous_headings":"","what":"Method is_valid_hid()","title":"Class of GraphicalTesting — GraphicalTesting","text":"determine index hypothesis valid","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$is_valid_hid(hid)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"hid integer","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-get-hypothesis-name-","dir":"Reference","previous_headings":"","what":"Method get_hypothesis_name()","title":"Class of GraphicalTesting — GraphicalTesting","text":"get name hypothesis given index.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$get_hypothesis_name(hid)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"hid integer","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-get-weight-","dir":"Reference","previous_headings":"","what":"Method get_weight()","title":"Class of GraphicalTesting — GraphicalTesting","text":"return weight two nodes","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$get_weight(hid1, hid2)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"hid1 integer hid2 integer","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-set-weight-","dir":"Reference","previous_headings":"","what":"Method set_weight()","title":"Class of GraphicalTesting — GraphicalTesting","text":"update weight two nodes","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$set_weight(hid1, hid2, value)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"hid1 integer hid2 integer value numeric value set weight two nodes","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-get-alpha-","dir":"Reference","previous_headings":"","what":"Method get_alpha()","title":"Class of GraphicalTesting — GraphicalTesting","text":"return alpha allocated hypothesis calling function. Note function can called several time graph updated dynamically. Thus, returned alpha can different even hid.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$get_alpha(hid)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"hid integer","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-set-alpha-","dir":"Reference","previous_headings":"","what":"Method set_alpha()","title":"Class of GraphicalTesting — GraphicalTesting","text":"update alpha hypothesis","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$set_alpha(hid, value)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"hid integer. Index hypothesis value numeric value allocated","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-get-hypotheses-ids-","dir":"Reference","previous_headings":"","what":"Method get_hypotheses_ids()","title":"Class of GraphicalTesting — GraphicalTesting","text":"return valid hid","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$get_hypotheses_ids()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-get-number-hypotheses-","dir":"Reference","previous_headings":"","what":"Method get_number_hypotheses()","title":"Class of GraphicalTesting — GraphicalTesting","text":"return number hypotheses, including rejected.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$get_number_hypotheses()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-get-hids-not-in-graph-","dir":"Reference","previous_headings":"","what":"Method get_hids_not_in_graph()","title":"Class of GraphicalTesting — GraphicalTesting","text":"return index hypotheses rejected.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$get_hids_not_in_graph()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-get-testable-hypotheses-","dir":"Reference","previous_headings":"","what":"Method get_testable_hypotheses()","title":"Class of GraphicalTesting — GraphicalTesting","text":"return index hypotheses non-zero alphas, thus can tested current stage.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$get_testable_hypotheses()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-has-testable-hypotheses-","dir":"Reference","previous_headings":"","what":"Method has_testable_hypotheses()","title":"Class of GraphicalTesting — GraphicalTesting","text":"determine whether least one hypothesis testable. return FALSE, testing procedure completed.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$has_testable_hypotheses()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-is-in-graph-","dir":"Reference","previous_headings":"","what":"Method is_in_graph()","title":"Class of GraphicalTesting — GraphicalTesting","text":"determine whether hypothesis yet rejected (graph).","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$is_in_graph(hid)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"hid integer. Index hypothesis","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-is-testable-","dir":"Reference","previous_headings":"","what":"Method is_testable()","title":"Class of GraphicalTesting — GraphicalTesting","text":"determine whether hypothesis non-zero alpha allocated.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$is_testable(hid)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"hid integer. Index hypothesis","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-get-hid-","dir":"Reference","previous_headings":"","what":"Method get_hid()","title":"Class of GraphicalTesting — GraphicalTesting","text":"convert hypothesis's name (unique) index.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$get_hid(hypothesis)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"hypothesis character. Name hypothesis. different hid, index.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-reject-a-hypothesis-","dir":"Reference","previous_headings":"","what":"Method reject_a_hypothesis()","title":"Class of GraphicalTesting — GraphicalTesting","text":"remove node graph hypothesis rejected","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$reject_a_hypothesis(hypothesis)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"hypothesis name hypothesis. different hid, index.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-set-trajectory-","dir":"Reference","previous_headings":"","what":"Method set_trajectory()","title":"Class of GraphicalTesting — GraphicalTesting","text":"save new testing results current stage","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$set_trajectory(result)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"result data frame specific columns.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-get-trajectory-","dir":"Reference","previous_headings":"","what":"Method get_trajectory()","title":"Class of GraphicalTesting — GraphicalTesting","text":"return testing results time function called. Note graphical test carried sequential manner. Users may want review results anytime. Value returned function can possibly vary time.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$get_trajectory()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-test-hypotheses-","dir":"Reference","previous_headings":"","what":"Method test_hypotheses()","title":"Class of GraphicalTesting — GraphicalTesting","text":"test hypotheses using p-values (information stats) base current graph. rows order number.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$test_hypotheses(stats)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"stats data frame. must contain following columns: order integer. P-values (among others) hypotheses can tested time (e.g., interim, final analysis) labeled order number. hypothesis tested stage, simply put stats order number. hypotheses character. Name hypotheses tested. identical calling GraphicalTesting$new. p nominal p-values. info observed number events samples test. used compute information fractions group sequential design. max_info integers. Maximum information test. interim, max_info equal planned_max_info calling GraphicalTesting$new. final stage hypothesis, one can update observed numbers.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-test-","dir":"Reference","previous_headings":"","what":"Method test()","title":"Class of GraphicalTesting — GraphicalTesting","text":"test hypotheses using p-values (information stats) base current graph. Users can call function multiple times. P-values order passed stats together. P-values multiple orders can passed together well. example, users p-values current stage, can call function update graph accordingly. case, column order stats constant. can call function p-values next stage available, order another integer. simulation, p-values stages hand, users can call function test single pass. case, column order stats can different values.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$test(stats)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"stats data frame. must contain following columns: order integer. P-values (among others) hypotheses can tested time (e.g., interim, final analysis) labeled order number. hypothesis tested stage, simply put stats order number. p-values stats tested stage, order can absent. hypotheses character. Name hypotheses tested. identical calling GraphicalTesting$new. p nominal p-values. info observed number events samples test. used compute information fractions group sequential design. max_info integers. Maximum information test. interim, max_info equal planned_max_info calling GraphicalTesting$new. final stage hypothesis, one can update observed numbers. alpha_spent accumulative proportion allocated alpha spent alpha_spending = \"asUser\". Set NA_real_ otherwise. hypothesis uses \"asUser\" stats, column ignored.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Class of GraphicalTesting — GraphicalTesting","text":"data frame returned get_current_testing_results. contains details testing steps.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-get-current-testing-results-","dir":"Reference","previous_headings":"","what":"Method get_current_testing_results()","title":"Class of GraphicalTesting — GraphicalTesting","text":"return testing results details time function called. function can called users multiple times, thus returned value varies time. function called GraphicalTesting::test, returns data frame consisting columns hypothesis name hypotheses. obs_p_value observed p-values. max_allocated_alpha maximum allocated alpha hypothesis. decision 'reject' 'accept' hypotheses. stages stage hypothesis. order order number hypothesis tested last time. different stages. typeOfDesign name alpha spending functions.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$get_current_testing_results()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-get-current-decision-","dir":"Reference","previous_headings":"","what":"Method get_current_decision()","title":"Class of GraphicalTesting — GraphicalTesting","text":"get current decisions hypotheses. Returned value changes time depends stages tested already.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$get_current_decision()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Class of GraphicalTesting — GraphicalTesting","text":"named vector values \"accept\" \"reject\". Note hypothesis yet tested calling function, decision hypothesis \"accept\".","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Class of GraphicalTesting — GraphicalTesting","text":"generic function print","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$print(graph = TRUE, trajectory = TRUE, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"graph logic. TRUE visualizing current graph, can vary time. trajectory logic. TRUE print current data frame trajectory, can vary time. ... arguments supported gMCPLite::hGraph, e.g., trhw trhh control size transition box, trdigits control digits displayed transition weights.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class of GraphicalTesting — GraphicalTesting","text":"objects class cloneable method.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"usage-24","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"GraphicalTesting$clone(deep = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GraphicalTesting — GraphicalTesting","text":"deep Whether make deep clone.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GraphicalTesting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of GraphicalTesting — GraphicalTesting","text":"","code":"## Example 1 ## dry-run to study the behavior of a graph ## without group sequential design if(interactive()){ eps <- .01 alpha <- c(.01, .04, 0, 0, 0) transition <- matrix(c(   0, 0, 0, 0, 1,   0, 0, .75, 0, .25,   0, 1/2-eps/2, 0, eps, 1/2-eps/2,   0, 0, 0, 0, 0,   0, 1/2, 1/2, 0, 0 ), nrow = 5, byrow = TRUE)  ## dummy can be anything, we don't actually use it asf <- rep('asOF', 5) ## dummy can be anything, we don't actually use it max_info <- c(300, 1100, 1100, 1100, 500)  hs <- c('H1: UPCR IgA', 'H2: eGFR GN', 'H3: eGFR GN 10wk', 'H5: 2nd Endpoints', 'H4: eGFR IgA')  ## initialize an object gt <- GraphicalTesting$new(alpha, transition, asf, max_info, hs) print(gt)  ## reject hypotheses based on customized order ## to understand the behavior of a testing strategy ## Any other rejection order is possible gt$reject_a_hypothesis('H1: UPCR IgA') print(gt)  gt$reject_a_hypothesis('H2: eGFR GN') print(gt)  gt$reject_a_hypothesis('H4: eGFR IgA') print(gt)  gt$reject_a_hypothesis('H3: eGFR GN 10wk') print(gt)  gt$reset() }  ## Example 2 ## Example modified from vignettes in gMCPLite: ## Graphical testing for group sequential design if(interactive()){ ## initial alpha split to each of the hypotheses alpha <- c(.01, .01, .004, .0, .0005, .0005)  ## transition matrix of the initial graph transition <- matrix(c(   0, 1, 0, 0, 0, 0,   0, 0, .5, .5, 0, 0,   0, 0, 0, 1, 0, 0,   0, 0, 0, 0, .5, .5,   0, 0, 0, 0, 0, 1,   .5, .5, 0, 0, 0, 0 ), nrow = 6, byrow = TRUE)  ## alpha spending functions per hypothesis asf <- c('asUser', 'asOF', 'asUser', 'asOF', 'asOF', 'asOF')  ## planned maximum number of events per hypothesis max_info <- c(295, 800, 310, 750, 500, 1100)  ## name of hypotheses hs <- c('H1: OS sub',         'H2: OS all',         'H3: PFS sub',         'H4: PFS all',         'H5: ORR sub',         'H6: ORR all')  gt <- GraphicalTesting$new(alpha, transition, asf, max_info, hs)  ## print initial graph gt  ## nominal p-values at each stage ## Note: p-values with same order are calculated with the same locked data ## Note: alpha_spent is only specified for hypotheses using custom alpha ##       spending function \"asUser\" stats <-   data.frame(     order = c(1:3, 1:3, 1:2, 1:2, 1, 1),     hypotheses = c(rep('H1: OS sub',3), rep('H2: OS all',3),     'H5: ORR sub', 'H6: ORR all'),     p = c(.03, .0001, .000001, .2, .15, .1, .2, .001, .3, .2, .00001, .1),     info = c(185, 245, 295, 529, 700, 800, 265, 310, 675, 750, 490, 990),     is_final = c(F, F, T, F, F, T, F, T, F, T, T, T),     max_info = c(rep(295, 3), rep(800, 3), rep(310, 2), rep(750, 2), 490, 990),     alpha_spent = c(c(.1, .4, 1), rep(NA, 3), c(.3, 1), rep(NA, 2), NA, NA)   )  ## test the p-values from the first analysis, plot the updated graph gt$test(stats %>% dplyr::filter(order==1))  ## test the p-values from the second analysis, plot the updated graph gt$test(stats %>% dplyr::filter(order==2))  ## test the p-values from the third analysis, plot the updated graph ## because no futher test would be done, displayed results are final gt$test(stats %>% dplyr::filter(order==3))   ## plot the final status of the graph print(gt, trajectory = FALSE)  ## you can get final testing results as follow gt$get_current_testing_results()  ## if you want to see step-by-step details print(gt$get_trajectory())  ## equivalently, you can call gt$test(stats) for only once to get same results. gt$reset() gt$test(stats)  ## if you only want to get the final testing results gt$get_current_decision() }"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Class of GroupSequentialTest — GroupSequentialTest","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"Perform group sequential test single endpoint based sequential one-sided p-values stages. Selected alpha spending functions, including user-defined functions, supported. Boundaries calculated `rpact`. final analysis, adjustment can applied -running -running trial observed final information greater lower planned maximum information. See Wassmer & Brannath, 2016, p78f. test based p-values z statistics easier handling direction alternative hypothesis current implementation. addition, one one-sided test supported sufficient common use clinical design.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"GroupSequentialTest$new() GroupSequentialTest$get_name() GroupSequentialTest$get_alpha() GroupSequentialTest$set_alpha_spending() GroupSequentialTest$get_alpha_spending() GroupSequentialTest$get_max_info() GroupSequentialTest$set_max_info() GroupSequentialTest$get_stage() GroupSequentialTest$reset() GroupSequentialTest$set_trajectory() GroupSequentialTest$get_trajectory() GroupSequentialTest$get_stage_level() GroupSequentialTest$test_one() GroupSequentialTest$test() GroupSequentialTest$print() GroupSequentialTest$clone()","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"initialize group sequential test. Now support one-sided test based p-values.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$new(   alpha = 0.025,   alpha_spending = c(\"asP\", \"asOF\", \"asUser\"),   planned_max_info,   name = \"H0\",   silent = TRUE )"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"alpha familywise error rate alpha_spending alpha spending function. Use \"asUser\" custom alpha spending schedule used. planned_max_info integer. Planned maximum number patients non-tte endpoints number events tte endpoints name character. Name hypothesis, e.g. endpoint, subgroup, etc. Optional. silent TRUE muting messages.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-get-name-","dir":"Reference","previous_headings":"","what":"Method get_name()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"get name hypothesis","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$get_name()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-get-alpha-","dir":"Reference","previous_headings":"","what":"Method get_alpha()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"get overall alpha","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$get_alpha()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-set-alpha-spending-","dir":"Reference","previous_headings":"","what":"Method set_alpha_spending()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"set alpha spending function. useful set 'asUser' final stage adjust - -running trial.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$set_alpha_spending(asf)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"asf character alpha spending function.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-get-alpha-spending-","dir":"Reference","previous_headings":"","what":"Method get_alpha_spending()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"return character alpha spending function","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$get_alpha_spending()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-get-max-info-","dir":"Reference","previous_headings":"","what":"Method get_max_info()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"return planned maximum information","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$get_max_info()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-set-max-info-","dir":"Reference","previous_headings":"","what":"Method set_max_info()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"set planned maximum information. used final stage adjust - -running trial.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$set_max_info(obs_max_info)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"obs_max_info integer. Maximum information, observed number patients events final stage.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-get-stage-","dir":"Reference","previous_headings":"","what":"Method get_stage()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"get current stage.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$get_stage()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-reset-","dir":"Reference","previous_headings":"","what":"Method reset()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"object class GroupSequentialTest designed used sequentially calling GroupSequentialTest$test. planned tests performed, analysis done. case keep calling GroupSequentialTest$test trigger error. reuse object new set staged p-values, call function reset status stage 1. See examples. implementation can prevent error planned number stages tested.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$reset()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-set-trajectory-","dir":"Reference","previous_headings":"","what":"Method set_trajectory()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"save testing result current stage","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$set_trajectory(result, is_final = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"result data frame storing testing result stage. is_final logical. TRUE final test hypothesis, FALSE otherwise.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-get-trajectory-","dir":"Reference","previous_headings":"","what":"Method get_trajectory()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"return testing trajectory current stage. function can called stage. See examples.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$get_trajectory()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-get-stage-level-","dir":"Reference","previous_headings":"","what":"Method get_stage_level()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"compute boundaries given current (potentially updated) settings. returns different values settings changed time.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$get_stage_level()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-test-one-","dir":"Reference","previous_headings":"","what":"Method test_one()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"test hypothesis given p-value current stage","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$test_one(   p_value,   is_final,   observed_info,   alpha_spent = NA_real_ )"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"p_value numeric. p-value. is_final logical. TRUE test carried final analysis. observed_info integer. Observed information current stage. can number samples (non-tte) number events (tte) test. current stage final, observed_info used update planned_max_info, alpha spending function (typeOfDesign rpact) updated 'asUser', argument userAlphaSpending used calling rpact::getDesignGroupSequential. alpha_spent numeric alpha_spending = \"asUser\". must 0 alpha, overall alpha test. NA_real_ alpha spending functions \"asOF\" \"asP\".","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-test-","dir":"Reference","previous_headings":"","what":"Method test()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"Carry test based group sequential design. p_values NULL, dummy values use boundaries calculated users review.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$test(   observed_info,   is_final,   p_values = NULL,   alpha_spent = NULL )"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"observed_info vector integers, observed information stages. is_final logical vector. TRUE test final analysis. p_values vector p-values. specified, length equal length observed_info. alpha_spent accumulative alpha spent observed information. numeric vector values 0 1, length equals length(observed_info) alpha-spending function \"asUser\". Otherwise NULL.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"generic function print","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$print()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"objects class cloneable method.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"GroupSequentialTest$clone(deep = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"deep Whether make deep clone.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/GroupSequentialTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of GroupSequentialTest — GroupSequentialTest","text":"","code":"## Note: examples showed here replicate the results from ## https://www.rpact.org/vignettes/planning/rpact_boundary_update_example/  ## Example 1. Generate boundaries for a pre-fix group sequential design gst <- GroupSequentialTest$new(   alpha = .025, alpha_spending = 'asOF',   planned_max_info = 387)  ## without giving p-values, boundaries are returned without actual testing gst$test(observed_info = c(205, 285, 393), is_final = c(FALSE, FALSE, TRUE)) gst #>   typeOfDesign stages informationRates alpha sided alphaSpent criticalValues #> 1         asOF      1        0.5216285 0.025     1 0.00207258       2.866898 #> 2         asOF      2        0.7251908 0.025     1 0.00900462       2.392987 #> 3       asUser      3        1.0000000 0.025     1 0.02499999       2.013686 #>   stageLevels obs_p_value decision hypothesis #> 1 0.002072584          NA       NA         H0 #> 2 0.008355905          NA       NA         H0 #> 3 0.022021239          NA       NA         H0  ## Example 2. Calculate boundaries with observed information at stages ## No p-values are provided  ## get an error without resetting an used object try( gst$test(observed_info = 500, is_final = FALSE) ) #> Error in gst$test(observed_info = 500, is_final = FALSE) :  #>   Group sequential test has been completed.  #> No further test is available.  #> Run GroupSequentialTest$reset() and try again.   ## reset the object for re-use gst$reset() #> GroupSequentialTest object <H0> has been reset and is ready to use.  gst$test(observed_info = c(205, 285, 393), is_final = c(FALSE, FALSE, TRUE)) gst #>   typeOfDesign stages informationRates alpha sided alphaSpent criticalValues #> 1         asOF      1        0.5216285 0.025     1 0.00207258       2.866898 #> 2         asOF      2        0.7251908 0.025     1 0.00900462       2.392987 #> 3       asUser      3        1.0000000 0.025     1 0.02499999       2.013686 #>   stageLevels obs_p_value decision hypothesis #> 1 0.002072584          NA       NA         H0 #> 2 0.008355905          NA       NA         H0 #> 3 0.022021239          NA       NA         H0  ## Example 3. Test stagewise p-values sequentially gst$reset() #> GroupSequentialTest object <H0> has been reset and is ready to use.   gst$test(observed_info = 205, is_final = FALSE, p_values = .09) gst$test(285, FALSE, .006)  ## print testing trajectory by now gst #>   typeOfDesign stages informationRates alpha sided alphaSpent criticalValues #> 1         asOF      1        0.5297158 0.025     1 0.00207258       2.866898 #> 2         asOF      2        0.7364341 0.025     1 0.00900462       2.392987 #>   stageLevels obs_p_value decision hypothesis #> 1 0.002072584       0.090   accept         H0 #> 2 0.008355905       0.006   reject         H0  gst$test(393, TRUE, 002)  ## print all testing trajectory gst #>   typeOfDesign stages informationRates alpha sided alphaSpent criticalValues #> 1         asOF      1        0.5216285 0.025     1 0.00207258       2.866898 #> 2         asOF      2        0.7251908 0.025     1 0.00900462       2.392987 #> 3       asUser      3        1.0000000 0.025     1 0.02499999       2.013686 #>   stageLevels obs_p_value decision hypothesis #> 1 0.002072584       0.090   accept         H0 #> 2 0.008355905       0.006   reject         H0 #> 3 0.022021239       2.000   accept         H0  ## you can also test all stages at once ## the result is the same as calling test() for each of the stages gst$reset() #> GroupSequentialTest object <H0> has been reset and is ready to use.  gst$test(c(205, 285, 393), c(FALSE, FALSE, TRUE), c(.09, .006, .002)) gst #>   typeOfDesign stages informationRates alpha sided alphaSpent criticalValues #> 1         asOF      1        0.5216285 0.025     1 0.00207258       2.866898 #> 2         asOF      2        0.7251908 0.025     1 0.00900462       2.392987 #> 3       asUser      3        1.0000000 0.025     1 0.02499999       2.013686 #>   stageLevels obs_p_value decision hypothesis #> 1 0.002072584       0.090   accept         H0 #> 2 0.008355905       0.006   reject         H0 #> 3 0.022021239       0.002   reject         H0  ## Example 4. use user-define alpha spending gst <- GroupSequentialTest$new(   alpha = .025, alpha_spending = 'asUser',   planned_max_info = 387)  gst$test(   observed_info = c(205, 285, 393),   is_final = c(FALSE, FALSE, TRUE),   alpha_spent = c(.005, .0125, .025)) gst #>   typeOfDesign stages informationRates alpha sided alphaSpent criticalValues #> 1       asUser      1        0.5216285 0.025     1 0.00499999       2.575898 #> 2       asUser      2        0.7251908 0.025     1 0.01249999       2.309700 #> 3       asUser      3        1.0000000 0.025     1 0.02499999       2.065005 #>   stageLevels obs_p_value decision hypothesis #> 1 0.004999005          NA       NA         H0 #> 2 0.010452387          NA       NA         H0 #> 3 0.019461267          NA       NA         H0"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listener.html","id":null,"dir":"Reference","previous_headings":"","what":"Class of Listener — Listener","title":"Class of Listener — Listener","text":"Create class listener. listener monitors trial checking condition pre-defined events. Actions triggered executed automatically.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listener.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class of Listener — Listener","text":"Listener$new() Listener$add_events() Listener$get_events() Listener$get_event_names() Listener$monitor() Listener$mute() Listener$clone()","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listener.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class of Listener — Listener","text":"initialize listener","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listener.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Listener — Listener","text":"","code":"Listener$new()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listener.html","id":"method-add-events-","dir":"Reference","previous_headings":"","what":"Method add_events()","title":"Class of Listener — Listener","text":"register events listener. Order ... matter scanned order. user's responsibility use reasonable order calling function, otherwise, result Listener$monitor() can problematic.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listener.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Listener — Listener","text":"","code":"Listener$add_events(...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listener.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Listener — Listener","text":"... events","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listener.html","id":"method-get-events-","dir":"Reference","previous_headings":"","what":"Method get_events()","title":"Class of Listener — Listener","text":"return registered events","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listener.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Listener — Listener","text":"","code":"Listener$get_events(event_name = NULL)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listener.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Listener — Listener","text":"event_name return Event object given name(s). NULL, registered events returned.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listener.html","id":"method-get-event-names-","dir":"Reference","previous_headings":"","what":"Method get_event_names()","title":"Class of Listener — Listener","text":"return names registered events","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listener.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Listener — Listener","text":"","code":"Listener$get_event_names()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listener.html","id":"method-monitor-","dir":"Reference","previous_headings":"","what":"Method monitor()","title":"Class of Listener — Listener","text":"scan, check, trigger registered events. Events triggered order calling Listener$add_events.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listener.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Listener — Listener","text":"","code":"Listener$monitor(trial, dry_run)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listener.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Listener — Listener","text":"trial Trial object. dry_run logical. See Controller::run information.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listener.html","id":"method-mute-","dir":"Reference","previous_headings":"","what":"Method mute()","title":"Class of Listener — Listener","text":"mute messages (including warnings)","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listener.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Listener — Listener","text":"","code":"Listener$mute(silent)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listener.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Listener — Listener","text":"silent logical.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listener.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class of Listener — Listener","text":"objects class cloneable method.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listener.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Listener — Listener","text":"","code":"Listener$clone(deep = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listener.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Listener — Listener","text":"deep Whether make deep clone.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Listener.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of Listener — Listener","text":"","code":"##"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/PiecewiseConstantExponentialRNG.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate time-to-event endpoint from piecewise constant exponential distribution — PiecewiseConstantExponentialRNG","title":"Generate time-to-event endpoint from piecewise constant exponential distribution — PiecewiseConstantExponentialRNG","text":"Implementation based algorithm.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/PiecewiseConstantExponentialRNG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate time-to-event endpoint from piecewise constant exponential distribution — PiecewiseConstantExponentialRNG","text":"","code":"PiecewiseConstantExponentialRNG(n, risk, endpoint_name)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/PiecewiseConstantExponentialRNG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate time-to-event endpoint from piecewise constant exponential distribution — PiecewiseConstantExponentialRNG","text":"n number random numbers risk data frame columns end_time End time constant risk time window. start time first time window 0. piecewise_risk constant risk time window, absolute risk * relative risk, (h0 * g) link. hazard_ratio optional column simulating active arm. absent, column 1s added. Equivalently, user can multiply piecewise_risk hazard_ratio manually ignore column. endpoint_name name endpoint","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/PiecewiseConstantExponentialRNG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate time-to-event endpoint from piecewise constant exponential distribution — PiecewiseConstantExponentialRNG","text":"","code":"# example code # In this example, absolute risk in [0, 1) and [26, 52] are 0.0181 and # 0.0027, respectively. risk <- data.frame(   end_time = c(1, 4.33, 26.0, 52.0),   piecewise_risk = c(1, 1.01, 0.381, 0.150) * exp(-4.01) ) PiecewiseConstantExponentialRNG(10, risk, 'PFS') #>          PFS PFS_event #> 1   2.486158         1 #> 2  52.000000         0 #> 3  12.369812         1 #> 4  52.000000         0 #> 5  52.000000         0 #> 6  52.000000         0 #> 7   7.361137         1 #> 8  52.000000         0 #> 9  52.000000         0 #> 10 52.000000         0"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/StaggeredRecruiter.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate enrollment time from piecewise constant uniform distribution — StaggeredRecruiter","title":"Generate enrollment time from piecewise constant uniform distribution — StaggeredRecruiter","text":"Accrual rate can 10 patients/months first 2 months, 20 patients/ months second 2 months, eventually 30 patients/months end trial.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/StaggeredRecruiter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate enrollment time from piecewise constant uniform distribution — StaggeredRecruiter","text":"","code":"StaggeredRecruiter(n, accrual_rate)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/StaggeredRecruiter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate enrollment time from piecewise constant uniform distribution — StaggeredRecruiter","text":"n number random numbers accrual_rate data frame columns end_time:     End time constant rate time window. start time     first time window 0. piecewise_rate:     constant rate time window. number patients     recruited window window length x piecewise_rate","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/StaggeredRecruiter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate enrollment time from piecewise constant uniform distribution — StaggeredRecruiter","text":"","code":"accrual_rate <- data.frame(   end_time = c(12, 13:17, Inf),   piecewise_rate = c(15, 15 + 6 * (1:5), 45) )  accrual_rate <- data.frame(   end_time = c(3, 4, 5, 8, Inf),   piecewise_rate = c(1, 2, 2, 3, 4) )  StaggeredRecruiter(30, accrual_rate) #>  [1]  1.000000  2.000000  3.000000  3.500000  4.000000  4.500000  5.000000 #>  [8]  5.333333  5.666667  6.000000  6.333333  6.666667  7.000000  7.333333 #> [15]  7.666667  8.000000  8.250000  8.500000  8.750000  9.000000  9.250000 #> [22]  9.500000  9.750000 10.000000 10.250000 10.500000 10.750000 11.000000 #> [29] 11.250000 11.500000"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":null,"dir":"Reference","previous_headings":"","what":"Class of Trial — Trial","title":"Class of Trial — Trial","text":"Create class trial.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Class of Trial — Trial","text":"Trial$new() Trial$get_trial_data() Trial$get_duration() Trial$set_enroller() Trial$get_enroller() Trial$set_dropout() Trial$get_dropout() Trial$roll_back() Trial$remove_arms() Trial$update_sample_ratio() Trial$add_arms() Trial$get_name() Trial$get_description() Trial$get_arms() Trial$get_arms_name() Trial$get_number_arms() Trial$has_arm() Trial$get_an_arm() Trial$get_sample_ratio() Trial$get_number_patients() Trial$get_number_enrolled_patients() Trial$get_number_unenrolled_patients() Trial$get_randomization_queue() Trial$get_enroll_time() Trial$enroll_a_patient() Trial$enroll_patients() Trial$set_current_time() Trial$get_current_time() Trial$get_event_tables() Trial$get_data_lock_time_by_event_number() Trial$get_data_lock_time_by_calendar_time() Trial$get_locked_data() Trial$get_locked_data_name() Trial$get_event_number() Trial$save_event_time() Trial$get_event_time() Trial$lock_data() Trial$event_plot() Trial$censor_trial_data() Trial$save() Trial$save_custom_data() Trial$get_custom_data() Trial$get_output() Trial$mute() Trial$set_tester() Trial$get_tester() Trial$independentIncrement() Trial$dunnettTest() Trial$closedTest() Trial$get_seed() Trial$print() Trial$clone()","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Class of Trial — Trial","text":"initialize trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$new(   name,   n_patients,   duration,   description = name,   seed = NULL,   enroller,   dropout = NULL,   ... )"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"name character. Name trial. n_patients integer. Maximum number patients enrolled trial. duration Numeric. Trial duration. description character. Optional description trial. default set trial's name. seed random seed. NULL, set.seed() called, uses seed set outside. enroller function returning vector enrollment time patients. first argument number enrolled patients. dropout function returning vector dropout time patients. first argument number enrolled patients. ... arguments enroller dropout.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-trial-data-","dir":"Reference","previous_headings":"","what":"Method get_trial_data()","title":"Class of Trial — Trial","text":"return trial data enrolled patients time function called","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_trial_data()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-duration-","dir":"Reference","previous_headings":"","what":"Method get_duration()","title":"Class of Trial — Trial","text":"return maximum duration trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_duration()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-set-enroller-","dir":"Reference","previous_headings":"","what":"Method set_enroller()","title":"Class of Trial — Trial","text":"set recruitment curve initialize trial.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$set_enroller(func, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"func function generate enrollment time. can built-function like `rexp` customized functions like `StaggeredRecruiter`. ... arguments func.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-enroller-","dir":"Reference","previous_headings":"","what":"Method get_enroller()","title":"Class of Trial — Trial","text":"get function recruitment curve","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_enroller()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-set-dropout-","dir":"Reference","previous_headings":"","what":"Method set_dropout()","title":"Class of Trial — Trial","text":"set distribution drop time. can done initialize trial, updating trial adaptive design.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$set_dropout(func, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"func function generate dropout time. can built-function like `rexp` customized functions. ... arguments func.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-dropout-","dir":"Reference","previous_headings":"","what":"Method get_dropout()","title":"Class of Trial — Trial","text":"get generator dropout time","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_dropout()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-roll-back-","dir":"Reference","previous_headings":"","what":"Method roll_back()","title":"Class of Trial — Trial","text":"roll back data current time trial. , Trial$trial_data cut current time, data deleted. However, Trial$enroll_time current time kept unchanged planned enrollment curve.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$roll_back()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-remove-arms-","dir":"Reference","previous_headings":"","what":"Method remove_arms()","title":"Class of Trial — Trial","text":"remove arms trial. enroll_patients() always called end enroll remaining patients Trial$get_current_time(). function may used futility analysis, dose selection, enrichment analysis (sub-population) interim analysis (early stop efficacy)","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$remove_arms(arms_name)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"arms_name character vector. Name arms removed.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-update-sample-ratio-","dir":"Reference","previous_headings":"","what":"Method update_sample_ratio()","title":"Class of Trial — Trial","text":"update sample ratio arm. happen arm added removed. may want update sample ratio unaffected arms well. function can update sample ratio one arm time. sample ratio updated, trial data rolled back updated randomization queue. Data unenrolled patients re-sampled well.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$update_sample_ratio(arm_name, sample_ratio)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"arm_name character. Name arm length 1. sample_ratio integer. Sample ratio arm.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-add-arms-","dir":"Reference","previous_headings":"","what":"Method add_arms()","title":"Class of Trial — Trial","text":"add one arms trial. enroll_patients() called end enroll remaining patients private$randomization_queue. function can used two scenarios. (1) add arms right trial created (.e., Trial$new(...)). sample_ratio arms added ... length. (2) add arms trial already arm(s)","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$add_arms(sample_ratio, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"sample_ratio integer vector. Sample ratio permuted block randomization. appended existing sample ratio trial. ... one objects class Arm. One exception ... argument enforce. enforce = TRUE, sample ratio newly added arm. rolls back patients Trial$get_current_time(), .e. redo randomization patients. can useful add arms one one creating trial. Note can run Trial$add_arm(sample_ratio1, arm1) followed Trial$add_arm(sample_ratio2, enforce = TRUE, arm2). expected similar result Trial$add_arms(c(sample_ratio1, sample_ratio2), arm1, arm2). Note two method return exactly trial randomization_queue generated twice first approach second approach. statistically, equivalent distribution.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-name-","dir":"Reference","previous_headings":"","what":"Method get_name()","title":"Class of Trial — Trial","text":"return name trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_name()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-description-","dir":"Reference","previous_headings":"","what":"Method get_description()","title":"Class of Trial — Trial","text":"return description trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_description()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-arms-","dir":"Reference","previous_headings":"","what":"Method get_arms()","title":"Class of Trial — Trial","text":"return list arms trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_arms()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-arms-name-","dir":"Reference","previous_headings":"","what":"Method get_arms_name()","title":"Class of Trial — Trial","text":"return arms' name trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_arms_name()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-number-arms-","dir":"Reference","previous_headings":"","what":"Method get_number_arms()","title":"Class of Trial — Trial","text":"get number arms trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_number_arms()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-has-arm-","dir":"Reference","previous_headings":"","what":"Method has_arm()","title":"Class of Trial — Trial","text":"check trial arm. Return TRUE FALSE.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$has_arm()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-an-arm-","dir":"Reference","previous_headings":"","what":"Method get_an_arm()","title":"Class of Trial — Trial","text":"return arm","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_an_arm(arm_name)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"arm_name character, name arm extracted","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-sample-ratio-","dir":"Reference","previous_headings":"","what":"Method get_sample_ratio()","title":"Class of Trial — Trial","text":"return current sample ratio trial. ratio can probably change trial (e.g., arm removed added)","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_sample_ratio(arm_names = NULL)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"arm_names character vector arms.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-number-patients-","dir":"Reference","previous_headings":"","what":"Method get_number_patients()","title":"Class of Trial — Trial","text":"return number patients planning trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_number_patients()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-number-enrolled-patients-","dir":"Reference","previous_headings":"","what":"Method get_number_enrolled_patients()","title":"Class of Trial — Trial","text":"return number enrolled (randomized) patients","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_number_enrolled_patients()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-number-unenrolled-patients-","dir":"Reference","previous_headings":"","what":"Method get_number_unenrolled_patients()","title":"Class of Trial — Trial","text":"return number unenrolled patients","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_number_unenrolled_patients()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-randomization-queue-","dir":"Reference","previous_headings":"","what":"Method get_randomization_queue()","title":"Class of Trial — Trial","text":"return randomization queue planned yet enrolled patients. function update randomization_queue, just return value debugging purpose.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_randomization_queue(index = NULL)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"index index extracted. Return queue NULL.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-enroll-time-","dir":"Reference","previous_headings":"","what":"Method get_enroll_time()","title":"Class of Trial — Trial","text":"return enrollment time planned yet enrolled patients. function update enroll_time, just return value debugging purpose.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_enroll_time(index = NULL)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"index index extract. Return enroll time NULL.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-enroll-a-patient-","dir":"Reference","previous_headings":"","what":"Method enroll_a_patient()","title":"Class of Trial — Trial","text":"assign new patient arm based planned randomization queue may consider make function deprecated. Instead, like function sample remaining n patients, n argument. Reason: action (analysis, add/remove arm, early stop) triggered based number event TTE, may need sample patients know accurate time point. enrollment function one patient, can find time point roll back , recover randomization queue enrollment time remaining patients.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-24","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$enroll_a_patient()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-enroll-patients-","dir":"Reference","previous_headings":"","what":"Method enroll_patients()","title":"Class of Trial — Trial","text":"assign new patients pre-planned randomization queue pre-specified enrollment time.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-25","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$enroll_patients(n_patients = NULL)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"n_patients number new patients enrolled. NULL, remaining patients plan enrolled. Error may triggered n_patients greater remaining patients planned.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-set-current-time-","dir":"Reference","previous_headings":"","what":"Method set_current_time()","title":"Class of Trial — Trial","text":"set current time trial. data collected changed. private$now set event triggered (Event class, futility, interim, etc), arm added removed result event","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-26","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$set_current_time(time)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"time current calendar time trial.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-current-time-","dir":"Reference","previous_headings":"","what":"Method get_current_time()","title":"Class of Trial — Trial","text":"return current time trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-27","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_current_time()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-event-tables-","dir":"Reference","previous_headings":"","what":"Method get_event_tables()","title":"Class of Trial — Trial","text":"count accumulative number events (TTE) samples (otherwise) calendar time (enroll time + tte TTE, enroll time + readout otherwise)","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-28","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_event_tables(arms = NULL)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"arms vector arms' name event tables created. NULL, arms trial used.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-data-lock-time-by-event-number-","dir":"Reference","previous_headings":"","what":"Method get_data_lock_time_by_event_number()","title":"Class of Trial — Trial","text":"given set endpoints target number events, determine data lock time Event (futility, interim, final (?)). function change trial object (e.g. rolling back yet randomized patients found data lock time).","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-29","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_data_lock_time_by_event_number(   endpoints,   arms,   target_n_events,   type = c(\"all\", \"any\") )"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"endpoints character vector. Data lock time determined set endpoints. arms vector arms' name number events counted. target_n_events target number events endpoints. type target number events reached. target number events reached.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Class of Trial — Trial","text":"data lock time","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of Trial — Trial","text":"","code":"## trial$get_data_lock_time_by_event_number(c('pfs','orr'), c(200,500), 'any')"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-data-lock-time-by-calendar-time-","dir":"Reference","previous_headings":"","what":"Method get_data_lock_time_by_calendar_time()","title":"Class of Trial — Trial","text":"given calendar time lock data, return event counts endpoints.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-30","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_data_lock_time_by_calendar_time(calendar_time, arms)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"calendar_time numeric. Calendar time lock data arms vector arms' name number events counted.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Class of Trial — Trial","text":"data lock time","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of Trial — Trial","text":"","code":"## trial$get_data_lock_time_by_calendar_time(20)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-locked-data-","dir":"Reference","previous_headings":"","what":"Method get_locked_data()","title":"Class of Trial — Trial","text":"return locked data event","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-31","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_locked_data(event_name)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"event_name character, event name locked data extracted.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-locked-data-name-","dir":"Reference","previous_headings":"","what":"Method get_locked_data_name()","title":"Class of Trial — Trial","text":"return names locked data","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-32","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_locked_data_name()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-event-number-","dir":"Reference","previous_headings":"","what":"Method get_event_number()","title":"Class of Trial — Trial","text":"return number events lock time","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-33","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_event_number(event_name = NULL)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"event_name names triggered events. Use triggered events NULL.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-save-event-time-","dir":"Reference","previous_headings":"","what":"Method save_event_time()","title":"Class of Trial — Trial","text":"save time new event.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-34","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$save_event_time(event_time, event_name)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"event_time numeric. Time new event. event_name character. Name new event.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-event-time-","dir":"Reference","previous_headings":"","what":"Method get_event_time()","title":"Class of Trial — Trial","text":"return event time triggering given event","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-35","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_event_time(event_name)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-18","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"event_name character. Name event.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-lock-data-","dir":"Reference","previous_headings":"","what":"Method lock_data()","title":"Class of Trial — Trial","text":"lock data specific calendar time. time--event endpoints, event indicator *_event updated accordingly. Locked data stored separately. OVERWRITE/UPDATE private$trial_data! can lose actual time--event information. example, patient may censored first data lock. However, may event observed later data lock.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-36","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$lock_data(at_calendar_time, event_name)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-19","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"at_calendar_time time point lock trial data event_name assign event name name locked data future reference.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-event-plot-","dir":"Reference","previous_headings":"","what":"Method event_plot()","title":"Class of Trial — Trial","text":"plot cumulative number events/samples calendar time.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-37","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$event_plot()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-censor-trial-data-","dir":"Reference","previous_headings":"","what":"Method censor_trial_data()","title":"Class of Trial — Trial","text":"censor trial data calendar time","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-38","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$censor_trial_data(censor_at = NULL, selected_arms = NULL)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-20","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"censor_at time censoring. set trial duration NULL. selected_arms censoring applied selected arms (e.g., removed arms) . NULL, set available arms trial data. Otherwise, censoring applied user-specified arms . necessary number events/sample size removed arms fixed unchanged since corresponding event triggered. case, one can update trial data something like censor_trial_data(censor_at = event_time, selected_arms = removed_arms).","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-save-","dir":"Reference","previous_headings":"","what":"Method save()","title":"Class of Trial — Trial","text":"save single value one-row data frame trial's output analysis/summary later.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-39","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$save(value, name = \"\", overwrite = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-21","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"value value saved. can vector (length 1) data frame (one row). name character name saved object. used name column trial's output value vector. value data frame, name prefix pasted column name value trial's output. user want use value's column name trial's output, set name '' default. Otherwise, column name , e.g., \"{name}_<{names(value)}>\". overwrite logic. TRUE overwriting existing entries warning, otherwise, throwing error stop.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-save-custom-data-","dir":"Reference","previous_headings":"","what":"Method save_custom_data()","title":"Class of Trial — Trial","text":"save arbitrary (number ) objects trial users can use control workflow. common use case store simulation parameters used action functions.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-40","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$save_custom_data(value, name, overwrite = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-22","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"value value saved. type. name character. Name value accessed later. overwrite logic. TRUE overwriting existing entries warning, otherwise, throwing error stop.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-custom-data-","dir":"Reference","previous_headings":"","what":"Method get_custom_data()","title":"Class of Trial — Trial","text":"return saved custom data specified name.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-41","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_custom_data(name)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-23","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"name character. Name custom data accessed.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-output-","dir":"Reference","previous_headings":"","what":"Method get_output()","title":"Class of Trial — Trial","text":"return data frame current outputs saved calling save.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-42","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_output(cols = NULL, simplify = TRUE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-24","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"cols columns returned Trial$output. NULL, columns returned. simplify logical. Return value rather data frame one column length(col) == 1 simplify == TRUE.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-mute-","dir":"Reference","previous_headings":"","what":"Method mute()","title":"Class of Trial — Trial","text":"mute messages (including warnings)","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-43","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$mute(silent)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-25","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"silent logical.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-set-tester-","dir":"Reference","previous_headings":"","what":"Method set_tester()","title":"Class of Trial — Trial","text":"set tester, now can object class GraphicalTesting.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-44","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$set_tester(tester)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-26","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"tester object class GraphicalTesting","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-tester-","dir":"Reference","previous_headings":"","what":"Method get_tester()","title":"Class of Trial — Trial","text":"return tester, now GraphicalTesting object.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-45","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_tester()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-independentincrement-","dir":"Reference","previous_headings":"","what":"Method independentIncrement()","title":"Class of Trial — Trial","text":"calculate independent increments given set events","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-46","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$independentIncrement(endpoint, placebo, events, planned_info, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-27","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"endpoint character. Name time--event endpoint trial's locked data. placebo character. String placebo trial's locked data. events character vector event names trial, e.g., listener$get_event_names(). planned_info vector planned accumulative number event time--event endpoint. Note: planned_info can also character \"oracle\" planned number events set observed number events, case inverse normal z statistics equal one-sided logrank statistics. purpose debugging . formal simulation, \"oracle\" used adaptation present. Pre-fixed planned_info used create weights combination test controls family-wise error rate strong sense. ... subset condition compatible dplyr::filter. survdiff fitted subset compute one-sided logrank statistics. useful trial consists two arms. default specified, data used fit model.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Class of Trial — Trial","text":"function returns data frame columns: p_inverse_normal one-sided p-value inverse normal test based logrank test (alternative hypothesis: risk higher placebo arm). Accumulative data used. z_inverse_normal z statistics p_inverse_normal. Accumulative data used. p_lr one-sided p-value logrank test  (alternative hypothesis: risk higher placebo arm). Accumulative data used. z_lr z statistics p_lr. Accumulative data used. info observed accumulative event number. planned_info planned accumulative event number. info_pbo observed accumulative event number placebo. info_trt observed accumulative event number treatment arm. wt weights z_inverse_normal.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of Trial — Trial","text":"","code":"\\dontrun{ trial$independentIncrement('pfs', 'pbo', listener$get_event_names(), 'oracle') }"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-dunnetttest-","dir":"Reference","previous_headings":"","what":"Method dunnettTest()","title":"Class of Trial — Trial","text":"carry closed test based Dunnett method group sequential design.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-47","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$dunnettTest(endpoint, placebo, treatments, events, planned_info, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-28","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"endpoint character endpoint Dunnett test. placebo character. Name placebo arm. treatments character vector. Name treatment arms used comparison. events character vector. Names triggered events either adaptation applied statistical testing endpoint performed. Event events need sorted triggering time. planned_info data frame planned number events time--event endpoint stage arm. Event names, .e., events row names planned_info, arm names, .e., c(placebo, treatments) column names. Note accumulative stage-wise event numbers. usually easy determine numbers practice, simulation may used get estimates. Note: planned_info can also character \"default\" planned_info set number newly randomized patients control arm stages. assumes event rate change time /sample ratio placebo treatment arm change well, may true. purpose debugging rapid implementation . Using simulation pick planned_info recommended formal simulation study. ... subset condition compatible dplyr::filter. survdiff fitted subset compute one-sided logrank statistics. useful comparison made subset treatment arms. default specified, data (placebo plus one treatment arm time) locked data used fit model.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class of Trial — Trial","text":"function computes stage-wise p-values intersection hypotheses based Dunnett test. one treatment arm present, equivalent compute stage-wise p-values elemental hypotheses. function also computes inverse normal combination test statistics stages. choice planned_info can affect calculation stage-wise p-values. Specifically, used compute columns observed_info p_inverse_normal returned data frame, used Trial$closedTest(). choice planned_info can affect result Trial$closedTest() user chose caution. Note Trial$closedTest(), observed_info, derived planned_info, lead closed testing results constant. closed test uses information fraction observed_info/sum(observed_info). result, setting planned_info , e.g., 10 * planned_info give closed test results. Based numerical study, setting planned_info = \"default\" leads much higher power (roughly 10%) setting planned_info median event numbers stages, can determined simulation. sure regulator support practice. example, event (e.g., interim analysis) triggered pre-specified calendar time, number randomized patients random unknown planning trial. understand correctly, regulator may want information fraction closed test (combined Dunnett test) pre-fixed. addition, choice planned_info assumes event rates change time obviously true. recommended always use pre-fixed planned_info restrict control family-wise error rate. pointed choice pre-fixed planned_info can affect statistical power significantly fine-tuning may required.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Class of Trial — Trial","text":"list element names like arm_name, arm1_name|arm2_name, arm1_name|arm2_name|arm3_name, etc., .e., possible combination treatment arms comparison. element data frame, column names self-explained. Specifically, columns p_inverse_normal, observed_info, is_final can used GroupSequentialTest perform significance test.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of Trial — Trial","text":"","code":"\\dontrun{ trial$dunnettTest('pfs', 'pbo', c('high dose', 'low dose'), listener$get_event_names(), 'default') }"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-closedtest-","dir":"Reference","previous_headings":"","what":"Method closedTest()","title":"Class of Trial — Trial","text":"perform closed test based Dunnett test","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-48","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$closedTest(   dunnett_test,   treatments,   events,   alpha,   alpha_spending = c(\"asP\", \"asOF\") )"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-29","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"dunnett_test object returned Trial$dunnettTest(). treatments character vector. Name treatment arms used comparison. events character vector. Names triggered events significance testing endpoint performed closed test. Event events need sorted triggering time. alpha numeric. Allocated alpha. alpha_spending alpha spending function. can \"asP\" \"asOF\". Note theoretically can \"asUser\", tested. may supported future.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Class of Trial — Trial","text":"data frame columns arm, decision, event_at_reject, reject_time.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of Trial — Trial","text":"","code":"\\dontrun{ dt <- trial$dunnettTest(   'pfs', 'pbo', c('high dose', 'low dose'),   listener$get_event_names(), 'default')  trial$closedTest(dt, c('high dose', 'low dose'),                  c('pfs interim', 'pfs final'),                  0.025, 'asOF') }"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-get-seed-","dir":"Reference","previous_headings":"","what":"Method get_seed()","title":"Class of Trial — Trial","text":"return random seed","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-49","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$get_seed()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Class of Trial — Trial","text":"print trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-50","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$print()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Class of Trial — Trial","text":"objects class cloneable method.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"usage-51","dir":"Reference","previous_headings":"","what":"Usage","title":"Class of Trial — Trial","text":"","code":"Trial$clone(deep = FALSE)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"arguments-30","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class of Trial — Trial","text":"deep Whether make deep clone.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/Trial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class of Trial — Trial","text":"","code":"risk1 <- data.frame(   end_time = c(1, 10, 26.0, 52.0),   piecewise_risk = c(1, 1.01, 0.381, 0.150) * exp(-3.01) )  pfs1 <- Endpoint$new(name = 'pfs', type='tte',           generator = PiecewiseConstantExponentialRNG,           risk = risk1, endpoint_name = 'pfs') orr1 <- Endpoint$new(   name = 'orr', type = 'non-tte',   readout = c(orr=1), generator = rbinom,   size = 1, prob = .4) placebo <- Arm$new(   name = 'pbo', description = 'Placebo arm')  placebo$add_endpoints(pfs1, orr1)  risk2 <- risk1 risk2$hazard_ratio <- .8 pfs2 <- Endpoint$new(name = 'pfs', type='tte',           generator = PiecewiseConstantExponentialRNG,           risk = risk2, endpoint_name = 'pfs') orr2 <- Endpoint$new(   name = 'orr', type = 'non-tte',   generator = rbinom, readout = c(orr=3),   size = 1, prob = .6) active <- Arm$new(   name = 'ac', description = 'Active arm')  active$add_endpoints(pfs2, orr2)  ## Plan a trial, Trial-3415, of up to 100 patients. ## Enrollment time follows an exponential distribution, with median 5 trial <- Trial$new(   name = 'Trial-3415', n_patients = 100,   seed = 31415926, duration = 100,   enroller = rexp, rate = log(2) / 5) trial$add_arms(sample_ratio = c(1, 2), placebo, active) #> Arm(s) <pbo, ac> are added to the trial.  #> Randomization is done for 100 potential patients.  #> Data of 100 potential patients are generated for the trial with 2 arm(s) <pbo, ac>.    ## ------------------------------------------------ ## Method `Trial$get_data_lock_time_by_event_number` ## ------------------------------------------------  ## trial$get_data_lock_time_by_event_number(c('pfs','orr'), c(200,500), 'any')  ## ------------------------------------------------ ## Method `Trial$get_data_lock_time_by_calendar_time` ## ------------------------------------------------  ## trial$get_data_lock_time_by_calendar_time(20)  ## ------------------------------------------------ ## Method `Trial$independentIncrement` ## ------------------------------------------------   if (FALSE) { # \\dontrun{ trial$independentIncrement('pfs', 'pbo', listener$get_event_names(), 'oracle') } # }  ## ------------------------------------------------ ## Method `Trial$dunnettTest` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ trial$dunnettTest('pfs', 'pbo', c('high dose', 'low dose'), listener$get_event_names(), 'default') } # }   ## ------------------------------------------------ ## Method `Trial$closedTest` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ dt <- trial$dunnettTest(   'pfs', 'pbo', c('high dose', 'low dose'),   listener$get_event_names(), 'default')  trial$closedTest(dt, c('high dose', 'low dose'),                  c('pfs interim', 'pfs final'),                  0.025, 'asOF') } # }"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/TriggerByCalendarTime.html","id":null,"dir":"Reference","previous_headings":"","what":"A trigger_condition function — TriggerByCalendarTime","title":"A trigger_condition function — TriggerByCalendarTime","text":"trigger_condition function find data lock time specified calendar time. can passed trigger_condition creating `Event`.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/TriggerByCalendarTime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A trigger_condition function — TriggerByCalendarTime","text":"","code":"TriggerByCalendarTime(trial = NULL, event_name, calendar_time, arms = NULL)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/TriggerByCalendarTime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A trigger_condition function — TriggerByCalendarTime","text":"trial Trial object. event_name character. Name event. Event$get_name(). calendar_time numeric. Calendar time trigger event. arms vector arms' name triggering condition tested.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/TriggerByCalendarTime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A trigger_condition function — TriggerByCalendarTime","text":"data lock time (calendar), `Event` class can lock data.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/TriggerByEventNumbers.html","id":null,"dir":"Reference","previous_headings":"","what":"A trigger_condition function — TriggerByEventNumbers","title":"A trigger_condition function — TriggerByEventNumbers","text":"trigger_condition function find data lock time target event numbers met specified endpoints. can passed trigger_condition creating `Event`.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/TriggerByEventNumbers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A trigger_condition function — TriggerByEventNumbers","text":"","code":"TriggerByEventNumbers(   trial = NULL,   event_name,   endpoints,   target_n_events,   arms = NULL,   meet = c(\"all\", \"any\") )"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/TriggerByEventNumbers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A trigger_condition function — TriggerByEventNumbers","text":"trial Trial object. event_name character. Name event. Event$get_name(). endpoints character vectors. Endpoints compute event numbers. target_n_events target event numbers endpoints trigger event. arms vector arms' name number events counted. default NULL arms used. Sometimes one may want count number events subset arms trial, example, arm removed, number events trigger next event/action may based remaining arms . meet '' target event numbers need met triggering event. '' triggering event first target met corresponding endpoint.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/TriggerByEventNumbers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A trigger_condition function — TriggerByEventNumbers","text":"data lock time (calendar), `Event` class can lock data.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/calendarTime.html","id":null,"dir":"Reference","previous_headings":"","what":"Triggering condition by calendar time — calendarTime","title":"Triggering condition by calendar time — calendarTime","text":"Define condition trigger trial event calendar time.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/calendarTime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Triggering condition by calendar time — calendarTime","text":"","code":"calendarTime(time)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/calendarTime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Triggering condition by calendar time — calendarTime","text":"time numeric. Calendar time trigger event.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/calendarTime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Triggering condition by calendar time — calendarTime","text":"object class `Condition`","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/default_action.html","id":null,"dir":"Reference","previous_headings":"","what":"default action function for dry run of a trial — default_action","title":"default action function for dry run of a trial — default_action","text":"default action function dry run trial","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/default_action.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"default action function for dry run of a trial — default_action","text":"","code":"default_action()"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/doNothing.html","id":null,"dir":"Reference","previous_headings":"","what":"An action function that does nothing — doNothing","title":"An action function that does nothing — doNothing","text":"action function nothing corresponding event triggered. listener monitoring trial determining time trigger event, data automatically locked necessary data manipulation executed. users intent modify trial adaptively event, e.g., adding (Trial$add_arms()) removing (Trial$remove_arms()) arm(s), changing sampling ratio(s) (Trial$update_sample_ratio()), modifying trial duration, carrying statistical testing, saving intermediate results (Trial$save()), function can used set argument action creating new Event.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/doNothing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An action function that does nothing — doNothing","text":"","code":"doNothing(trial, event_name)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/doNothing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An action function that does nothing — doNothing","text":"trial Trial object. event_name character. Name event triggered.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/doNothing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An action function that does nothing — doNothing","text":"function returns NULL. Actually, nothing done function.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/enrollment.html","id":null,"dir":"Reference","previous_headings":"","what":"Triggering condition by number of randomized patients — enrollment","title":"Triggering condition by number of randomized patients — enrollment","text":"Define condition trigger trial event number randomized patients.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/enrollment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Triggering condition by number of randomized patients — enrollment","text":"","code":"enrollment(n)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/enrollment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Triggering condition by number of randomized patients — enrollment","text":"n integer. Number randomized patients.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/enrollment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Triggering condition by number of randomized patients — enrollment","text":"object class `Condition`","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/eventNumber.html","id":null,"dir":"Reference","previous_headings":"","what":"Triggering condition by number of events — eventNumber","title":"Triggering condition by number of events — eventNumber","text":"Define condition trigger trial event number events endpoint.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/eventNumber.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Triggering condition by number of events — eventNumber","text":"","code":"eventNumber(endpoint, n, arms = NULL)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/eventNumber.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Triggering condition by number of events — eventNumber","text":"endpoint character. Name endpoint. n integer. Targeted number events. arms vector character. Name arms number events counted. NULL, use arms yet removed trial time calculation.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/eventNumber.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Triggering condition by number of events — eventNumber","text":"object class `Condition`","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitCoxph.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Cox proportional hazard ratio model — fitCoxph","title":"Fit Cox proportional hazard ratio model — fitCoxph","text":"Fit Cox proportional hazards model time--event endpoint.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitCoxph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Cox proportional hazard ratio model — fitCoxph","text":"","code":"fitCoxph(endpoint, placebo, data, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitCoxph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Cox proportional hazard ratio model — fitCoxph","text":"endpoint Character. Name endpoint data. placebo Character. String indicating placebo data$arm. data Data frame. Usually locked data set. ... Subset conditions compatible dplyr::filter. coxph fitted subset . argument can useful create subset data analysis trial consists two arms. default, specified, data used fit model. one condition can specified ..., e.g., fitCoxph('pfs', 'pbo', data, arm %% c('pbo', 'low dose'), pfs > 0.5), equivalent : fitCoxph('pfs', 'pbo', data, arm %% c('pbo', 'low dose') & pfs > 0.5).","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitCoxph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Cox proportional hazard ratio model — fitCoxph","text":"data frame three columns: p one-sided p-value log hazard ratio (alternative hypothesis: log hazard ratio > 0). info number events endpoint subset. z z statistics log hazard ratios.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit linear regression model — fitLinear","title":"Fit linear regression model — fitLinear","text":"Fit linear regression model continuous endpoint.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit linear regression model — fitLinear","text":"","code":"fitLinear(endpoint, placebo, data, alternative, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitLinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit linear regression model — fitLinear","text":"endpoint Character. Name endpoint data. placebo Character. String indicating placebo data$arm. data Data frame. Usually locked data set. alternative character string specifying alternative hypothesis, must one \"greater\" \"less\". default value. \"greater\" means superiority treatment placebo established greater mean treated arm linear regression model fitted endpoint ~ (arm != placebo). ... Subset conditions compatible dplyr::filter. glm fitted subset . argument can useful create subset data analysis trial consists two arms. default, specified, data used fit model. one condition can specified ..., e.g., fitLinear('cfb', 'pbo', data, arm %% c('pbo', 'low dose'), cfb > 0.5), equivalent : fitLinear('cfb', 'pbo', data, arm %% c('pbo', 'low dose') & cfb > 0.5). Note one treatment arm present data applying filter ..., models fitted placebo verse treatment arms.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitLinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit linear regression model — fitLinear","text":"data frame three columns: p one-sided p-value -arm difference (treated vs placebo). info sample size subset NA removed. z z statistics -arm difference (treated vs placebo).","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitLogistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit logistic regression model — fitLogistic","title":"Fit logistic regression model — fitLogistic","text":"Fit logistic regression model binary endpoint.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitLogistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit logistic regression model — fitLogistic","text":"","code":"fitLogistic(endpoint, placebo, data, alternative, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitLogistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit logistic regression model — fitLogistic","text":"endpoint Character. Name endpoint data. placebo Character. String indicating placebo data$arm. data Data frame. Usually locked data set. alternative character string specifying alternative hypothesis, must one \"greater\" \"less\". default value. \"greater\" means superiority treatment placebo established odds ratio greater 1 logistic regression model fitted endpoint ~ (arm != placebo). ... Subset conditions compatible dplyr::filter. glm fitted subset . argument can useful create subset data analysis trial consists two arms. default, specified, data used fit model. one condition can specified ..., e.g., fitLogistic('remission', 'pbo', data, arm %% c('pbo', 'low dose'), cfb > 0.5), equivalent : fitLogistic('remission', 'pbo', data, arm %% c('pbo', 'low dose') & cfb > 0.5). Note one treatment arm present data applying filter ..., models fitted placebo verse treatment arms.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitLogistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit logistic regression model — fitLogistic","text":"data frame three columns: p one-sided p-value log odds ratio (treated vs placebo). info sample size subset NA removed. z z statistics log odds ratio (treated vs placebo).","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitLogrank.html","id":null,"dir":"Reference","previous_headings":"","what":"Carry out log rank test — fitLogrank","title":"Carry out log rank test — fitLogrank","text":"Compute log rank test statistic endpoint.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitLogrank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Carry out log rank test — fitLogrank","text":"","code":"fitLogrank(endpoint, placebo, data, ...)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitLogrank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Carry out log rank test — fitLogrank","text":"endpoint character. Name endpoint data. placebo character. String placebo data$arm. data data frame. Usually locked data. ... subset condition compatible dplyr::filter. survival::survdiff fitted subset . argument useful create subset data analysis trial consists two arms. default specified, data used fit model. one conditions can specified ..., e.g., fitLogrank('pfs', 'pbo', data, arm %% c('pbo', 'low dose'), pfs > 0.5), equivalent fitLogrank('pfs', 'pbo', data, arm %% c('pbo', 'low dose') & pfs > 0.5).","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/fitLogrank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Carry out log rank test — fitLogrank","text":"data frame three columns: p one-sided p-value log rank test (alternative hypothesis: risk higher placebo arm). info number events endpoint subset. z one-sided logrank statistics.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/rconst.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate constant variable — rconst","title":"Generate constant variable — rconst","text":"random number generator returning constant. can used set dropout time. Currently default value dropout time, `value = Inf`.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/reference/rconst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate constant variable — rconst","text":"","code":"rconst(n, value)"},{"path":"https://zhangh12.github.io/TrialSimulator/reference/rconst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate constant variable — rconst","text":"n integer. Number observations. value value constant observations.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fixes-0-52-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"TrialSimulator 0.52.0","text":"Fix bug data censored correctly events. bug affect trial without interims.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-51-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.51.0","text":"Add vignette non-time--event endpoints. Add function weibullDropout compute parameters Weibull distribution using dropout distribution.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-49-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.49.0","text":"Add vignette time--event endpoints.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fixes-0-48-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"TrialSimulator 0.48.0","text":"Fix bug alpha node graph set rounding error bound 1e-5 alpha propagated.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-47-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.47.0","text":"Support new condition system event triggering. Built-functions enrollment, eventNumber calendarTime can combined & |. Nested combination supported using parentheses. TriggerByEventNumbers TriggerByCalendarTime therefore deprecated.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fixes-0-44-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"TrialSimulator 0.44.0","text":"Fix bug adding arm already trial.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-43-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.43.0","text":"Add function fitLogistic fit logistic regression model. Support model fitting multiple treatment arms logistic regression, Cox PH model, logrank test.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"minor-updates-0-42-0","dir":"Changelog","previous_headings":"","what":"Minor Updates","title":"TrialSimulator 0.42.0","text":"Add logo.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fixes-0-40-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"TrialSimulator 0.40.0","text":"Revise examples CRAN submission.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fixes-0-39-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"TrialSimulator 0.39.0","text":"Remove space class name eliminate R CMD check note.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fixes-0-38-2","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"TrialSimulator 0.38.2","text":"Throw error message none hypotheses test non-zero alpha graphical test. Update vignette.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-38-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.38.1","text":"Plot stacked area chart accumulative event numbers endpoints.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fixes-0-38-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"TrialSimulator 0.38.1","text":"Fix bug small weight (epsilon) used graph graphical testing. Small weight can conflict integral tolerance error.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-37-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.37.0","text":"Return informative error message custom random number generators used define endpoints. Specifically, guides users return columns time--event endpoints properly. Update manual generator Endpoint.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fixes-0-36-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"TrialSimulator 0.36.0","text":"Fix bug GraphicalTesting hypothesis tested multiple times stage alpha passed rejected hypothesis.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-35-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.35.0","text":"Warn incremental information low can affect normality approximation combination test.","code":""},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"bug-fixes-0-35-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"TrialSimulator 0.35.0","text":"Minor bugs fixed.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-33-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.33.0","text":"Add README.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-33-0-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.33.0","text":"Provide default action function do_nothing() users intent anything triggered event. function can passed argument action creating new event, e.g., Event$new(name = 'interim', trigger_condition = TriggerByCalendarTime, action = do_nothing, calendar_time = 64).","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-30-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.30.0","text":"Capture error inside Controller$run() insert error message output (see Trial$get_output()$error_message). helps integrate TrialSimulator targets.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-29-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.29.0","text":"Support closed test based inverse normal combination test. Seed can accessed Trial$get_seed().","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-28-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.28.0","text":"Support inverse normal combination test multiple treatment arms present. Dunnett’s test used comparison. Specify random seed user dose pick one. Seed saved Trial’s output reproducibility.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-27-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.27.0","text":"Support dry run fixed design.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-26-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.26.0","text":"Adjust boundary final analysis - -running trials. Support custom alpha spending function graphical testing procedure.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-25-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.25.0","text":"Support inverse normal combination test logrank statistics.","code":""},{"path":[]},{"path":"https://zhangh12.github.io/TrialSimulator/news/index.html","id":"new-features-0-24-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"TrialSimulator 0.24.0","text":"Update GraphicalTesting based simplified interface GroupSequentialTest.","code":""}]
